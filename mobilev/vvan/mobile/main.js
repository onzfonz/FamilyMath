/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */
 
var BR_POINTS_PER_CAR = 10;
var BR_ANSWERS_BEFORE_SPEED_UP = 3;  // Number of correct answers before the car speeds up
var BR_PERCENTAGE_OF_PRIMES = 0.50;  // Percentage of cars that are primes
var BR_PERCENTAGE_OF_MULTS = 0.60;
var BR_CAR_SPEEDS = new Array(10, 9, 8, 6, 5, 4, 3);  // The starting speed of the cars
var br_primes = new Array(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59);
var br_nonPrimes = new Array(4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,26,27,28,30,32,33,34,35,36,38,39,40,42,44,45,46,48,49,50,51,52,54,55,56,57,58,60);
var tl_previousGuesses = new Array();
var tl_previousLights = new Array();
var MAX_PLAYERS=4;
var VV_MIN_SECONDS=30;
var VV_MAX_SECONDS=300;

var EstimationAdjectives = new Array("","Black","Blue","Gold","Green","Grey","Orange", "Pink", "Purple","Red","Silver","White","Yellow")
var EstimationNouns =  new Array("Cars", "Clouds", "Gas Stations", "Houses", "Motorcycles","People","Restaurants", "Trees", "Trucks");
var EstimationTimes =  new Array("1 minute", "2 minutes", "3 minutes", "4 minutes", "5 minutes", "6 minutes", "7 minutes", "8 minutes");

// Variables
var br_primeCarsPoints = 0;
var br_carNumber = 0;
var br_carSpeed = BR_CAR_SPEEDS[Math.floor(br_primeCarsPoints / BR_POINTS_PER_CAR)];
var br_carClicked = false;
var br_primeCarsMistakes = 0;
var br_primeCarsDead = false;  // True when a player has 3 strikes in prime cars
var br_timeouts1 = new Array();
var br_timeouts2 = new Array();
var br_teimouts3;

var P  = 0;
var NP = 1; 

var PCproblem; //number
var PCguess; 
var PCanswer;
var PCvalues = new Array("PRIME","NOT PRIME");
var PCmode;
var PCmultiplier;
var PC_PRIME_MODE = 1;
var PC_EVEN_MODE = 2;
var PC_MULT_MODE = 3;


var TLanswer;
var TLeasymode = true;
var TLcurrentguess;
var TLcurrentPlayer = -1; //for traffic lights, set to -1 initially
var TLSCORE=150; // winning score for traffic lights
var TL_LOWER_PTS_BOUND = 50;
var TL_JACKPOT_PENALTY = 10;
var TLcurJackpot; //number of points for getting traffic lights
var PCcurrentPlayer = -1; //for traffic lights, set to -1 initially

var fromCity;
var toCity;
var guessArray;

var currentplayerid=0; //first player
var numPlayers=2; //total players input. the default is 2

var adminName;

//KEEP TRACK OF PREVIOUS AND NEXT SCREENS
var beforeback;
var back;
var next;
var afternext;

//KEEP TRACK OF CURRENT VIEW
var currentview;

//ADMIN
var adminname;

//USERS
var userfname;
var userlname;

//AVATARS
var currPlayerToChangeAvatar;
var selectedImage;

//GoogleMap
var gmap;

//CREATING THE PREVIOUS GUESS OBJECT
function TLGuessObject(){
    this.guess = 0;
    this.lights = new Array();
    this.challengelight = '';
    this.avatar = '';
}
var tl_guessHistory;

//CREATING THE PLAYERS OBJECT
function playerObject(){
    this.name      = ''; //playername
    this.score     = 0;  //playerscore
    this.avatar    = ''; //playeravatar
    this.admin     = 0;  //is the player an admin
    this.isplaying = 0;  //is the player playing this game
    this.mainguessmiles = 0;  //this is the player's estimation for the main game
    this.mainguessminutes = 0; //this is the player's estimation (in minutes) for the main game
    this.age = 0; //player's age
    this.vvCorrect = 0; //number of questions answered correctly
    this.vvTotal = 0; //total number of questions asked
    
    var that = this;
    var index = 0;
    
    this.setIndex = function(ind) {
        that.index = ind;
    }
    
    this.getIndex = function() {
        return that.index;
    }
    
    this.addToScore = function(addedPoints) {
        that.score += Number(addedPoints);
        localStorage['player'+that.getIndex()+'score'] = that.score;
        add2ScoreInDBJS(that.name, addedPoints);
    }
  
    this.getScore = function () {
        return that.score;
    }
    
    this.getMilesGuess = function() {
        return that.mainguessmiles;
    }
    
    this.setMilesGuess = function(guess) {
        that.mainguessmiles = guess;
    }
    
    this.getTimeGuess = function() {
        return that.mainguessminutes;
    }
    
    this.getTimeGuessHours = function() {
        return Math.floor(that.mainguessminutes/60);
    }
    
    this.getTimeGuessMinsLeft = function() {
        var hours = that.getTimeGuessHours();
        var minutesTaken = hours*60;
        return that.getTimeGuess()-minutesTaken;
    }
    
    this.setTimeGuess = function(guess) {
        that.mainguessminutes = guess;
    }
    
    this.setTimeGuess = function(hours, mins) {
        that.mainguessminutes = Number(hours) * 60 + Number(mins);
    }
    
    this.getAge = function() {
        return that.age;
    }
    
    this.setAge = function(years) {
        that.age = years;
    }
    
    this.vvCorrectAnswer = function() {
        that.vvCorrect++;
        that.vvTotal++;
    }
    
    this.vvIncorrectAnswer = function() {
        that.vvTotal++;
    }
    
    this.vvReset = function() {
        that.vvCorrect = 0;
        that.vvTotal = 0;
    }
}
var playerlist;

//CREATING AN OBJECT TO HOLD THE ANSWERS FOR THE PIT STOP GAME
function pitstopAnswersObject(){
  this.answers = new Array();
  this.scores  = new Array();
}

//CREATING AN OBJECT TO HOLD THE ANSWERS FOR THE TRAFFIC SIGNAL GAME
function tlAnswersObject(){
  this.answers = new Array();
  this.scores  = new Array();
}

//CREATING AN OBJECT TO HOLD THE ANSWERS FOR THE PRIME CARS GAME
function pcAnswersObject(){
  this.answers = new Array();
  this.scores  = new Array();
}

function VictoryVanQuestionObject() {
    this.questionid;
    this.question;
    this.answer;
    this.possibleAnswers = new Array();
    this.level;
    this.textFields = ["vvQAnswerText", "vvQAnswerLabel"];
    this.answeredCorrectly;
    
    var that = this;
    this.initialize = function(q, a, ops, l) {
        that.question = q;
        that.answer = a;
        that.possibleAnswers = ops;
        that.level = l;
        that.answeredCorrectly = undefined;
    }
    
    this.initFromDB = function(arr) {
    	that.questionid = arr[0];
    	that.question = arr[1];
    	that.answer = arr[6];
    	that.level = arr[7];
    	pAnswers = createOptions([arr[2], arr[3], arr[4], arr[5]]);
    	that.possibleAnswers = pAnswers;
    }
    
    function createOptions(optsArr) {
    	var newArr = new Array();
    	for(var i = 0; i < optsArr.length; i++) {
    		if(optsArr[i] != "") {
    			newArr.push(optsArr[i]);
    		}
    	}
 		newArr.splice(randomNumber(newArr.length+1), 0, that.answer);
 		if(newArr.length == 1) {
    		return null;
    	}else{
    		return newArr;
    	}
    }
    
    this.isMC = function() {
        return that.possibleAnswers != null && that.possibleAnswers.length > 0;
    }
    
    this.checkAnswer = function() {
        var userResponse = get("vvQAnswerText").value;
        if(that.isMC()) {
            var radarray = buildRadioArray("vvqradio");
            var namesarray = buildRadioArray("vvqradiodiv");
            userResponse = getCheckedName(radarray, namesarray);
        }
        changeLabelText("vvPassLastProblem", "The last problem was: " + that.question);
        changeLabelText("vvPassYourAnswer", "Your Answer: " + userResponse);
        changeLabelText("vvPassCorrectAnswer", "Correct Answer: " + that.answer);
        var rightwrongtext = "D'oh!";
        that.answeredCorrectly = false;
        if(userResponse == that.answer) {
            rightwrongtext = "Correct!";
            that.answeredCorrectly = true;
        }
        changeLabelText("vvPassRightWrong", rightwrongtext);
        return that.answeredCorrectly;
    }
    
    function buildRadioArray(names) {
        var radioArr = new Array();
        for(var i = 0; i < that.possibleAnswers.length; i++) {
            var suffix = i;
            if(i == 0) {
                suffix = "";
            }
            radioArr.push(get(names+suffix));
        }
        return radioArr;
    }
    
    // return the value of the radio button that is checked
    // return an empty string if none are checked, or
    // there are no radio buttons
    function getCheckedName(radioObj, radioNames) {
        if(!radioObj) {
            return "";
        }
        var radioLength = radioObj.length;
        if(radioLength == undefined) {
            if(radioObj.checked) {
                return radioObj.innerHTML;
            } else {
                return "";
            }
        }
        for(var i = 0; i < radioLength; i++) {
            if(radioObj[i].checked) {
                return radioNames[i].innerHTML;
            }
        }
        return "";
    }

    
    this.showMCOptions = function() {
        if(that.isMC()) {
            //must be a multiple choice Answer
            multipleChoiceOptions("vvQuestionRadio", 5, that.possibleAnswers);
            hideShowTextFields(that.textFields, "hidden");
        }else{
            multipleChoiceOptions("vvQuestionRadio", 5, that.possibleAnswers);
            hideShowTextFields(that.textFields, "visible");
            get("vvQAnswerText").value = "";
        }
    }
    
    function multipleChoiceOptions(opts, numOptions, optsText) {
        var startNum = 0;
        if(optsText != null) {
            startNum = optsText.length;
        }
        hideShowMultipleChoiceOptions(opts, startNum, 0, "visible");
        hideShowMultipleChoiceOptions(opts, numOptions, startNum, "hidden");
    }
    
    function hideShowMultipleChoiceOptions(opts, numOptions, startNum, visible) {
//        opts = "vvQuestionRadio"
//        numOptions = 4;
        var optsTextID = "vvqradiodiv";
        var optsID = "vvqradio";
        for(var i = startNum; i < numOptions; i++) {
            var suffix = i;
            if(i == 0) {
                suffix = "";
            }
            get(opts+suffix).style.visibility = visible;
            if(visible == "visible") {
                get(optsTextID+suffix).innerHTML = that.possibleAnswers[i];
                get(optsID+suffix).checked = false;
            }
        }
    }
    
    function hideShowTextFields(fields, visprop) {
        for(var i = 0; i < fields.length; i++) {
            get(fields[i]).style.visibility = visprop;
        }
    }
}

function randomNumber(high) {
	return Math.floor(Math.random()*high);
}

var obj1 = new VictoryVanQuestionObject();
obj1.initialize("A Rectangle Has Four Sides", "True", ["True", "False"], "A");
var obj2 = new VictoryVanQuestionObject();
obj2.initialize("17+30=?", "47", null, "A");
var vvdb = new Array(obj1, obj2);

function VictoryVanObject() {
    this.secondsLeft;
    this.curPlayer;
    this.curTimer;
    this.minIDs;
    this.secsIDs;
    this.curQuestion;
    this.questionsGiven;
    this.answeredCorrectlyThisRound;
    this.timeSpentOnProblem;
    this.secondsLeftWhenStartedProblem;
    
    var vvPassElems = ["vvPassRightWrong", "vvPassLastProblem", "vvPassYourAnswer", "vvPassCorrectAnswer"];
    var that = this;
    
    this.initialize = function(secs, mIDs, sIDs) {
        that.curPlayer = -1;
        that.minIDs = new Array();
        that.secsIDs = new Array();
        for(var i = 0; i < mIDs.length; i++) {
            that.minIDs.push(mIDs[i]);
            that.secsIDs.push(sIDs[i]);
        }
        that.setSeconds(secs);
        hidevvPassElems(true);
        that.questionsGiven = new Array();
        that.curTimer = setInterval("vVanObj.subtractSecond()", 1000);
        that.answeredCorrectlyThisRound = initVVRoundTracking();
        that.timeSpentOnProblem = initVVRoundTracking();
    }
    
    function initVVRoundTracking() {
    	var arr = new Array();
    	for(var i = 0; i < numPlayers; i++) {
    		arr.push(0);
    	}
    	return arr;
    }
    
    this.subtractSecond = function() {
        if(that.secondsLeft <= 0) {
            clearInterval(that.curTimer);
            prepareFinishedPage();
            switchTo("vvGameFinished");
        }else{
            that.setSeconds(that.secondsLeft-1);
        }
    }
    
    function prepareFinishedPage() {
    	var mvpIndex = pickLargest(that.answeredCorrectlyThisRound, -1);
    	var spiritIndex = pickLargest(that.timeSpentOnProblem, mvpIndex);
    	changeMVPAndSpirit(mvpIndex, spiritIndex);
    	changeLabelText("vvFinishNumCorrect", "As a family, you answered " + numCorrectAnswers() + " out of " + that.questionsGiven.length + " questions correctly.");
    }
    
    function changeMVPAndSpirit(mIndex, sIndex) {
    	changeLabelText("vvFinishMVPName", playerlist[mIndex].name);
    	get("vvFinishMVP").src = playerlist[mIndex].avatar;
    	changeLabelText("vvFinishSpiritName", playerlist[sIndex].name);
    	get("vvFinishSpirit").src = playerlist[sIndex].avatar;
    }
    
    function pickLargest(arr, indexExcluded) {
    	var startIndex = 0;
    	if(indexExcluded == 0) {
    		startIndex = 1;
    	}
    	var maxAnswered = arr[startIndex];
    	var mvpIndex = startIndex;
    	for(var i = 1; i < numPlayers; i++) {
    		if(i != indexExcluded) {
    			var numAnswered = arr[i];
    			if(numAnswered > maxAnswered) {
    				mvpIndex = i;
    				maxAnswered = numAnswered;
    			}else if(numAnswered == maxAnswered) {
    				if(Math.random() < .5) {
    					mvpIndex = i;
    				}
        		}
        	}
        }
        return mvpIndex;
    }
    
	function numCorrectAnswers() {
		var numCorrect = 0;
		for(index in that.questionsGiven) {
			var curQuestion = (that.questionsGiven)[index];
			if(curQuestion.answeredCorrectly) {
				numCorrect++;
			}
		}
		return numCorrect;
	}
	
    this.setSeconds = function(secs) {
        that.secondsLeft = secs;
        var minutes = Math.floor(secs / 60);
        var seconds = secs % 60;
        if(seconds < 10) seconds = "0"+seconds;
        for(var i = 0; i < that.minIDs.length; i++) {
            get(that.minIDs[i]).innerText = minutes;
            get(that.secsIDs[i]).innerText = seconds;
        }
    }
    
    this.setNextPlayer = function() {
        that.curPlayer = (that.curPlayer+1) % numPlayers;
        changeLabelText("vvPassPlayerName", playerlist[that.curPlayer].name);
        setAvatar("vvnextAvatar", that.curPlayer);
    }
    
    function hidevvPassElems(shouldHide) {
        var vis = 'visible';
        if(shouldHide) {
            vis = 'hidden';
        }
        for(var i = 0; i < vvPassElems.length; i++) {
            get(vvPassElems[i]).style.visibility = vis;
        }
    }
    
    function determineLevel() {
    	//that.curPlayer.age and number answered right and wrong
    	return 1;
    }
    
    this.retrieveNextQuestion = function() {
    	var l = determineLevel();
    	getQuestionJS(l);
    }
    
    this.prepareNextQuestion = function(data) {
        that.curQuestion = createQuestionFromData(data);
        that.questionsGiven.push(that.curQuestion);
        var q = that.curQuestion;
        changeLabelText("vvQQuestion", "Question: " + q.question);
        q.showMCOptions();
        switchTo('vvQuestionTemplate');
        that.secondsLeftWhenStartedProblem = that.secondsLeft;
    }
    
    this.checkAnswer = function() {
        var wasRight = that.curQuestion.checkAnswer();
        if(wasRight) {
        	(that.answeredCorrectlyThisRound[that.curPlayer])++;
        }
        that.timeSpentOnProblem[that.curPlayer] += parseInt(that.secondsLeftWhenStartedProblem - that.secondsLeft);
    }
    
    function createQuestionFromData(data) {
		var q = new VictoryVanQuestionObject();
		q.initFromDB(data);
		return q;
	}
        
}
var vVanObj;

var pitstopobj;
var PTproblem; //number
var PTguess;

var geocoder, location1, location2, gDir;
var distanceMiles;

var inputNum = new Array(0,0,0);

var estimateCount = 0; //Keeps track of the count during estimationStation
var secretMode = true;
var estimateTimer;
var estimateTimerMin;
var estimateTimerSec;

//Creating an object to hold player estimates for EstimationStation
function estimateObj(){
  this.estimate = "";
  this.difference  = "";
  this.playerNumber = 0;
}
var estimatesObj;

//Creating an array to hold if matchup between adjectives and nouns makes sense
var appropriateAdj = new Array();

// Macros
var RED = 100;
var YELLOW = 10;
var GREEN = 1;


//DATABASE VARIABLES
var xmlhttp;
var userid;
var url="getquestion.php";
var currentsid;

//GAMES LIST
var PC = 0;
var TL = 1;
var PS = 2;
var ES = 3

var games = new Array("PRIMECARS","TRAFFICLIGHTS","	TOP", "ESTIMATIONSTATION");

//
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//
function load()
{
    dashcode.setupParts();
    numPlayers = 4;
    playerlist = [];
    playernames = ["Osvaldo", "Cheryl", "Felicia", "Felix"];
    playeravatars = ["Images/monkey.png", "Images/bunny.jpg", "Images/panda.png", "Images/dragon.png"];
    for(var i = 0; i < numPlayers; i++) {
        playerlist.push(new playerObject());
        playerlist[i].name = playernames[i];
        playerlist[i].avatar = playeravatars[i];
        playerlist[i].score = 0;
    }
}

//
// Function: itemClicked()
// Called when an item from the items list is selected to navigate to the detail view
//
function itemClicked(event)
{
    var list = document.getElementById("list").object;
    var browser = document.getElementById('browser').object;
    var selectedObjects = list.selectedObjects();
    
    if (selectedObjects && (1 == selectedObjects.length)){
        // The Browser's goForward method is used to make the browser push down to a new level.
        // Going back to previous levels is handled automatically.
        browser.goForward(document.getElementById('detailLevel'), selectedObjects[0].valueForKey("name"));
    }    
}

//
// Function: itemDescription()
// This method is a value transformer that returns the appropriate description of the selected item in the list
//
itemDescription = Class.create(DC.ValueTransformer,{
	transformedValue: function(value){
        return "The scenery in " + value + " is amazing this time of year!";        
	}
});


function gotoGames(event)
{
    // Insert Code Here
}


function askAges(event)
{
    setEstimateAvatarsFull(event, "vv", null, 1);
    setVVPlayerEstimatesByDefault();
    switchTo('vVanAgeQuestions');
}

function setVVPlayerEstimatesByDefault() {
    for(var i = 1; i <=4; i++) {
        get("vvPlayerEstimate"+i).value = "10";
    }
    get("vvdriversAge").value = "10";
}

function moveToNextVVQuestion(event)
{
	changeLabelText("vvPassTo", "Loading the next question!");
    vVanObj.retrieveNextQuestion();
    //getQuestionJS();
}

function gotoScores(event)
{
    // Insert Code Here
}

function proceedToVVStart(event)
{
    var driverAge = get('vvdriversAge');
    if(AllAnswersAreIntegers("vv", 1) && isPositiveInteger(driverAge.value)) {
        storeAges("vv", 1, driverAge.value);
        initializeVictoryVan();
        preparePassPhoneToPage();
    }else{
        changeLabelText("EstimateError30", "All ages must be positive numbers");
        ClearNonValidEstimates("vv", 1);
        if(!isPositiveInteger(driverAge.value)) {
            driverAge.value = "";
        }
    }
}

function initializeVictoryVan() {
    vVanObj = new VictoryVanObject();
    var minIDs = ["vvPassMinID", "vvQMinID"];
    var secsIDs = ["vvPassSecsID", "vvQSecsID"];
    vVanObj.initialize(VV_MIN_SECONDS, minIDs, secsIDs);
}

function preparePassPhoneToPage() {
    vVanObj.setNextPlayer();
    changeLabelText("vvPassTo", "On to the next question!\nPlease pass the phone to");
    switchTo('vvPassPhoneTo');
}


function answerAndMoveOn(event)
{
    vVanObj.checkAnswer();
    preparePassPhoneToPage();
}

function storeAges(a, startIndex, driversAge) {
    for(var i = startIndex; i < numPlayers+startIndex; i++) {
        playerlist[i-startIndex].setAge(get(a+"PlayerEstimate"+i).value);
        playerlist[i-startIndex].vvReset();
    }
    playerlist.push(new playerObject());
    playerlist[numPlayers].name = "Driver";
    playerlist[numPlayers].age = driversAge;
}

function changeLabelText(id, message) {
    get(id).innerText = message;
    get(id).style.visibility = 'visible';
}

function setEstimateAvatarsFull(event, a, btnnamesarray, startIndex) {
    for (var i = 0; i < numPlayers; i++){
        showAvatar(a, i, startIndex);
        showPlayerName(a, i, startIndex);
        get(a + 'PlayerEstimate' + (i+startIndex)).style.visibility = 'visible';
        
        if(a == ""){   // enter buttons only need to be turned visible in secret mode
            get(btnnamesarray[i]).style.visibility = 'visible';
        }
    }
}

function showAvatar(a, ith, startIndex) {
    var currAvatar = get(a + 'EstimateAvatar' + (ith+startIndex));
    currAvatar.src = playerlist[ith].avatar;    
    currAvatar.style.visibility = 'visible';
}

function setAvatar(idImageName, i) {
    var cAvatar = get(idImageName);
    cAvatar.src = playerlist[i].avatar;
}

function showPlayerName(a, ith, startIndex) {
    var currName = get(a + 'estimatePlayerName' + (ith+startIndex));
    currName.innerText = playerlist[ith].name;
    currName.style.visibility = 'visible';
    return currName;
}

function get(element) {
    return document.getElementById(element);
}

function switchTo(viewName) {
    var stackLayout = document.getElementById('stackLayout').object; // Replace with id of StackLayout
    stackLayout.setCurrentView(viewName); // Replace with id of new view (or the view element itself)
}

function AllAnswersAreIntegers(a, startIndex)
{
    for(i = startIndex; i < numPlayers + startIndex; i++){
        var estimate = get(a + "PlayerEstimate" + i).value;
        if(!isPositiveInteger(estimate)){return(false)}
    }
    return(true);
}

function ClearNonValidEstimates(a, startIndex)
{
   for(i = startIndex; i < startIndex + numPlayers; i++){
        var estimate = get(a + "PlayerEstimate" + i).value;
        if(!isPositiveInteger(estimate)){
            get(a + "PlayerEstimate" + i).value = "";
        }
    }
}

function isPositiveInteger(val)
{
      if(val==null){return false;}
      if (val.length==0){return false;}
      for (var i = 0; i < val.length; i++) {
            var ch = val.charAt(i)
            if (ch < "0" || ch > "9") {
            return false;
            }
      }
      return true;
}

/* Database Javascript Code */
function prepareXmlObject(str, element) {
	if(str.length==0) {
		get(element).innerHTML="";
		return null;
	}
	xmlhttp=GetXmlHttpObject();
    //firebug.watchXHR(xmlhttp);
	if(xmlhttp==null) {
		alert ("Your browser does not support XMLHTTP!");
	}
	return xmlhttp;
}

function GetXmlHttpObject() {
	if (window.XMLHttpRequest) {
		// code for IE7+, Firefox, Chrome, Opera, Safari
		return new XMLHttpRequest();
	}
	if (window.ActiveXObject) {
		// code for IE6, IE5
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	return null;
}

function fieldDisplay(element) {
	if (xmlhttp.readyState==4 && xmlhttp.status==200) {
		get(element).innerHTML=xmlhttp.responseText;
	}
}

function sendInfoToPHP(xmlobj, url, params) {
//	xmlobj.onreadystatechange=fieldDisplay(field);
	xmlobj.open("POST",url,true);
	//Send the proper header information along with the request
	xmlobj.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
//	xmlobj.setRequestHeader("Content-length", params.length);
//	xmlobj.setRequestHeader("Connection", "close");
	xmlobj.send(params);
}

function getQuestionJS(cat)
{
	xmlhttp=prepareXmlObject("hello", "playeridtxt");
	if (xmlhttp==null) {
		return;
	}
//	for the GET method
//	url = url+"?name="+str+"&sid="+4;
//	xmlhttp.onreadystatechange=stateChanged;
//	xmlhttp.open("GET",url,true);
//	xmlhttp.send(null);
//	avtar = avtar.substring(avtar.lastIndexOf("/") + 1);
//	for the POST method
	var params = "level="+cat+"&category=getQuestion";
	xmlhttp.onreadystatechange=displayQuestion;
	sendInfoToPHP(xmlhttp, url, params);
}

function displayQuestion() {
    if(serverReturnedAResponse()) {
        var responseFields = xmlhttp.responseText.split('|');
        vVanObj.prepareNextQuestion(responseFields);
    }
}

function serverReturnedAResponse() {
    return (xmlhttp.readyState==4 && xmlhttp.status==200);
}
