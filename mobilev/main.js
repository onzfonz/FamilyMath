/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */
 
 /*jslint browser: true, devel: true, windows: true */

//	
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//
// CONSTANTS
var BR_POINTS_PER_CAR = 2;
var BR_ANSWERS_BEFORE_SPEED_UP = 3;  // Number of correct answers before the car speeds up
var BR_PERCENTAGE_OF_PRIMES = 0.50;  // Percentage of cars that are primes
var BR_PERCENTAGE_OF_MULTS = 0.60;
var BR_CAR_SPEEDS = new Array(10, 9, 8, 6, 5, 4, 3);  // The starting speed of the cars
var BR_SPEED_THRESH_1 = BR_CAR_SPEEDS[Math.floor(BR_CAR_SPEEDS.length/3)];
var BR_SPEED_THRESH_2 = BR_CAR_SPEEDS[Math.floor(2*BR_CAR_SPEEDS.length/3)];
var BR_MULT_THRESH = 11;
var br_primes = new Array(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59);
var br_nonPrimes = new Array(4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,26,27,28,30,32,33,34,35,36,38,39,40,42,44,45,46,48,49,50,51,52,54,55,56,57,58,60);
var tl_previousGuesses = new Array();
var tl_previousLights = new Array();
var MAX_PLAYERS=4;
var VV_MIN_SECONDS=150;
var VV_MAX_SECONDS=300;
var VV_MVP_BONUS = 10;
var VV_SPIRIT_BONUS = 10;
var ES_START_POINTS = 30;
var ES_MIN_POINTS = 15;
var GMAP_WIDTH = 320;
var GMAP_HEIGHT = 330;
var LEVEL_UP_FACTOR = 50;
var MAX_LEVEL = 8;
var N_HOF_CATS = 4;

var SPRITE_50_OFFSET = 55.8;
var SPRITE_57_OFFSET = 63.3;
var SPRITE_30_OFFSET = 33.5;
var SPRITE_85_OFFSET = 95;
var SPRITE_15_OFFSET = 30;
var SPRITE_LEVEL_OFFSET = 70;

var EstimationAdjectives = new Array("","Black","Blue","Gold","Green","Grey","Orange", "Pink", "Purple","Red","Silver","White","Yellow")
var EstimationNouns =  new Array("Cars", "Clouds", "Gas Stations", "Houses", "Motorcycles","People","Restaurants", "Trees", "Trucks");
var EstimationTimes =  new Array("1 minute", "2 minutes", "3 minutes", "4 minutes", "5 minutes", "6 minutes", "7 minutes", "8 minutes");
var estCurWinner;
var estRandMins;

var NUM_AVT_IMGS = 13;
var AvatarFNames = new Array("avatar_alligator.png", "avatar_bear.png", "avatar_bunny.png", "avatar_cat.png", "avatar_panda.png", "avatar_dragon.png", "avatar_fox.png", "avatar_giraffe.png", "avatar_goat.png", "avatar_lion.png", "avatar_monkey.png", "avatar_umm.png", "avatar_gray.png");
var bgFNames = new Array("estimation_contest.jpg", "estimation_estimate.jpg", "estimation_main.jpg", "estimation_timesup.jpg", "main.jpg", "main_age.jpg", "main_name.jpg", "main_numPlayers.jpg", "main_scores.jpg", "racers_main.jpg", "racers_pass.jpg", "racers_play.jpg", "thereYet_answers.jpg", "thereYet_check.jpg", "thereYet_guesses.jpg", "thereYet_main.jpg", "traffic_nascar_main.jpg", "traffic_gokart_main.jpg", "traffic_gokart_pass.jpg", "traffic_gokart_win.jpg", "traffic_guess.jpg", "traffic_guess_horizontal.jpg", "traffic_nascar_pass.jpg", "traffic_nascar_win.jpg", "traffic_pass.jpg", "traffic_pick.jpg", "victoryvan_answer.jpg", "victoryvan_answerwrong.jpg", "victoryvan_main.jpg", "victoryvan_question.jpg", "victoryvan_timesup.jpg");
var storageFields = new Array("name", "avatar", "score", "mileguess", "minguess", "age");

// Variables
var br_primeCarsPoints = 0;
var br_numCorrectGuesses = 0;
var br_carNumber = 0;
var br_carSpeed = BR_CAR_SPEEDS[0];
var br_carClicked = false;
var br_primeCarsMistakes = 0;
var br_primeCarsDead = false;  // True when a player has 3 strikes in prime cars
var br_timeouts1 = new Array();
var br_timeouts2 = new Array();
var br_teimouts3;

var P  = 0;
var NP = 1; 

var PCproblem; //number
var PCguess; 
var PCanswer;
var PCvalues = new Array("PRIME","NOT PRIME");
var PCmode;
var PCmultiplier;
var PC_PRIME_MODE = 1;
var PC_EVEN_MODE = 2;
var PC_MULT_MODE = 3;


var TLanswer;
var TLeasymode = true;
var TLcurrentguess;
var TLcurrentPlayer = -1; //for traffic lights, set to -1 initially
var TLSCORE=60; // winning score for traffic lights
var TL_LEVEL_FACTOR = 2;
var TL_LOWER_PTS_BOUND = 30;
var TL_JACKPOT_PENALTY = 5;
var TLcurJackpot; //number of points for getting traffic lights
var PCcurrentPlayer = -1; //for traffic lights, set to -1 initially

var fromCity;
var toCity;
var guessArray;

var currentplayerid=0; //first player
var numPlayers=2; //total players input. the default is 2

var adminName;

//KEEP TRACK OF PREVIOUS AND NEXT SCREENS
var beforeback;
var back;
var next;
var afternext;

//KEEP TRACK OF CURRENT VIEW
var currentview;

//USERS
var userfname;
var userlname;

var driversAge;

//AVATARS
var currPlayerToChangeAvatar;
var selectedImage;

//GoogleMap
var gmap;
var xmlhttps;

//CREATING THE PREVIOUS GUESS OBJECT
function TLGuessObject(){
    this.guess = 0;
    this.lights = new Array();
    this.challengelight = '';
    this.avatar = '';
}
var tl_guessHistory;

function PageObject() {
	this.googlemapsworking = true;
	this.loadedinfo = false;
	this.checkinbtnid = "button49";
	this.mainGameid = "mainGameButton";
	this.mainGameLbl = "mainGameLabel";
	this.hascheckins = false;
	
	var that = this;
	
	this.mapsNotWorking = function() {
		that.googlemapsworking = false;
		rWeThereYet(false);
	}
	
	this.mapsWorking = function() {
		that.googlemapsworking = true;
		rWeThereYet(true);
	}
	
	this.allowCheckins = function() {
		if(that.googlemapsworking) {
			that.setCheckinState(localStorage.startLatLng != null && localStorage.startLatLng != undefined);
		}else{
			that.setCheckinState(false);
		}
	}
	
	this.setCheckinState = function(shouldEnable) {
		if(shouldEnable) {
			$('#'+that.checkinbtnid).show();
		}else{
			$('#'+that.checkinbtnid).hide();
		}
	}
	
	function rWeThereYet(shouldEnable) {
		if(shouldEnable) {
			$('#'+that.mainGameLbl).show();
			$('#'+that.mainGameid).show();
		}else{
			$('#'+that.mainGameLbl).hide();
			$('#'+that.mainGameid).hide();			
		}
	}
}
var pageObj = new PageObject();

//CREATING THE PLAYERS OBJECT
function playerObject(){
    this.name      = ''; //playername
    this.score     = 0;  //playerscore
    this.avatar    = ''; //playeravatar
    this.admin     = 0;  //is the player an admin
    this.isplaying = 0;  //is the player playing this game
    this.mainguessmiles = -1;  //this is the player's estimation for the main game
    this.mainguessminutes = -1; //this is the player's estimation (in minutes) for the main game
    this.age = 0; //player's age
    this.vvCorrect = 0; //number of questions answered correctly
    this.vvTotal = 0; //total number of questions asked
    
    var that = this;
    var index = 0;
    
    this.setIndex = function(ind) {
        that.index = ind;
    }
    
    this.getIndex = function() {
        return that.index;
    }
    
    this.getName = function() {
    	return that.name;
    }
    
    this.addToScore = function(addedPoints) {
        that.score += Number(addedPoints);
        localStorage['player'+that.getIndex()+'score'] = that.score;
        add2ScoreInDBJS(that.name, addedPoints);
    }
  
    this.getScore = function () {
        return that.score;
    }
    
    this.getMilesGuess = function() {
        return that.mainguessmiles;
    }
    
    this.setMilesGuess = function(guess) {
        that.mainguessmiles = guess;
    }
    
    this.getTimeGuess = function() {
        return that.mainguessminutes;
    }
    
    this.getTimeGuessHours = function() {
        return Math.floor(that.mainguessminutes/60);
    }
    
    this.getTimeGuessMinsLeft = function() {
        var hours = that.getTimeGuessHours();
        var minutesTaken = hours*60;
        return that.getTimeGuess()-minutesTaken;
    }
    
    this.setTimeGuess = function(guess) {
        that.mainguessminutes = guess;
        addGuessToDBJS(that.name, guess, "maintime");
    }
    
    this.setTimeGuess = function(hours, mins) {
        that.mainguessminutes = Number(hours) * 60 + Number(mins);
    }
    
    this.getAge = function() {
        return that.age;
    }
    
    this.setAge = function(years) {
        that.age = years;
    }
    
    this.vvCorrectAnswer = function() {
        that.vvCorrect++;
        that.vvTotal++;
    }
    
    this.vvIncorrectAnswer = function() {
        that.vvTotal++;
    }
	
	this.vvNumCorrect = function() {
		return that.vvCorrect;
	}
	
	this.vvNumTotal = function() {
		return that.vvTotal;
	}
    
    this.vvReset = function() {
        that.vvCorrect = 0;
        that.vvTotal = 0;
    }
}
var playerlist;

//CREATING AN OBJECT TO HOLD THE ANSWERS FOR THE PRIME CARS GAME
function pcAnswersObject(){
  this.answers = new Array();
  this.scores  = new Array();
}

function VictoryVanQuestionObject() {
    this.questionid;
    this.question;
    this.answer;
    this.possibleAnswers = new Array();
    this.level;
    this.textFields = ["vvQAnswerText", "vvQAnswerLabel"];
    this.answeredCorrectly;
    
    var that = this;
    this.initialize = function(q, a, ops, l) {
        that.question = q;
        that.answer = a;
        that.possibleAnswers = ops;
        that.level = l;
        that.answeredCorrectly = undefined;
    }
    
    this.initFromDB = function(arr) {
    	that.questionid = arr[0];
    	that.question = arr[1];
    	that.answer = arr[6];
    	that.level = arr[7];
    	pAnswers = createOptions([arr[2], arr[3], arr[4], arr[5]]);
    	that.possibleAnswers = pAnswers;
    }
    
    function createOptions(optsArr) {
    	var newArr = new Array();
    	for(var i = 0; i < optsArr.length; i++) {
    		if(optsArr[i] != "") {
    			newArr.push(optsArr[i]);
    		}
    	}
 		newArr.splice(randomNumber(newArr.length+1), 0, that.answer);
 		if(newArr.length == 1) {
    		return null;
    	}else{
    		return newArr;
    	}
    }
    
    this.isMC = function() {
        return that.possibleAnswers != null && that.possibleAnswers.length > 0;
    }
    
    this.checkAnswer = function() {
        var userResponse = that.getGuess();
        if(that.isMC()) {
            var radarray = buildRadioArray("vvqradio");
            var namesarray = buildRadioArray("vvqradiodiv");
            userResponse = getCheckedName(radarray, namesarray);
        }
        changeLabelText("vvPassLastProblem", "The last problem was: " + that.question);
        changeLabelText("vvPassYourAnswer", "Your Answer: " + userResponse);
        changeLabelText("vvPassCorrectAnswer", "Correct Answer: " + that.answer);
        var rightwrongtext = "D'oh!";
        that.answeredCorrectly = false;
        if(userResponse == that.answer || (!that.isMC() && !isNaN(that.answer) && (Number(userResponse) === Number(that.answer)))) {
            rightwrongtext = "Correct!";
            that.answeredCorrectly = true;
        }
        changeLabelText("vvPassTitle", rightwrongtext);
        return that.answeredCorrectly;
    }
    
    this.getAnswer = function() {
    	return that.answer;
    }
    
    this.getQuestion = function() {
    	return that.question;
    }
    
    this.getQuestionID = function() {
    	return that.questionid;
    }
    
    this.getGuess = function() {
    	return get("vvQAnswerText").value;
    }
    
    function buildRadioArray(names) {
        var radioArr = new Array();
        for(var i = 0; i < that.possibleAnswers.length; i++) {
            var suffix = i;
            if(i == 0) {
                suffix = "";
            }
            radioArr.push(get(names+suffix));
        }
        return radioArr;
    }
    
    // return the value of the radio button that is checked
    // return an empty string if none are checked, or
    // there are no radio buttons
    function getCheckedName(radioObj, radioNames) {
        if(!radioObj) {
            return "";
        }
        var radioLength = radioObj.length;
        if(radioLength == undefined) {
            if(radioObj.checked) {
                return radioObj.innerHTML;
            } else {
                return "";
            }
        }
        for(var i = 0; i < radioLength; i++) {
            if(radioObj[i].checked) {
                return radioNames[i].innerHTML;
            }
        }
        return "";
    }

    
    this.showMCOptions = function() {
        if(that.isMC()) {
            //must be a multiple choice Answer
            multipleChoiceOptions("vvQuestionRadio", 5, that.possibleAnswers);
            hideShowTextFields(that.textFields, "hidden");
        }else{
            multipleChoiceOptions("vvQuestionRadio", 5, that.possibleAnswers);
            hideShowTextFields(that.textFields, "visible");
            get("vvQAnswerText").value = "";
        }
    }
    
    function multipleChoiceOptions(opts, numOptions, optsText) {
        var startNum = 0;
        if(optsText != null) {
            startNum = optsText.length;
        }
        hideShowMultipleChoiceOptions(opts, startNum, 0, "visible");
        hideShowMultipleChoiceOptions(opts, numOptions, startNum, "hidden");
    }
    
    function hideShowMultipleChoiceOptions(opts, numOptions, startNum, visible) {
//        opts = "vvQuestionRadio"
//        numOptions = 4;
        var optsTextID = "vvqradiodiv";
        var optsID = "vvqradio";
        for(var i = startNum; i < numOptions; i++) {
            var suffix = i;
            if(i == 0) {
                suffix = "";
            }
            get(opts+suffix).style.visibility = visible;
            if(visible == "visible") {
                get(optsTextID+suffix).innerHTML = that.possibleAnswers[i];
                get(optsID+suffix).checked = false;
            }
        }
    }
    
    function hideShowTextFields(fields, visprop) {
        for(var i = 0; i < fields.length; i++) {
            get(fields[i]).style.visibility = visprop;
        }
    }
}

function randomNumber(high) {
	return Math.floor(Math.random()*high);
}

function VictoryVanObject() {
    this.secondsLeft;
    this.curPlayer;
    this.curTimer;
    this.minIDs;
    this.secsIDs;
    this.curQuestion;
    this.questionsGiven;
    this.answeredCorrectlyThisRound;
    this.timeSpentOnProblem;
    this.secondsLeftWhenStartedProblem;
    this.onAProblem;
    
    var vvPassElems = [/*"vvPassRightWrong", */"vvPassLastProblem", "vvPassYourAnswer", "vvPassCorrectAnswer"];
    var that = this;
    
    this.initialize = function(secs, mIDs, sIDs) {
        that.curPlayer = -1;
        that.onAProblem = false;
        that.minIDs = new Array();
        that.secsIDs = new Array();
        for(var i = 0; i < mIDs.length; i++) {
            that.minIDs.push(mIDs[i]);
            that.secsIDs.push(sIDs[i]);
        }
        that.setSeconds(secs);
        hidevvPassElems(true);
        that.questionsGiven = new Array();
        that.curTimer = setInterval("vVanObj.subtractSecond()", 1000);
        that.answeredCorrectlyThisRound = initVVRoundTracking();
        that.timeSpentOnProblem = initVVRoundTracking();
    }
    
    this.continueTimer = function() {
    	that.onAProblem = true;
    }
	
	this.clearTimer = function() {
		clearInterval(that.curTimer);
	}
    
    this.pauseTimer = function() {
    	that.onAProblem = false;
    }
    
    function initVVRoundTracking() {
    	var arr = new Array();
    	for(var i = 0; i < numPlayers; i++) {
    		arr.push(0);
    	}
    	return arr;
    }
    
    this.subtractSecond = function() {
        if(that.secondsLeft <= 0) {
            clearInterval(that.curTimer);
            prepareFinishedPage();
            switchTo("vvGameFinished");
        }else if(that.onAProblem) {
            that.setSeconds(that.secondsLeft-1);
        }
    }
    
    function prepareFinishedPage() {
    	var mvpIndex = pickLargest(that.answeredCorrectlyThisRound, -1);
    	var spiritIndex = pickLargest(that.timeSpentOnProblem, mvpIndex);
    	var vvPoints = numCorrectAnswers() * 10;
    	changeMVPAndSpirit(mvpIndex, spiritIndex);
    	changeLabelText("vvFinishNumCorrect", "You answered " + numCorrectAnswers() + " out of " + that.questionsGiven.length + " questions correctly," + " giving you " + vvPoints + " points!  Woohoo!");
    	changeLabelText("vvFinishMessage", "Times up! Let's see how you did!");
    	for(var i = 0; i < numPlayers; i++) {
    		playerlist[i].addToScore(vvPoints);
    	}
    }
    
    function changeMVPAndSpirit(mIndex, sIndex) {
    	changeLabelText("vvFinishMVPName", playerlist[mIndex].getName());
    	changeAvatarSpriteImage(playerlist[mIndex].avatar, SPRITE_57_OFFSET, "vvFinishMVP");
    	playerlist[mIndex].addToScore(VV_MVP_BONUS);
    	changeLabelText("vvFinishSpiritName", playerlist[sIndex].getName());
    	changeAvatarSpriteImage(playerlist[sIndex].avatar, SPRITE_57_OFFSET, "vvFinishSpirit");
    	playerlist[sIndex].addToScore(VV_SPIRIT_BONUS);
    }
    
    function pickLargest(arr, indexExcluded) {
    	var startIndex = 0;
    	if(indexExcluded == 0) {
    		startIndex = 1;
    	}
    	var maxAnswered = arr[startIndex];
    	var mvpIndex = startIndex;
    	for(var i = 1; i < numPlayers; i++) {
    		if(i != indexExcluded) {
    			var numAnswered = arr[i];
    			if(numAnswered > maxAnswered) {
    				mvpIndex = i;
    				maxAnswered = numAnswered;
    			}else if(numAnswered == maxAnswered) {
    				if(Math.random() < .5) {
    					mvpIndex = i;
    				}
        		}
        	}
        }
        return mvpIndex;
    }
    
	function numCorrectAnswers() {
		var numCorrect = 0;
		for(index in that.questionsGiven) {
			var curQuestion = (that.questionsGiven)[index];
			if(curQuestion.answeredCorrectly) {
				numCorrect++;
			}
		}
		return numCorrect;
	}
	
    this.setSeconds = function(secs) {
        that.secondsLeft = secs;
        var minutes = Math.floor(secs / 60);
        var seconds = secs % 60;
        if(seconds < 10) seconds = "0"+seconds;
        for(var i = 0; i < that.minIDs.length; i++) {
            get(that.minIDs[i]).innerText = minutes;
            get(that.secsIDs[i]).innerText = seconds;
        }
    }
    
    this.setNextPlayer = function() {
        that.curPlayer = (that.curPlayer+1) % numPlayers;
        changeLabelText("vvPassPlayerName", playerlist[that.curPlayer].getName());
        get("vvPassStatsCorrect").innerHTML = playerlist[that.curPlayer].getName() + " has " + playerlist[that.curPlayer].vvNumCorrect() + " out of " + playerlist[that.curPlayer].vvNumTotal() + " q's for " + playerlist[that.curPlayer].getScore() + " points!";
		//get("vvPassStatsPoints").innerHTML = "You have " + playerlist[that.curPlayer].getScore() + " points.";
		setAvatar("vvnextAvatar", that.curPlayer);
    }
    
    function hidevvPassElems(shouldHide) {
        var vis = 'visible';
        if(shouldHide) {
            vis = 'hidden';
        }
        for(var i = 0; i < vvPassElems.length; i++) {
            get(vvPassElems[i]).style.visibility = vis;
        }
    }
    
    function determineLevel() {
        var cp = that.curPlayer;
        var numRight = that.answeredCorrectlyThisRound[cp];
        var threshold = 4;
        if(numRight > 2*threshold) {
            return 5;
        }else if(numRight > threshold) {
            return 3;
        }
    	//that.curPlayer.age and number answered right and wrong
        return 1;
    }

    function getAgeLevel() {
	 age = that.curPlayer.age;
	if(age < 10) {
	    return 1;
	}else if(age < 13) {
	    return 3;
	}else{
	    return 5;
	}
    }
    
    this.retrieveNextQuestion = function() {
    	var l = determineLevel();
    	getQuestionJS(l);
    }
    
    this.prepareNextQuestion = function(data) {
        that.curQuestion = createQuestionFromData(data);
        that.questionsGiven.push(that.curQuestion);
        var q = that.curQuestion;
        changeLabelText("vvQQuestion", "" + q.question);  //Question:
        q.showMCOptions();
        that.continueTimer();
        switchTo('vvQuestionTemplate');
        that.secondsLeftWhenStartedProblem = that.secondsLeft;
    }
    
    this.checkAnswer = function() {
    	var cq = that.curQuestion;
    	var cp = that.curPlayer;
        var wasRight = cq.checkAnswer();
        if(wasRight) {
        	(that.answeredCorrectlyThisRound[cp])++;
        	playerlist[cp].vvCorrectAnswer();
        }else{
        	playerlist[cp].vvIncorrectAnswer();
        }
        that.timeSpentOnProblem[cp] += parseInt(that.secondsLeftWhenStartedProblem - that.secondsLeft);
        addGuessJS(playerlist[cp].getName(), cq.getQuestionID() + "-" + cq.getQuestion(), cq.getGuess(), cq.getAnswer());
                //name, problem, guess, answer
		that.pauseTimer();
    }
    
    function createQuestionFromData(data) {
		var q = new VictoryVanQuestionObject();
		q.initFromDB(data);
		return q;
	}
        
}
var vVanObj;

var PTproblem; //number
var PTguess;

var geocoder, location1, location2, gDir;
var distanceMiles;

var inputNum = new Array(0,0,0);

var estimateCount = 0; //Keeps track of the count during estimationStation
var secretMode = true;
var estimateTimer;
var estimateTimerMin;
var estimateTimerSec;

//Creating an object to hold player estimates for EstimationStation
function estimateObj(){
  this.estimate = "";
  this.difference  = "";
  this.playerNumber = 0;
}
var estimatesObj;

//Creating an array to hold if matchup between adjectives and nouns makes sense
var appropriateAdj = new Array();

// Macros
var RED = 100;
var YELLOW = 10;
var GREEN = 1;

//DATABASE VARIABLES
var xmlhttp;
var userid;
var url="gortbackendlite.php";
var currentsid;

var games = new Array("PRIMECARS","TRAFFICLIGHTS","	TOP", "ESTIMATIONSTATION");
var navObj;

$(document).ready(function(){
   load();
 });
 
window.onbeforeunload = function() {
	endSessionJS();
	if(navObj && navObj.inAGame) {
	//if(true) {	
		return "Pressing back will cause you to exit the game";
	}
}
 
window.onunload = function() {
	endSessionJS();
	return false;
}

function load()
{
    dashcode.setupParts();
    //geocoder = new google.maps.Geocoder();
    //alert("passedsetupparts");
    setTimeout(function() { window.scrollTo(0, 1) }, 100);
    //SETUP THE PLAYER LIST
    playerlist = new Array();
    for(var j=0; j < MAX_PLAYERS; j++){
      playerlist[j] = new playerObject();
    }
    xmlhttps = new Array();
    
    //alert("setting up estimation");
    estimatesObj = new Array();
    for(var i=0; i < MAX_PLAYERS; i++){
      estimatesObj[i] = new estimateObj();
    }
    
    setupAppropriateAdj(null);
    window.scrollTo(0, 1);
    //alert("finished load");
    startGame(null);
}

function exitHallOfFame(event) {
	$("#hallheader").show();
	gotoGames(event);
}

function gotoGames(event) {
	hideScores(event);
	addNavActionJS("main menu", "back");
    switchTo('gameSelect');
//	var views = document.getElementById('stackLayout');
//		var about = document.getElementById('gameSelect');
//		changeBgSpriteImage('gameSelect');
//		if (views && views.object && about) {
//			views.object.setCurrentView(about);
//		}
}

function br_makeCar() {
    br_carNumber = br_generateNumber(PCmode);
	changeCarSpriteImage(55, "br_Car");
    br_carNumberText.innerText = br_carNumber;
    PCproblem = br_carNumber;

    br_frames = 360;
    for(i = 1 ; i < br_frames ; i += 3){
        br_timeouts1[i] = setTimeout("document.getElementById('br_Car').style.left = '"+(i*-1)+"px';",i*br_carSpeed);
        br_timeouts2[i] = setTimeout("document.getElementById('br_carNumberText').style.left = '"+(i*-1)+"px';",i*br_carSpeed);
    }
    br_timeouts3 = setTimeout("br_carAtEnd();",br_frames*br_carSpeed);
}

function br_generateNumber(gameMode) {
    var generateAPrime = Math.random() < BR_PERCENTAGE_OF_PRIMES;
    var generateAMultiple = Math.random() < BR_PERCENTAGE_OF_MULTS;
    var numbergened = -1;
    if(gameMode == PC_PRIME_MODE) {
        if (generateAPrime) {
            numbergened = br_primes[Math.floor(Math.random()*br_primes.length)];
        } else {
            numbergened = br_nonPrimes[Math.floor(Math.random()*br_nonPrimes.length)];
        }
    }else if(gameMode == PC_EVEN_MODE) {
        numbergened = Math.floor(Math.random()*100);
    }else{
        if(generateAMultiple) {
            while(numbergened >= 100 || numbergened < 0) {
                numbergened = PCmultiplier * randomNum(0, 12);
            }
        }else{
            while(numbergened == -1 || numbergened % PCmultiplier == 0) {
                numbergened = randomNum(0, 100);
            }
        }
    }
    return numbergened;
}

function randomNum(low, high) {
    return Math.floor(Math.random()*(Math.abs(high-low)))+Math.min(low, high)
}
 
// Function to determine whether number is prime, even or a multiple
function br_isPrime(num) 
{
    // 1 is not prime
    if(PCmode == PC_PRIME_MODE) {
        for(var i = 0; i < br_primes.length; i++) {
            if(br_primes[i] == num) {
                return true;
            }
        }
    }else if(PCmode == PC_EVEN_MODE) {
        return (num%2 == 0);
    }else{
        return (num%PCmultiplier == 0);
    }
    return false;
}

function pause(millis)
{
var date = new Date();
var curDate = null;

do { curDate = new Date(); }
while(curDate-date < millis);
}


// Do something when a player makes a mistake
function br_carMistake() {
    br_primeCarsMistakes++;
    br_carClicked = true;

    if (br_primeCarsMistakes == 3) {
        br_mistakesText.innerText = "X X X";
        br_primeCarsDead = true;
        pause(100);
        
        //overall scores
        playerlist[PCcurrentPlayer].addToScore(br_primeCarsPoints);

        
        PCpass();
    } else if (br_primeCarsMistakes == 2) {
        br_mistakesText.innerText = "X X  ";
    } else if (br_primeCarsMistakes == 1) {
        br_mistakesText.innerText = "X    ";
    } else {
        br_mistakesText.innerText = "";
    }

}

// When the car is at the end of the line
function br_carAtEnd() {

    if (Math.floor (br_numCorrectGuesses / BR_ANSWERS_BEFORE_SPEED_UP) < BR_CAR_SPEEDS.length) {
        br_carSpeed = BR_CAR_SPEEDS[Math.min(BR_CAR_SPEEDS.length, Math.floor(br_numCorrectGuesses / BR_ANSWERS_BEFORE_SPEED_UP))];
    }
    if (br_carClicked == false) {
        br_carMistake();
    }
    
    br_carClicked = false;

    // Only make a new car if the player is not dead
    if (br_primeCarsDead == false) {
        br_makeCar();
    }
}

function br_primeClickHandler(event)
{
    br_figureOutClick(event, true, P, NP);
}

function br_figureOutClick(event, isPrime, index, mistakeIndex) {
	var bonus = 0;
	var multvalue = Number(get("PCmultValue").value);
	if (br_carSpeed < BR_SPEED_THRESH_2) {
		bonus = 2;
	}else if(br_carSpeed < BR_SPEED_THRESH_1) {
		bonus = 1;
	}
	if (multvalue >= BR_MULT_THRESH) {
		bonus++;
	}
	PCguess = PCvalues[index];
    if (br_carClicked) {
        return;
    }
    if ((br_isPrime(br_carNumber) && isPrime) || (!br_isPrime(br_carNumber) && !isPrime)) {
        PCanswer = PCvalues[index];
        br_primeCarsPoints += BR_POINTS_PER_CAR + bonus;
        br_numCorrectGuesses++;
		br_carClicked = true;
    } else {
        PCanswer = PCvalues[mistakeIndex];
        br_carMistake();
    }
	
	//Add Guess To Database
    addGuessJS(playerlist[PCcurrentPlayer+1].getName(),PCproblem,PCguess,PCanswer);
    br_pointsText.innerText = br_primeCarsPoints + " points!";
}


function br_nonPrimeClickHandler(event)
{   
    br_figureOutClick(event, false, NP, P);
}

function startGame(event)
{
    //userSelection(event);
    setTimeout("decideIfContinuing(event)", 1500);
}

function showMap(position) {
    codeLatLng(position.coords.latitude, position.coords.longitude);
}


function backToHome(event) {
    switchTo('gameSelect');
}

function gotoScores(event){
    displayScores();
    addNavActionJS("scores", "");
	switchTo('scores');
}


function calculateDistances(event)
{
    switchTo('distances');
        
    var startVal = document.getElementById("startCity");	// replace with ID of text field
    startVal = startVal.value;
    
    var endVal = document.getElementById("endCity");	// replace with ID of text field
    endVal = endVal.value;
    
    fromCity = startVal 
    toCity = endVal;
    document.getElementById("fromTo").innerText = fromCity + " and " + toCity;
}

/*
function addUsertoDatabase(){

  addUserJS(userfname,userlname);
  setTimeout("createSessionJS()",1000);
}
*/

function logintoDatabase(){
  loginJS(userfname,userlname);
}

function userSelection(event)
{
    switchTo('users');
}

function playerSelection(event) {
    userfname = document.getElementById('firstname').value;
    userlname = document.getElementById('lastname').value;
    setLongCookie("userfname", userfname);
    setLongCookie("userlname", userlname);
    
    localStorage.gameStartTime = new Date();
    logintoDatabase();
    document.getElementById('name1').value = userfname;
	randomlyChangePlayerAvatars();
	for(var i = numPlayers; i < MAX_PLAYERS; i++) {
		get("avatar"+(i+1)).style.visibility = 'hidden';
	}
	addNavActionJS("players", "");
	switchTo('players');
}

function randomlyChangePlayerAvatars() {
	var num = Math.floor(Math.random()*NUM_AVT_IMGS);
	for(var i = 0; i < MAX_PLAYERS; i++) {
		changeAvatarSpriteImage(AvatarFNames[(num+i)%NUM_AVT_IMGS], SPRITE_50_OFFSET, 'avatar' + (i+1));
		if(i > 0) {
			get('name' + (i+1)).value = "P"+(i+1);
		}
	}
	
}

function loadPlayerSelection(event) {
	playerSelection(event);
	get('popup').value = numPlayers;
	selectPlayers(event);
	for(var i = 0; i < numPlayers; i++) {
		get('name'+(i+1)).value = playerlist[i].name;
		changeAvatarSpriteImage(playerlist[i].avatar, SPRITE_50_OFFSET, 'avatar'+(i+1));
	}
}

function selectPlayers(event)
{
    numPlayers = Number(document.getElementById('popup').value);

    for(var i = 2; i <= 4; i++) {
        showPlayerInSelect(i, i <= numPlayers);
    }
}

function showPlayerInSelect(num, shouldShow) {
    var visibleTag = convertToVisibleTag(shouldShow);
    get('name'+num).style.visibility = visibleTag;
    get('avatar'+num).style.visibility = visibleTag;
}

function convertToVisibleTag(shouldShow) {
    if(shouldShow) {
        return 'visible';
    }
    return 'hidden';
}


var callno = 1;

function moveToInternalHomepage(event) {
	storePlayerInfo(event);
    internalHomepage(event);
}

function storeAndAskAges(event) {
	storePlayerInfo(event);
	checkIfAgesNeeded(event);
}

function internalHomepage(event)
{        
    savePlayerInfo();
    // Populate Estimation Station Adjective List
    for (var i = 0; i < EstimationAdjectives.length; i++){      
        adjectivepopup.options[i].text = EstimationAdjectives[i];
        adjectivepopup.options[i].value = EstimationAdjectives[i];
    }

    // Populate Estimation Station Noun List
    for (var i = 0; i < EstimationNouns.length; i++){      
        nounpopup.options[i].text = EstimationNouns[i];
        nounpopup.options[i].value = EstimationNouns[i];
    }

    // Populate Estimation Station EstimationTimes List
    for (var i = 0; i < EstimationTimes.length; i++){      
        estimatetimepopup.options[i].text = EstimationTimes[i];
        estimatetimepopup.options[i].value = EstimationTimes[i];
    }
	addNavActionJS("main menu", "");
    switchTo('gameSelect');
}

function savePlayerInfo() {
	clearPlayerListFromLocalStorage();
	localStorage.numPlayers = numPlayers;
	for(var i = 0; i < numPlayers; i++) {
		addPlayerInfoToLocalStorage(i);
	}
	if((isDefined(driversAge))) {
		localStorage.driversAge = driversAge;
	}
}

function moveToMainGuess(event) {
    //function setEstimateAvatars(event, a, btnnamesarray, startIndex) {
    var buttonnames = new Array("button2", "button39", "button40", "button41");
    setEstimateAvatarsFull(event, "", buttonnames, 5);
    switchTo('distances');
}

function switchToMainHoursGuess(event) {
    var buttonnames = new Array("button44", "button45", "button46", "button47");
    setEstimateAvatarsFull(event, "", buttonnames, 13);
    var hournames = new Array("PlayerEstimate9", "PlayerEstimate10", "PlayerEstimate11", "PlayerEstimate12");
    var hourscaps = new Array("HoursCap1", "HoursCap2", "HoursCap3", "HoursCap4");
    var minscaps = new Array("MinsCap1", "MinsCap2", "MinsCap3", "MinsCap4");
    setAdditionalParamtersFull(event, hournames, hourscaps, minscaps);
    get('mainHoursText').innerText = "The distance is " + gmap.getMainDistance() + " miles. \nTime to arrive? ____ hrs, ____ mins";
    switchTo('mainHours');
}    
    
function storePlayerInfo(event) {
    //GET ALL THE PLAYER INFO BEFORE GOING TO THE INTERNAL GAMES HOMEPAGE
    //ALSO LOAD THE PLAYER SELECTION POPUP FOR TRAFFIC LIGHTS
    for (var i = 0; i < numPlayers; i++){
        playerlist[i].name   = document.getElementById('name' + (i+1)).value;
		var topCss = Math.abs(parseInt($('#avatar'+(i+1)+'img').css("top")));
        playerlist[i].avatar = AvatarFNames[(Math.round(topCss/SPRITE_50_OFFSET))];
        playerlist[i].setIndex(i);
        storePlayerPopupInfo(i);
        if(isDefined(playerlist[i].age) && playerlist[i].age > 0) {
        	setTextInput("vvPlayerEstimate"+(i+1), playerlist[i].age);
        }
        //SEND PLAYER NAME TO DATABASE
        //alert('session id before addPlayerJS is ' + currentsid);
        if(i==0 && userfname == playerlist[i].getName()) {
	    	updatePlayerAvatarJS(playerlist[i].getName(), playerlist[i].avatar);
        }else{
	    	addPlayerJS(playerlist[i].getName(), playerlist[i].avatar);
		}
    }
    localStorage.numPlayers = numPlayers;
}

function storePlayerPopupInfo(i) {
	var n = playerlist[i].name;
	$("#vgPlayerPopup").append("<option value="+n+">"+n+"</option>");
}

function clearPlayerListFromLocalStorage() {
    for (var i = 0; i < MAX_PLAYERS; i++) {
        localStorage.removeItem('player'+i+'name');
        localStorage.removeItem('player'+i+'score');
        localStorage.removeItem('player'+i+'avatar');
        localStorage.removeItem('player'+i+'mileguess');
        localStorage.removeItem('player'+i+'minguess');
        localStorage.removeItem('player'+i+'age');
    }
    localStorage.numPlayers = 0;
}

function addPlayerInfoToLocalStorage(index) {
    localStorage['player'+index+'name'] = playerlist[index].getName();
    localStorage['player'+index+'avatar'] = playerlist[index].avatar;
    localStorage['player'+index+'score'] = playerlist[index].score;
    localStorage['player'+index+'mileguess'] = playerlist[index].mainguessmiles;
    localStorage['player'+index+'minguess'] = playerlist[index].mainguessminutes;
    localStorage['player'+index+'age'] = playerlist[index].age;
}

function retrievePlayerFromLocalStorage(index) {
    playerlist[index].name = localStorage['player'+index+'name'];
    playerlist[index].avatar = localStorage['player'+index+'avatar'];
    playerlist[index].score = Number(localStorage['player'+index+'score']);
    playerlist[index].age = Number(localStorage['player'+index+'age']);
    playerlist[index].mainguessmiles = Number(localStorage['player'+index+'mileguess']);
    playerlist[index].mainguessminutes = Number(localStorage['player'+index+'minguess']);
    storePlayerPopupInfo(index);
}

function getCurrentPlayerName(){
  return players[currentplayerid].getName();
}

function getCurrentPlayerAvatar(){
  return players[currentplayerid].avatar;
}

function TLpass() {
    if (TLcurrentPlayer < numPlayers-1) {
        var nextName = playerlist[TLcurrentPlayer+1].getName();
        if (nextName == adminName) {
            TLcurrentPlayer++;
            TLpass();
            return;
        }
        // Pass to next player
        playerlist[TLcurrentPlayer+1].isplaying=1;
        document.getElementById('TLnextName').innerText =nextName;
        changeAvatarSpriteImage(playerlist[TLcurrentPlayer+1].avatar, SPRITE_57_OFFSET, 'TLnextAvatar');
		//document.getElementById('TLnextAvatar').src = playerlist[TLcurrentPlayer+1].avatar;
        TLcurrentPlayer++;
        switchToTL('TLpassScreen');
    } else {
        TLcurrentPlayer = -1;
        TLpass();
    }
}

function switchToTL(a) {
	var elemA = document.getElementById(a);
    var view = document.getElementById('stackLayout');
    var tl = document.getElementById('trafficLights');
    var sl2= document.getElementById('tl');
    sl2.object.setCurrentView(elemA);
    view.object.setCurrentView(tl);
	changeBgSprite(a);
}

function startTrafficLights(event) {
    var fields = new Array("vgPlayerPopup", "text34", "text9", "inputField", "forwardButton6");
    switchToTL('tlHome');
	addNavActionJS("traffic lights", "");
	var isHard = get('TLhardmode').checked;
	if (!isHard) {
		changeTLmodeToEasy(event);
	}
	for(var i = 0; i < fields.length; i++) {
		if(numPlayers < 2) {
			$("#"+fields[i]).hide();
		}else{
			$("#"+fields[i]).show();
		}
	}
}

function startPrimeCars(event) {
    addNavActionJS("Number racers", "");
    switchTo('PChome');
}

function VPgenerateRandomNumber(event) {
    var num1 = Math.floor(Math.random()*10);
    var num2 = Math.floor(Math.random()*10);
    var num3 = Math.floor(Math.random()*10);
    TLSubmitSecretNumber(num1, num2, num3, false);
    TLpass();
}

function TLSubmitSecretNumber(num1, num2, num3, isAdmin) {
    var errorText = document.getElementById("errorText");
    
    inputNum = new Array(num1, num2, num3);
    tl_guessHistory = new Array();
    clearHistory();
    errorText.innerText = "";
    if(TLeasymode) {
		TLcurJackpot = Math.floor(TLSCORE / TL_LEVEL_FACTOR);		
	}else{
		TLcurJackpot = TLSCORE;
	}
    TLanswer = (num1*100)+(num2*10)+num3;
    if(isAdmin) {
        adminName = document.getElementById('vgPlayerPopup').value;
        addNavActionJS("decide number", "chosen");
    }else{
        adminName = "";
        addNavActionJS("decide number", "random");
    }
}

function validateInputButton(event)
{
    var inputFieldValue = document.getElementById("inputField");
    var errorText = document.getElementById("errorText");
    
    if (isNaN(inputFieldValue.value) || inputFieldValue.value.length != 3) {
        errorText.innerText = "Incorrect number input. Please enter a 3 digit number.";
    } else if (document.getElementById('vgPlayerPopup').value == "") {
        errorText.innerText = "Please select the player who is picking a number.";
    }else{
        // Code to set the input numbers.  Kind of ugly but it works!
        inputNum = inputFieldValue.value * 1;
        var num1 = (inputNum - inputNum % 100) / 100;
        var num2 = ((inputNum - inputNum % 10) % 100) / 10;
        var num3 = inputNum % 10;
        TLSubmitSecretNumber(num1, num2, num3, true);
        TLpass();
    }
    
}

function tlGuess(event)
{
    tlFigureOutNav();
    switchToTL('inputNumber');
}

function tlFigureOutNav() {
	if(TLeasymode) {
		addNavActionJS("level", "beginner");
	}else{
		addNavActionJS("level", "advanced")
	}
}


function VPclearTextField(event)
{
    if (event.srcElement = document.getElementById('name1') && document.getElementById('name1').value == "Player 1") {
        document.getElementById('name1').value = "";
    }
    
    else if (event.srcElement = document.getElementById('name2') && document.getElementById('name2').value == "Player 2") {
        document.getElementById('name2').value = "";
    }
    
    else if (event.srcElement = document.getElementById('name3') && document.getElementById('name3').value == "Player 3") {
        document.getElementById('name3').value = "";
    }
    
    else if (event.srcElement = document.getElementById('name4') && document.getElementById('name4').value == "Player 4") {
        document.getElementById('name4').value = "";
    }
}

function changeTLmode(event)
{
    TLeasymode = (document.getElementById('TLeasymode').checked);
    setTLMode(TLeasymode);
}

function changeTLmodeToHard(event)
{
    document.getElementById('TLeasymode').checked = false;
    document.getElementById('TLhardmode').checked = true;
    changeTLmode(event);
}

function changeTLmodeToEasy(event)
{
    document.getElementById('TLeasymode').checked = true;
    document.getElementById('TLhardmode').checked = false;
    changeTLmode(event);
}

function changePCmodeToPrime(event)
{
    document.getElementById('PCrad1').checked = true;
}

function changePCmodeToEven(event)
{
    document.getElementById('PCrad2').checked = true;
}

function changePCmodeToMultiple(event)
{
    document.getElementById('PCrad3').checked = true;
}

function setPCRadiosToFalse(event)
{
    for(var i = 1; i <= 3; i++) {
        document.getElementById("PCrad"+i).checked = false;
    }
}
    

function setTLMode(easy) {
    if(easy) {
        var Evisibility = 'visible';
        var Hvisibility = 'hidden';
    }else{
        var Evisibility = 'hidden';
        var Hvisibility = 'visible';
    }
	changeBgTlSpriteImage("tlHome", easy);
    for(var i = 0; i < 3; i++) {
        document.getElementById('indicator'+(3+i)).style.visibility = Evisibility;
        document.getElementById('text'+(26+i)).style.visibility = Evisibility;
    }
    document.getElementById('text6').style.visibility = Evisibility;
    document.getElementById('challengemodetext1').style.visibility = Hvisibility;
	document.getElementById('challengemodetext2').style.visibility = Hvisibility;
    document.getElementById('challengemodeimage').style.visibility = Hvisibility;
}


function TLonGuess(event)
{
    var textFieldValue = document.getElementById("numberInput");
    TLguess = textFieldValue = textFieldValue.value;

    //ADD TRAFFIC LIGHTS GUESS TO DATABASE
    addGuessJS(playerlist[TLcurrentPlayer].getName(), TLanswer, TLguess, TLanswer);

    var views = document.getElementById('stackLayout');
    var about;
    
    if (isNaN(textFieldValue) || textFieldValue.length != 3) {
        guessErrorText.innerText = "Incorrect number input";
        about = document.getElementById('guessInputScreen');
    }
    else if (TLcheckValues3(textFieldValue)) {
        // Winning situation
        var origNum = document.getElementById("originalNumText");
        origNum.innerText = "The number was " + textFieldValue;
        var winAvatar = document.getElementById("winAvatar");
        changeAvatarSpriteImage(playerlist[TLcurrentPlayer].avatar, SPRITE_85_OFFSET, "winAvatar");
        var winText = document.getElementById("winText");
        winText.innerText = playerlist[TLcurrentPlayer].getName() + " wins!";
        guessErrorText.innerText = "";
        
        //overall scores
        playerlist[TLcurrentPlayer].addToScore(TLcurJackpot);
        
        switchToTL('winScreen');
    } else {
        if (TLeasymode) {
			if (TLcurJackpot > TL_LOWER_PTS_BOUND) {
				TLcurJackpot -= TL_JACKPOT_PENALTY;
			}
		}else{
			if (TLcurJackpot > TL_LOWER_PTS_BOUND/TL_LEVEL_FACTOR) {
				TLcurJackpot -= Math.floor(TL_JACKPOT_PENALTY/TL_LEVEL_FACTOR);
			}
		}
        TLpass();
    }
}

function TLcheckValues3(valueString) {
    var guess = valueString * 1;
    document.getElementById("lastGuessText").innerText = "The last guess was "+guess;
    document.getElementById("lastGuessText").style.visibility = 'visible';
    var guessDigits = TLbreakDownGuess(guess);
    var lightsArray = TLsetLights(guessDigits, inputNum);
    TLpopulateScreenWithLights(lightsArray, guess);
    return TLguessedTheNumber(lightsArray);
}

function TLpopulateScreenWithLights(lightsArray, guess) {
    var tl_guess = new TLGuessObject();
    tl_guess.guess = guess;
    tl_guess.lights = lightsArray;
    tl_guess.challengelight = TLgetChallengeCode(lightsArray);
    tl_guess.avatar = playerlist[TLcurrentPlayer].avatar;
    tl_guessHistory.push(tl_guess);
	TLbuildHistory3();

    // Set indicators
    if(TLeasymode) {
        document.getElementById("lastGuessNum").innerText = guess;
        document.getElementById("lastGuessNum").style.visibility = 'visible';
        for (i = 0 ; i < 3 ; i++) {
            document.getElementById("light" + (i+1)).object.setValue(lightsArray[i]);
            document.getElementById("light" + (i+1)).style.visibility = 'visible';
        }
    }else{
        var newChallengeImageName = TLformChallengeName(118, tl_guess); 
        //challengeLight.src = newChallengeImageName;
        TLchangeImageSprite("#lastchallengelightimg", newChallengeImageName);
		get("lastchallengelightimg").style.visibility = "visible";
    }
}

function TLformChallengeName(width, guessObj) {
    //return "Images/challengelights" + guessObj.challengelight + ".png";
	var pxval = TLtransform3digitCodeToSprite(width, guessObj);
	return /*'0px ' + */pxval + 'px';
}

function TLformAvatarName(avtFName, pxHeight) {
	var pxval = TLtransformAvatarToSprite(avtFName, pxHeight);
	return pxval + 'px';
}

function formLevelProp(points, offset) {
	var level = decideLevelRank(points);
	level = -1 * level * offset;
	return level + 'px';
}

function decideLevelRank(points) {
	return decideLevel(Math.floor(points / LEVEL_UP_FACTOR))
}

function decideLevel(rank) {
	rank = Number(rank);
	var count = 0;
	var rankcutoff = 1;
	var factor = 1;
	while(rank > rankcutoff && count <= MAX_LEVEL) {
		count++;
		factor++;
		rankcutoff = rankcutoff + factor; 
	}
	return count;
}

function formCarName(pxHeight) {
	var pxval = randomlyPickCar(pxHeight);
	return pxval + 'px';
}

function formBackgroundImage(bgName) {
	var pxval = transformBgToSprite(bgName, 426);
	return pxval + 'px';
}

function TLchangeImageSprite(elemName, backPosStr) {
	$(elemName).css("top", backPosStr);
}

function TLchangeMyImageSprite(elem, value) {
	changeSpriteCss(elem, "top", value);
}

function changeAvatarSpriteImage(fName, offset, id) {
	document.getElementById(id).style.visibility = 'visible';
	var newAvatarImageName = TLformAvatarName(fName, offset);
	TLchangeMyImageSprite(id, newAvatarImageName);
}

function changeLevelSpriteImage(fName, id) {
	get(id).style.visibility = 'visible';
	var newSpriteProperty = formLevelProp(fName, SPRITE_LEVEL_OFFSET);
	TLchangeMyImageSprite(id, newSpriteProperty);
}

function changeCarSpriteImage(offset, id) {
	document.getElementById(id).style.visibility = 'visible';
	var newCarImage = formCarName(offset);
	TLchangeImageSprite("#"+id+"img", newCarImage);
}

function changeBgSprite(id) {
	changeBackByURL(getBGFName(id), id);
}

function changeBgSpriteImage(id) {
	var bgName = getBGFName(id);
	var newBGCSSProp = formBackgroundImage(bgName);
	//changeSpriteCSS(id, "top", newBGCSSProp);
	changeBackByURL(bgName, id);
}

function changeBgTlSpriteImage(id, easyMode) {
	var newid = id;
	if (!easyMode) {
		newid = newid+"nascar";
	}
	var bgName = getBGFName(newid, easyMode);
	//var newBGCSSProp = formBackgroundImageTL(bgName);
	changeBackByURL(bgName, id);
}

function changeBackByURL(bgName, id) {
	get(id).style.backgroundImage = "url(Images/"+bgName+")";
}

function changeDigitSpriteImage(num, id) {
	document.getElementById(id).style.visibility = 'visible';
	var offset = transformDigitToSprite(num) + 'px';
	changeSpriteCss(id, "left", offset);
}

function changeSpriteCss(id, tag, offsetpx) {
	changeCssProperty(id+"img", tag, offsetpx);
}

function changeCssProperty(id, tag, property) {
	$("#"+id).css(tag, property);
}

function transformDigitToSprite(num) {
	return -1 * num * SPRITE_15_OFFSET;
}

function TLtransform3digitCodeToSprite(num, guessObj) {
	var digits = guessObj.challengelight;
	var numReds = parseInt(digits[0]);
	var numYells = parseInt(digits[1]);
	var numGreens = parseInt(digits[2]);
	
	var pxval = numReds * (num*4) + numYells * num;	
	if(numReds >= 2) {
		if(numReds == 3) {
			pxval = num*9;
		}else if(numYells == 1) {
			pxval = num*8;
		}else{
			pxval = num*7;
		}
	}
	return -1 * pxval;
}

function randomlyPickCar(pxheight) {
	var randNum = Math.floor(Math.random()*20) + 1;
	return -1 * Math.round(randNum * pxheight);
}

function TLtransformAvatarToSprite(avtFName, pxheight) {
	var num = 0;
	var underscorePos = avtFName.lastIndexOf('_');
	var dotPos = avtFName.lastIndexOf('.');
	var avtName = avtFName.substring(underscorePos+1, dotPos).toLowerCase();
	switch(avtName) {
		case "alligator": num = 0; break;
		case "bear": num = 1; break;
		case "bunny": num = 2; break;
		case "cat": num = 3; break;
		case "panda": num = 4; break;
		case "dragon": num = 5; break;
		case "fox": num = 6; break;
		case "giraffe": num = 7; break;
		case "goat": num = 8; break;
		case "lion": num = 9; break;
		case "monkey": num = 10; break;
		case "umm": num = 11; break;
		default: num = 12; break;
	}
	return -1 * Math.round(num * pxheight);
}

function transformBgToSprite(bgFName, pxheight) {
	var num = 0;
	var dotPos = bgFName.lastIndexOf('.');
	var bgFName = bgFName.substring(0, dotPos).toLowerCase();
	switch(bgFName) {
		case "estimation_contest": num = 0; break;
		case "estimation_estimate": num = 1; break;
		case "estimation_main": num = 2; break;
		case "estimation_timesup": num = 3; break;
		case "main": num = 4; break;
		case "main_age": num = 5; break;
		case "main_name": num = 6; break;
		case "main_numPlayers": num = 7; break;
		case "main_scores": num = 8; break;
		case "racers_main": num = 9; break;
		case "racers_pass": num = 10; break;
		case "racers_play": num = 11; break;
		case "thereYet_answers": num = 12; break;
		case "thereYet_check": num = 13; break;
		case "thereYet_guesses": num = 14; break;
		case "thereYet_main": num = 15; break;
		case "traffic_nascar_main": num = 16; break;
		case "traffic_gokart_main": num = 17; break;
		case "traffic_gokart_pass": num = 18; break;
		case "traffic_gokart_win": num = 19; break;
		case "traffic_guess": num = 20; break;
		case "traffic_guess_horizontal": num = 21; break;
		case "traffic_nascar_pass": num = 22; break;
		case "traffic_nascar_win": num = 23; break;
		case "traffic_pass": num = 24; break;
		case "traffic_pick": num = 25; break;
		case "victoryvan_answer": num = 26; break;
		case "victoryvan_answerwrong": num = 27; break;
		case "victoryvan_main": num = 28; break;
		case "victoryvan_question": num = 29; break;
		case "victoryvan_timesup": num = 30; break;
		default: num = 31; break;
	}
	return -1 * Math.round(num * pxheight);
}

function getBGFName(idName) {
	var fname;
	switch(idName) {
		case "gameSelect": fname="main"; break;
		case "distances": fname="thereYet_guesses"; break;
		case "mainHours": fname="thereYet_answers"; break;
		case "mainHoursPrelim": fname="thereYet_guesses"; break;
		case "time_chart": fname="thereYet_check"; break;
		case "distancesAnswer": fname="thereYet_answers"; break;
		case "GuessSelection": fname="estimation_main"; break;
		case "MakeEstimatesSecret": fname="estimation_estimate"; break;
		case "MakeEstimatesOpen": fname="estimation_estimate"; break;
		case "EstimationHints": fname="estimation_estimate"; break;	
		case "ContestBegun": fname="estimation_contest"; break;
		case "EstimationResults": fname="estimation_timesup"; break;
		case "estBon": fname="estimation_estimate"; break;
		case "estBonRes": fname="estimation_estimate"; break;
		case "inputNumber": fname="traffic_pick"; break;
		case "guessInput": fname="traffic_guess"; break;
		case "TLpassScreen": fname="traffic_gokart_pass"; break;
		case "winScreen": fname="traffic_gokart_win"; break;
		case "TLpassScreennascar": fname="traffic_nascar_pass"; break;
		case "winScreennascar": fname="traffic_nascar_win"; break;
		case "tlHome": fname="traffic_gokart_main"; break;
		case "tlHomenascar": fname="traffic_nascar_main"; break;
		case "tlInstructions": fname="traffic_howto"; break;
		case "PCcontent": fname="racers_play"; break;
		case "PCpassScreen": fname="racers_pass"; break;
		case "PChome": fname="racers_main"; break;
		case "players": fname="main_numPlayers"; break;
		case "scores": fname="main_scores"; break;
		case "users": fname="thereYet_main"; break;
		case "avatarSelect": fname="thereYet_main"; break;
		case "api_view1": fname="thereYet_main"; break;
		case "api_view2": fname="thereYet_check"; break;
		case "continue_trip": fname="thereYet_check"; break;
		case "victoryVanStart": fname="victoryvan_main"; break;
		case "vVanAgeQuestions": fname="thereYet_main"; break;
		case "vvQuestionTemplate": fname="victoryvan_question"; break;
		case "vvPassPhoneTo": fname="victoryvan_answer"; break;
		case "vvPassPhoneToWrong": fname="victoryvan_answerno"; break;
		case "vvSocialQuestionTemplate": fname="victoryvan_question"; break;
		case "vvGameFinished": fname="victoryvan_timesup"; break;
		default: fname="thereYet_main"; break;
	}
	return fname+".jpg";
}

function TLguessedTheNumber(lightsArray) {
    for(var i = 0; i < lightsArray.length; i++) {
        if(lightsArray[i] != GREEN) {
            return false;
        }
    }
    return true;
}

function TLgetChallengeCode(lightsArr) {
    var counts = TLfindCounts(lightsArr);
    return TLcreateCountsStr(counts);
}

function TLfindCounts(guesses) {
    var counts = new Array(0, 0, 0);
    
    counts[0] = TLcountChars(RED, guesses);
    counts[1] = TLcountChars(YELLOW, guesses);
    counts[2] = TLcountChars(GREEN, guesses);
    return counts;
}

function TLcreateCountsStr(counts) {
    var countStr = '';
    for(var i = 0; i < counts.length; i++) {
        countStr += counts[i];
    }
    return countStr;
}

function TLcountChars(letterMatch, guesses) {
    var count = 0;
    for(var i = 0; i < guesses.length; i++) {
        if(letterMatch == guesses[i]) {
            count++;
        }
    }
    return count;
}

function TLshouldBeYellow(num, digits, lights, answersReached) {
    for(var i = 0; i < digits.length; i++) {
        if(digits[i] == num) {
            if(!answersReached[i]) {
                answersReached[i] = true;
                return true;
            }
        }
    }
    return false;
}

function TLbreakDownGuess(num) {
    var tempDigits = new Array(0, 0, 0);
    
    for(var i = tempDigits.length-1; i >= 0; i--) {
        tempDigits[i] = num % 10;
        num = num / 10;
        num = Math.floor(num);
    }
    return tempDigits;
}

function TLsetLights(guessDigits, answerDigits) {
    var lights = new Array(0, 0, 0);
    var answersReached = new Array(false, false, false);
    
    for(var i = 0; i < lights.length; i++) {
        if(guessDigits[i] == answerDigits[i]) {
            lights[i] = GREEN;
            answersReached[i] = true;
        }
    }
    
    for(var i = 0; i < lights.length; i++) {
        if(lights[i] == 0) {
            if(TLshouldBeYellow(guessDigits[i], answerDigits, lights, answersReached)) {
                lights[i] = YELLOW;
            }else{
                lights[i] = RED;
            }
        }
    }
    return lights;
}

function TLbuildHistory() {
	var guessTxt = "";
	var numGuesses = tl_previousGuesses.length-1;
	for(var i = 0; i < tl_previousGuesses.length && i < 4; i++) {
		guessTxt += " " + (i+1) + ": " + tl_previousGuesses[numGuesses-i] + ";";
	}
	return guessTxt;
}

function TLbuildHistory2() {
	var guessTxt = "";
	var numGuesses = tl_previousGuesses.length-1;
	for(var i = 0; i < tl_previousGuesses.length && i < 2; i++) {
		guessTxt += " " + (i+1) + ": " + tl_previousGuesses[numGuesses-i] + ";";
		var curLights = tl_previousLights[numGuesses-i];
		for(var j = 0; j < curLights.length; j++) {
			guessTxt += curLights[j] + ",";
		}
	}
	return guessTxt;
}

function TLbuildHistory3() {
    var numGuesses = tl_guessHistory.length-1;
    for(var i = 0; i < tl_guessHistory.length && i < 8; i++) {
        var ithvar = i + 1;
        
        if(TLeasymode) {
            document.getElementById("EHist" + ithvar).style.visibility = 'visible';
            document.getElementById("EHist" + ithvar).innerText = tl_guessHistory[numGuesses-i].guess;
            for(var j = 0; j < tl_guessHistory[i].lights.length; j++) {
                document.getElementById("indicator"+ithvar+""+j).style.visibility = 'visible';
                document.getElementById("indicator"+ithvar+""+j).object.setValue(tl_guessHistory[numGuesses-i].lights[j]);
            }
        }else{
            document.getElementById("DHist" + ithvar).style.visibility = 'visible';
            document.getElementById("DHist" + ithvar).innerText = tl_guessHistory[numGuesses-i].guess;
            document.getElementById("histchallenge"+ithvar+"img").style.visibility = 'visible';
            var newChallengeImageName = TLformChallengeName(37, tl_guessHistory[numGuesses-i]);
			var histElem = "#histchallenge"+ithvar+"img";
			TLchangeImageSprite(histElem, newChallengeImageName);
        }
        //document.getElementById("histavatar" + ithvar).src = tl_guessHistory[numGuesses-i].avatar;
		changeAvatarSpriteImage(tl_guessHistory[numGuesses-i].avatar, SPRITE_30_OFFSET, "histavatar" + ithvar);
		/*var newAvatarImageName = TLformAvatarName(tl_guessHistory[numGuesses-i].avatar, 33.5);
		TLchangeImageSprite("#histavatar" + ithvar +"img", newAvatarImageName);*/
	}

    //document.getElementById("lastGuessText").innerText = buildHistory2();

}

function clearHistory() {
    for(var i = 0; i < 8; i++) {
        var ithvar = i + 1;
        document.getElementById("DHist" + ithvar).style.visibility = 'hidden';
        document.getElementById("DHist" + ithvar).innerText = '';
        document.getElementById("EHist" + ithvar).style.visibility = 'hidden';
        document.getElementById("EHist" + ithvar).innerText = '';
        for(var j = 0; j < 3; j++) {
            document.getElementById("indicator"+ithvar+""+j).style.visibility = 'hidden';
            document.getElementById("indicator"+ithvar+""+j).object.setValue(0);
        }
        document.getElementById("histchallenge" + ithvar).style.visibility = 'hidden';
        document.getElementById("histchallenge" + ithvar).src = '';
        changeAvatarSpriteImage('_.', SPRITE_30_OFFSET, "histavatar" + ithvar);
		document.getElementById("histavatar" + ithvar).style.visibility = 'hidden';
        
		//document.getElementById("histavatar" + ithvar).src = '';
	}
    clearLastGuessText();
}

function clearLastGuessText() {
    for(var i = 1; i <= 3; i++) {
        document.getElementById("light"+i).style.visibility = 'hidden';
        document.getElementById("light"+i).object.setValue(0);
    }
    document.getElementById("lastGuessText").style.visibility = 'hidden';
    document.getElementById("lastGuessText").innerText = '';
    document.getElementById("lastchallengelight").style.visibility = 'hidden';
    document.getElementById("lastGuessNum").style.visibility = 'hidden';
    document.getElementById("lastGuessNum").innerText = '';
}


function TLonNext(event)
{
    var inputField = document.getElementById('numberInput');
    inputField.value = "";
    var currAvatar = document.getElementById('currPlayerAvatar');
    changeAvatarSpriteImage(playerlist[TLcurrentPlayer].avatar, SPRITE_57_OFFSET, 'currPlayerAvatar');
	//currAvatar.src = playerlist[TLcurrentPlayer].avatar;
	get('text11').innerText = playerlist[TLcurrentPlayer].name + "'s turn";
    var guessTxt = document.getElementById('guessjackpottext');
    guessTxt.innerText = "Try to guess the 3 digit number!\n\nIf you're right you'll get " + TLcurJackpot + " points!";
    
    switchToTL('guessInput');
}


function TLskipTurn(event)
{
    document.getElementById("lastGuessText").innerText = "The last turn was skipped";
    document.getElementById("lastGuessText").style.visibility = 'visible';
    // Set indicators
    for (i = 0 ; i < 3 ; i++) {
        document.getElementById("light" + (i+1)).style.visibility = 'hidden';
    }
    TLpass();
}

function PCgotoGames(event) {
	PCcurrentPlayer = -1;
	gotoGames(event);
}

function PCpass(event)
{
    if (PCcurrentPlayer < numPlayers-1) {
        PCmode = PCdetermineMode();
        var nextName = playerlist[PCcurrentPlayer+1].getName();
        playerlist[PCcurrentPlayer+1].isplaying = 1;
        
        // Pass to next player
        document.getElementById('PCnextName').innerText = nextName;
        //document.getElementById('PCnextAvatar').src = playerlist[PCcurrentPlayer+1].avatar;
		changeAvatarSpriteImage(playerlist[PCcurrentPlayer+1].avatar, SPRITE_57_OFFSET, 'PCnextAvatar');
        PCcurrentPlayer++;
        switchTo('PCpassScreen');
    } else {
        // Go to scores page
        PCcurrentPlayer = -1;
        gotoScores();
    }
}

function PCdetermineMode() 
{    
    for(var i = 1; i <= 2; i++) {
        if(document.getElementById("PCrad"+i).checked) {
            return i;
        }
    }
    PCmultiplier = document.getElementById('PCmultValue').value;
    return PC_MULT_MODE;
}

function PCSkipPass(event)
{
    for(i = 1; i < br_frames; i++) {
        clearTimeout(br_timeouts1[i]);
        clearTimeout(br_timeouts2[i]);
    }
    clearTimeout(br_timeouts3);
    //br_primeCarsMistakes = 3;
    br_carAtEnd();
    //PCpass(event);
    //PCpass(event);
}

function PCstartGame(event)
{
    switchTo('PCcontent');
	
    //SETUP Prime Cars stuff
    br_carNumber = 0;
    br_carSpeed = 10;
    br_carClicked = false;
    br_primeCarsMistakes = 0;
    br_primeCarsPoints = 0;
	br_numCorrectGuesses = 0;
    br_primeCarsDead = false;
    br_mistakesText.innerText = " ";
    br_pointsText.innerText = "";
    br_message.innerText = PCdetermineText();
    
    br_makeCar();
}

function PCdetermineText() {
    var text = "Identify if the number on the cars is ";
    if(PCmode == PC_PRIME_MODE) {
        text += "prime or composite";
        PCvalues = new Array("Prime", "Not Prime");
    }else if(PCmode == PC_EVEN_MODE) {
        text += "even or odd";
        PCvalues = new Array("Even", "Odd");
    }else{
        text += "a multiple of " + PCmultiplier;
        PCvalues = new Array("Multiple of " + PCmultiplier, "Not a Multiple");
    }
    br_primeButton1.object.setText(PCvalues[0]);
    br_notPrimeButton1.object.setText(PCvalues[1]);
    return text;
}




///////////////////////////////////////////////////////////////
// EVENT HANDLERS ETC FOR PLAYER STUFF 
///////////////////////////////////////////////////////////////
function isInteger(s) {
  return (s.toString().search(/^-?[0-9]+$/) == 0);
}

function setadminflag(){
  for (var i = 0; i < numPlayers; i++){
    if (playerlist[i].getName() == adminName){
      playerlist[i].admin = 1;
    }
  }
}

function hideScores() {
	for(var j = 0; j < 4; j++) {
		get('player' + (j+1)).style.visibility = 'hidden';
   	 	get('score'  + (j+1)).style.visibility = 'hidden';
    	get('ranktitle' + (j+1)).style.visbility = 'hidden';
		get('spritelevel' + (j+1)).style.visibility = 'hidden';
	}
}

function displayScores(){
  var playername;
  var playerscore;
  var pranktitle;
  var playeravatar;
  var levelimgName;
  
  //alert('total players' + numPlayers);
  var ordering = figureOutScoreOrder();
  
  //SET PLAYER NAMES AND ANSWERS
  for (var j = 0; j < numPlayers; j++){
    
    var i = ordering[j];
    //get the text element for the player name and the player answer
    playername   = get('player' + (j+1));
    playerscore  = get('score'  + (j+1));
    pranktitle = get('ranktitle' + (j+1));
	levelimgName = 'spritelevel' + (j+1);
	
    var avtName = 'p' + (j+1) + 'avatar';
	playeravatar = get(avtName);
    
    //update the text element for the player name and the player answer
    playername.innerHTML   = playerlist[i].getName();
    playerscore.innerHTML  = playerlist[i].getScore();
	pranktitle.innerHTML = "Rank:";
	changeAvatarSpriteImage(playerlist[i].avatar, SPRITE_57_OFFSET, avtName);
    changeLevelSpriteImage(Number(playerscore.innerHTML), levelimgName);
	playeravatar.src       = playerlist[i].avatar;
    //pscoregauge.object.setValue(playerlist[i].getScore());
    
    /*if (!(playerlist[j].isplaying)){
      //if the player is playing only then make the score visible.
      playername.style.visibility='hidden';
      playerscore.style.visibility='hidden';
      pscoregauge.style.visibility='hidden';
    }
    else{
      pscoregauge.style.visibility='visible';
      playeravatar.style.visibility='visible';
    }*/
    playername.style.visibility='visible';
    playerscore.style.visibility='visible';
    changeCssProperty('ranktitle'+(j+1), 'display', 'block');
	playeravatar.style.visibility='visible';
    
  }//for loop ends 
  
  //reset currentplayerid back to 0, and also set all the isplaying 
  //flags back to 1.
  currentplayerid=0;
  for (var i = 0; i < numPlayers; i++){
    playerlist[i].isplaying=1; 
  }
  
}

function figureOutScoreOrder() {
    var ordering = new Array();
    var beenUsed = new Array();
    var maxIndex;
    var maxValue;
    for(var i = 0; i < numPlayers; i++) {
        maxIndex = 0;
        maxValue = -1; //cruddy I know
        for(var j = 0; j < numPlayers; j++) {
            if(playerlist[j].score > maxValue && !beenUsed[j]) {
                maxIndex = j;
                maxValue = playerlist[j].getScore();
            }
        }
        ordering[i] = maxIndex;
        beenUsed[maxIndex] = true;
    }
    return ordering;
}

///////////////////////////////////////////////////////////////
// EVENT HANDLERS ETC FOR PLAYER STUFF 
///////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////
// DATABASE CODE BEGINS
///////////////////////////////////////////////////////////////

function addPlayerJS(str, avtar)
{
	transmitToPHP(doNothing, "name="+str+"&sid="+currentsid+"&category=addplayer"+"&avatar="+avtar);
}

function updatePlayerAvatarJS(str, avtar) {
	transmitToPHP(doNothing, "name="+str+"&sid="+currentsid+"&category=updateavatar"+"&avatar="+avtar+"&uid="+userid);
}		

function addUserJS(fname, lname) {
	var ajaxobj = createXmlHttpObject("firstname="+fname+"&lastname="+lname+"&category=adduser");
	ajaxobj.sendToPHP(ajaxobj.displayUser());
}

function loginJS(fname, lname) {
	var ajaxobj = createXmlHttpObject("firstname="+fname+"&lastname="+lname+"&category=getuser");
	ajaxobj.sendToPHP(ajaxobj.displayUID());
}

function addGuessJS(name, problem, guess, answer) {
	transmitToPHP(doNothing, "name="+name+"&sid="+currentsid+"&prob="+problem+"&guess="+guess+"&answer="+answer+"&category=addguess");
}

function addNavActionJS(action, comment) {
	var act = action.charAt(0);
	transmitToPHP(doNothing, "uid="+userid+"&action="+act+"&comment="+comment+"&category=addnav");
}

function sendGuessesJS(estims) {
	var adj = get('adjectivepopup').value;
	var noun = get('nounpopup').value;
	var nMinutes = get('estimatetimepopup').value.charAt(0);
	for(var i = 0; i < numPlayers; i++) {
		var guess = estims[i];
		addGuessJS(playerlist[i].name, "How many " + adj + " " + noun + " in " + getMinutesSuffix(nMinutes) + "?", guess, estimateCount)
	}
}

function getQuestionJS(cat) {
	var ajaxobj = createXmlHttpObject("level="+cat+"&category=getquestion");
	ajaxobj.sendToPHP(ajaxobj.displayQuestion())
}

function addCheckinsJS(curloc) {
	transmitToPHP(doNothing, "curloc="+curloc+"&sid="+currentsid+"&category=addcheckin");
}

function updateTripInfoJS(startloc, endloc) {
	transmitToPHP(doNothing, "startloc="+startloc+"&endloc="+endloc+"&sid="+currentsid+"&category=updatetrip");
}

function add2ScoreInDBJS(name, points) {
	if(name.length == 0 || points.length == 0) {
		return;
	}
	transmitToPHP(doNothing, "name="+name+"&sid="+currentsid+"&points="+points+"&category=updatescore");
}

function createSessionJS() {
	var ajaxobj = createXmlHttpObject("uid="+userid+"&category=createsession");
	ajaxobj.sendToPHP(ajaxobj.displaySession());
}

function endSessionJS() {
	if(Number(currentsid) > 0) {
		transmitToPHP(doNothing, "sid="+currentsid+"&uid="+userid+"&action=f&comment="+currentsid+"&category=endsession");
	}
}

function getHallOfFameJS() {
	var ajaxobj = createXmlHttpObject("sid="+currentsid+"&uid="+userid+"&category=gethalloffame");
	ajaxobj.sendToPHP(ajaxobj.displayHallOfFame());
}

function createXmlHttpObject(params) {
	var temp = new AjaxObject(url, params);
	xmlhttps.push(temp);
	return temp;
}

function doNothing() {
	//used to make a more streamlined JS function call for http objects
}

function transmitToPHP(fn, paramString) {
	var ajaxobj = createXmlHttpObject(paramString);
	ajaxobj.sendToPHP(fn);
}

// Ajax Object for getting webpages and such
function AjaxObject(theurl, params){
    this.xmlhttp = fetchXmlObject(); //xml http object
    this.params = params;
	this.url = theurl;
	
    var that = this;
    
    function fetchXmlObject() {
		var temp=GetXmlHttpObject();
    	//firebug.watchXHR(xmlhttp);
		if(temp==null) {
			alert ("Your browser does not support XMLHTTP!");
		}
		return temp;
	}

	function GetXmlHttpObject() {
		if (window.XMLHttpRequest) {
			// code for IE7+, Firefox, Chrome, Opera, Safari
			return new XMLHttpRequest();
		}
		if (window.ActiveXObject) {
			// code for IE6, IE5
			return new ActiveXObject("Microsoft.XMLHTTP");
		}
		return null;
	}
	
	function fieldDisplay(element) {
		if (that.serverReturnedAResponse()) {
			//changeLabelText(element, that.xmlhttp.responseText);
		}
	}
	
	this.sendToPHP = function(cb) {
		if(that.xmlhttp==null) {
			return;
		}
		that.xmlhttp.onreadystatechange = cb;
		that.xmlhttp.open("POST",that.url,true);
		//Send the proper header information along with the request
		that.xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		that.xmlhttp.send(that.params);
	}
	
	this.displayQuestion = function() {
		return function () {
			if(that.serverReturnedAResponse()) {
				var responseFields = that.responseText().split('|');
				vVanObj.prepareNextQuestion(responseFields);
			}
		}
	}
		
	this.displayUser = function(){
		return function(){
			if(that.serverReturnedAResponse()) {
				window.userid = that.responseText();
				createSessionJS();
			}
		}
	}
		
	this.displaySession = function(){
		return function(){
			if(that.serverReturnedAResponse()) {
				localStorage.currentsid = window.currentsid = that.responseText();
				addNavActionJS("begin", localStorage.currentsid);
			}
		}
	}
		
	this.displayHallOfFame = function(){
		return function(){
			//fieldDisplay("sessionidtxt");
			if (that.serverReturnedAResponse()) {
				$("#hallheader").hide();
				var fields = that.responseText().split('|');
				var nFamous = fields.splice(0, 1);
				for(var i = 0; i < nFamous; i++) {
					displayFamer(fields, i);
				}
			}
		}
	}	
		
	this.displayUID = function(){
		return function(){
			//fieldDisplay("sessionidtxt");
			if (that.serverReturnedAResponse()) {
				window.userid = that.responseText();
				setLongCookie("userid", that.responseText());
		        if (window.userid == -1){
		          addUserJS(userfname, userlname);
		        } else {
		          createSessionJS();
		        }
			}
		}
	}
	
	this.destroyUserCookie = function() {
		return function() {
			if(that.serverReturnedAResponse()) {
				destroyUserCookie();
			}
		}
	}
	
	function displayFamer(fields, i) {
		$("#hofrank"+(i+1)).text(fields[i*N_HOF_CATS]);
		$("#hofscore"+(i+1)).text(fields[i*N_HOF_CATS+3]);
		$("#hofplayer"+(i+1)).text(fields[i*N_HOF_CATS+1]);
		changeAvatarSpriteImage(fields[i*N_HOF_CATS+2], SPRITE_57_OFFSET, "hofestavt"+(i+1));
	//	alert("name: " + fields[i*3] + " avatar: " + fields[i*3+1] + " points: " + fields[i*3+2]);	
	}
	
	this.serverReturnedAResponse = function() {
    	return (that.xmlhttp.readyState==4 && that.xmlhttp.status==200);
	}
	
	this.responseText = function() {
		return that.xmlhttp.responseText;
	}
}

///////////////////////////////////////////////////////////////
// DATABASE CODE ENDS
//--------------------------------------------------------------
// EVENT HANDLERS ETC FOR ESTIMATION STATION 
///////////////////////////////////////////////////////////////

function removeSpaces(string) 
{
 return string.split(' ').join('');
}

function getEstAdj() {
	var adj = get('adjectivepopup').value;
	
	if(estimateCount == 1) {
		adj = adj.substr(0, adj.length - 1);
	}
	return adj;
}

function getEstNoun() {
	return get('nounpopup').value;
}

function getEstMin() {
	return get('estimatetimepopup').value;
}

function getMinutesSuffix(est) {
	if(parseInt(est) == 1) {
		return "minute";
	}
	return "minutes";
}

function MakeEstimates(event)
{    //create question text for Open and Secret guess pages 
    document.getElementById('text51').innerText =  document.getElementById('text51').innerText = "How many " + getEstAdj() + " " + getEstNoun() + " will we pass in the next " + getEstMin() + "?";
   
    document.getElementById('text2').innerText = document.getElementById('text51').innerText;


    //send to Open or Secret mode
      secretMode = document.getElementById('secretmode').checked;
      if (secretMode){
            setEstimateAvatars(event,"")
            makeSecretEstimates(event)
      }
      else{
            setEstimateAvatars(event,"Open")
            makeOpenEstimates(event)
      }
}

function CounterPlus(event,a)
{
    estimateCount++;
    document.getElementById('EstimateCounter' + a).innerText = estimateCount;
}

function CounterMinus(event,a)
{
    if (estimateCount > 0) {
		estimateCount--;
	}
	document.getElementById('EstimateCounter' + a).innerText = estimateCount;
}

function enterSecretEstimate1(event)
{
    enterSecretEstimateCheck(event,1,1);
}

function enterSecretEstimate2(event)
{
    enterSecretEstimateCheck(event,2,2);
}

function enterSecretEstimate3(event)
{
    enterSecretEstimateCheck(event,3,3);
}

function enterSecretEstimate4(event)
{
    enterSecretEstimateCheck(event,4,4);
}

function enterSecretEstimate5(event)
{
    enterSecretEstimateCheck(event,5,5);
}

function enterSecretEstimate6(event)
{
    enterSecretEstimateCheck(event,6,6);
}

function enterSecretEstimate7(event)
{
    enterSecretEstimateCheck(event,7,7);
}

function enterSecretEstimate8(event)
{
    enterSecretEstimateCheck(event,8,8);
}

function enterSecretEstimate9(event)
{
    enterSecretEstimateCheck(event,9,13);
}

function enterSecretEstimate10(event)
{
    enterSecretEstimateCheck(event,10,14);
}

function enterSecretEstimate11(event)
{
    enterSecretEstimateCheck(event,11,15);
}

function enterSecretEstimate12(event)
{
    enterSecretEstimateCheck(event,12,16);
}

function enterSecretEstimate(event) {
    var evt = window.event || e;
    if(!evt.target) {
        evt.target = evt.srcElement;
    }
    alert(evt.target);
}

function enterSecretEstimateCheck(event,a,b)
{
    if(isPositiveInteger(document.getElementById('PlayerEstimate' + a).value) && isPositiveInteger(document.getElementById('PlayerEstimate' + b).value)){
        //puts secretimage infront of entered estimate, hides any existing error message
        document.getElementById('SecretCover' + a).style.visibility = 'visible';
        hideEstimationErrorMessages(event);
    }
    else {  //error message, clearentryfield
        document.getElementById("PlayerEstimate" + a).value = "";
        showEstimationErrorMessages(event);
    }
}

function setEstimateAvatarsFull(event, a, btnnamesarray, startIndex) {
    for (var i = 0; i < numPlayers; i++){
        showAvatar(a, i, startIndex);
        showPlayerName(a, i, startIndex);
        get(a + 'PlayerEstimate' + (i+startIndex)).style.visibility = 'visible';
        
        if(a == ""){   // enter buttons only need to be turned visible in secret mode
            get(btnnamesarray[i]).style.visibility = 'visible';
        }
    }
}

function setAdditionalParamtersFull(event, hoursfields, hourscaps, minscaps) {
    for(var i = 0; i < numPlayers; i++) {
        get(hoursfields[i]).style.visibility = 'visible';
        get(hourscaps[i]).style.visibility = 'visible';
        get(minscaps[i]).style.visibility = 'visible';
    }
}

function switchToDistancesAnswer(event)
{
    showEstimatesForMiles(event, 9, 5);
    switchTo('distancesAnswer');
}

function createSSuffix(value) {
    if(value == 1) {
        return "";
    }
    return "s";
}

function switchToCheckIn(event) {
	if(pageObj.loadedinfo) {
		displayCheckinContents();
	}else{
		switchToMainHoursPrelim(event);
	}
}

function populateCheckinScreen(minutesEsts, hoursEsts) {
	var timeArray = gmap.getMainTimeInHoursMinSecs();
    var hoursS = createSSuffix(timeArray[0]);
    var minS = createSSuffix(timeArray[1]);
    var strSuffix = timeArray[0] + " hour" + hoursS + " " + timeArray[1] + " minute" + minS;
    get('mins_hours_exp').innerText = "We don't know yet, but here's what google thinks: " + strSuffix + ". Check in often to see your progress!";
    for(var i = 0; i < numPlayers; i++) {
        showAvatar("", i, 17);
        var ithPlayerName = showPlayerName("", i, 17);
        hoursS = createSSuffix(hoursEsts[i]);
        minS = createSSuffix(minutesEsts[i]);
        playerlist[i].setTimeGuess(hoursEsts[i], minutesEsts[i]);
        var strSuffix = "'s guess is " + hoursEsts[i] + " hour" +  hoursS + " and " + minutesEsts[i] + " minute" + minS + ".";
        ithPlayerName.innerText = ithPlayerName.innerText + strSuffix;
        addGuessJS(playerlist[i].getName(), generateGuessString("maintime"), playerlist[i].getTimeGuess(), timeArray[0]*60+timeArray[1]); 
        addPlayerInfoToLocalStorage(i);
    }
    var timeElapsed = calculateMillisElapsedFromNow();
    var timePastHours = millisToHours(timeElapsed);
    var secsLeft = timeElapsed-(hoursToMillis(timePastHours));
    var timePastMins = millisToMins(secsLeft);
    if(timePastMins < 10) {
        timePastMins = "" + "0" + timePastMins;
    }
    get('timeSoFar').innerText = "Time elapsed: " + timePastHours + ":" + timePastMins;
    gmap.addCheckIn();
    addNavActionJS("check-in", "");
    switchTo('mainHoursPrelim');
	
}

function switchToMainHoursPrelim(event) {
	pageObj.setCheckinState(true);
    var minutesEsts = convertArrayToNumbers(getGuessesFromTFields('PlayerEstimate', 13));
    var hoursEsts = convertArrayToNumbers(getGuessesFromTFields('PlayerEstimate', 9));
    populateCheckinScreen(minutesEsts, hoursEsts);
}

function millisToHours(tElapsed) {
    return Math.floor(tElapsed / (1000*60*60));
}

function hoursToMillis(hrs) {
    return hrs * (1000*60*60);
}

function millisToMins(tElapsed) {
    return Math.floor(tElapsed / (1000*60));
}

function calculateMillisElapsedFromNow() {
    return calculateMillisElapsed(new Date());
}

function calculateMillisElapsed(dateObj) {
    return dateObj.getTime() - (new Date(localStorage.gameStartTime)).getTime();
}

function showPlayerInfo(playerPrefix, startIndex, prevGuessIndex) {
    var distGuesses = new Array();
    
    for (var i = 0; i < numPlayers; i++) {
        showAvatar(playerPrefix, i, startIndex);
        var ithPlayerName = showPlayerName(playerPrefix, i, startIndex);
        distGuesses[i] = Number(get('PlayerEstimate' + (i+prevGuessIndex)).value);
        playerlist[i].setMilesGuess(distGuesses[i]);
        var strSuffix = "'s guess is " + distGuesses[i] + ".";
        ithPlayerName.innerText = ithPlayerName.innerText + strSuffix;
    }
    return distGuesses;
}

function getGuessesFromTFields(tField, guessIndex) {
    var guesses = new Array();
    for(var i = 0; i < numPlayers; i++) {
        guesses[i] = get(tField + (i+guessIndex)).value;
    }
    return guesses;
}

function restoreMainHoursFields() {
    if(!isNaN(playerlist[0].getTimeGuessHours())) {
    	for(var i = 0; i < numPlayers; i++) {
        	get('PlayerEstimate'+(9+i)).value = playerlist[i].getTimeGuessHours();
        	get('PlayerEstimate'+(13+i)).value = playerlist[i].getTimeGuessMinsLeft();
    	}
    }
}

function convertArrayToNumbers(arr) {
    for(var i = 0; i < arr.length; i++) {
        arr[i] = Number(arr[i]);
    }
    return arr;
}

function showEstimatesForMiles(event, startIndex, prevGuessIndex) {
    var playerPrefix = "";
    get('miles_answer').innerText = "Answer: " + gmap.getMainDistance() + " miles.  ";
    var distGuesses = showPlayerInfo(playerPrefix, startIndex, prevGuessIndex);
    
    //Use code from estimation station
    var estDiffs = getEstimateDiffs(distGuesses, gmap.getMainDistance());
    var bestGuess = findBestGuess(estDiffs);
    var winnersArr = findWinners(estDiffs, bestGuess, gmap.getMainDistance());
    addPlayersGuesses(generateGuessString("mainmiles"), distGuesses, gmap.getMainDistance()); 
    
    var extraPts = 10;
    var pointsMsg = extraPts + " points!"
    if(winnersArr.length > 1) {
        strAnswer = "It's a tie!  So they each get " + pointsMsg;
    }else{
        strAnswer = winnersArr[0].getName() + " is the closest, so they get " + pointsMsg;
    }
    get('miles_answer').innerText += strAnswer;
    for(i = 0; i < winnersArr.length; i++) {
        winnersArr[i].addToScore(extraPts);
    }
}

function generateGuessString(prefix) {
	var origin = stripToCityState(gmap.getStartMarker().markAddr);
    var destin = stripToCityState(gmap.getEndMarker().markAddr);
    return prefix + "-origin: " + origin + "-destin: " + destin;
}

function addPlayersGuesses(problem, guessesarr, answer) {
	for(var i = 0; i < numPlayers; i++) {
		addGuessJS(playerlist[i].getName(), problem, guessesarr[i], answer);
	}
}

function getEstimateDiffs(estimsArray, realAnswer) {
    estimateDiffs = new Array();
    for(i = 0; i < numPlayers; i++) {
        estimateDiffs[i] = Math.abs(estimsArray[i] - realAnswer);
    }
    return estimateDiffs;
}

function findBestGuess(diffsArray) {
    var bestGuess;
    for(i = 0; i < numPlayers; i++) {
        if(i == 0 || diffsArray[i] < bestGuess) {
            bestGuess = diffsArray[i];
        }
    }
    return bestGuess;
}

function showAvatar(a, ith, startIndex) {
    var avtName = a + 'EstimateAvatar' + (ith+startIndex)
	var currAvatar = get(avtName);
    //currAvatar.src = playerlist[ith].avatar;    
	changeAvatarSpriteImage(playerlist[ith].avatar, SPRITE_57_OFFSET, avtName);
    currAvatar.style.visibility = 'visible';
}

function showPlayerName(a, ith, startIndex) {
    var currName = get(a + 'estimatePlayerName' + (ith+startIndex));
    currName.innerText = playerlist[ith].getName();
    currName.style.visibility = 'visible';
    return currName;
}

function setEstimateAvatars(event,a)
{
    var buttonnames = new Array("button18", "button19", "button32", "button20");
    setEstimateAvatarsFull(event, a, buttonnames, 1);
}

function makeSecretEstimates(event)
{
    switchToEst('MakeEstimatesSecret');

}

function makeOpenEstimates(event)
{
    switchToEst('MakeEstimatesOpen');
}

function GetEstimationHints(event)
{
//get Hints page ready
    document.getElementById('text121').innerText = document.getElementById('adjectivepopup').value + " " + document.getElementById('nounpopup').value;
    document.getElementById('text123').innerText = document.getElementById('estimatetimepopup').value + 
    "...";
    
    var numMinutes = document.getElementById('estimatetimepopup').value.charAt(0);
    var numSeconds = numMinutes * 60;
    var sampleMultiplier = numMinutes * 2;
    document.getElementById('text124').innerText = "1. Figure out how many total seconds you are counting. There are 60 seconds in every minute, so " + numMinutes + " min = " + numMinutes + " x 60 = " + numSeconds + " seconds."; 
    document.getElementById('text52').innerText = "2. Now count how many " + document.getElementById('adjectivepopup').value + " " + document.getElementById('nounpopup').value + " pass in the next 30 seconds. Ready? Count!"
    document.getElementById('text83').innerText = "3. Multiple that number by " + sampleMultiplier + ". That's a good estimate for the game because " + numSeconds + " seconds is " + sampleMultiplier +  " times longer than the 30 seconds you sampled. If none passed by, estimate zero or one.";
    
    switchToEst('EstimationHints'); 
}

function getTLHints(event) {
	var view = get('tlInstructions')
	addNavActionJS("help", "");
	switchToTL('tlInstructions');
}

function BeginSecretEstimationContest(event)
{
    BeginEstimationContest(event,"");
}

function BeginOpenEstimationContest(event)
{
    BeginEstimationContest(event,"Open");
}

function BeginEstimationContest(event,a)  // Takes "" for secret, "Open" for Open
{
    if(AllAnswersAreIntegers(a, 1)){   
        // gets ContestBegun text ready
        var adjective = document.getElementById('adjectivepopup').value;
        var noun = removeSpaces(document.getElementById('nounpopup').value);
        document.getElementById('text127').innerText =  adjective + " " + noun + ".";    
        estimateCount = 0;
        document.getElementById('EstimateCounter1').innerText = estimateCount;
        // makes the correct image visible
        document.getElementById(noun).style.visibility = 'visible';
        BeginTimer(event);
        switchToEst('ContestBegun'); 
    } else{
        showEstimationErrorMessages(event);
        ClearNonValidEstimates(a, 1);
    }
}

function AnAnswerIsEmpty(a, startIndex) {
	for(i = startIndex; i < numPlayers + startIndex; i++){
        var estimate = get(a + "PlayerEstimate" + i).value;
        if(isEmpty(estimate)){
			return(true);
		}
    }
	return false;
}

function AllAnswersAreIntegers(a, startIndex) {
    for(i = startIndex; i < numPlayers + startIndex; i++){
        var estimate = get(a + "PlayerEstimate" + i).value;
        if(!isPositiveInteger(estimate)){return(false)}
    }
    return(true);
}

function ClearNonValidEstimates(a, startIndex)
{
   for(i = startIndex; i < startIndex + numPlayers; i++){
        var estimate = get(a + "PlayerEstimate" + i).value;
        if(!isPositiveInteger(estimate)){
            get(a + "PlayerEstimate" + i).value = "";
        }
    }
}

function RandomizeAdjNounTimeSecret(event)
{
    var num1 = (Math.floor(Math.random()* (EstimationNouns.length - 1)));
    document.getElementById('nounpopup').value = EstimationNouns[num1];
    
    do{
        var num2 = (Math.floor(Math.random()* (EstimationAdjectives.length - 1)));
        document.getElementById('adjectivepopup').value = EstimationAdjectives[num2];
    }
    while (!(appropriateAdj[num2][num1]));
    
    var num3 = (Math.floor(Math.random()* (EstimationTimes.length - 1)));
    document.getElementById('estimatetimepopup').value = EstimationTimes[num3];
    
    document.getElementById('secretmode').checked = Math.floor(Math.random() * 2);
    
    disableInvalidNouns(event);
    disableInvalidAdjs(event);
}


function BeginTimer(event)
{
    estimateTimerMin = document.getElementById('estimatetimepopup').value.charAt(0); // After testing, change to document.getElementById('estimatetimepopup').value.charAt(0);
    estimateTimerSec = 0; // After testing, change to 0
        
    //Change this back to 1000 for actual distribution
    estimateTimer = setInterval("SubtractOneSecond(event)", 1000);
}

function SubtractOneSecond(event)
{
    if((estimateTimerMin == 0) && (estimateTimerSec == 0)){
        clearInterval(estimateTimer);
        GetEstimationResults(event);
    } else{
            estimateTimerSec--;
            if(estimateTimerSec == -1){
                estimateTimerSec = 59;
                estimateTimerMin--;
            }
			var secones = estimateTimerSec % 10;
			var sectens = Math.floor(estimateTimerSec / 10);
			var minones = estimateTimerMin % 10;
			var mintens = Math.floor(estimateTimerMin / 10);
			setESDigits(new Array(mintens, minones, sectens, secones));
    }
}

function setESDigits(digits) {
	fields = new Array("esmintens", "esminones", "essectens", "essecones");
	for(var i = 0; i < fields.length; i++) {
		changeDigitSpriteImage(digits[i], fields[i]);
	}
}

//
// Function: formatTwoDigits(number)
// Format a number as one or two digits with a leading zero if needed
//
// number: The number to format
//
// Returns the formatted number as a string.
//

function formatTwoDigits(number)
{
    var digits = number.toString(10);

    // Add a leading zero if it's only one digit long
    if (digits.length == 1) {
        digits = "0" + digits;
    }
    return digits;
}


function GetEstimationResults(event)
{
        //setup top of EstimationResults page
    document.getElementById('EstimateCounter2').innerText = estimateCount;
    document.getElementById('text144').innerText = document.getElementById('adjectivepopup').value + " " + document.getElementById('nounpopup').value + ".";

    //populate the array of player estimates, set up Player estimate, make it visible
    var a = "";
    if(!secretMode){a = "Open";}
    for(i = 0; i < numPlayers; i++){
        estimatesObj[i].playerNumber = i; // useful later when we pass these objects into estimateWinners
        estimatesObj[i].estimate =  document.getElementById(a + 'PlayerEstimate' + (i + 1)).value;
        var currSentence = document.getElementById('PlayerEstimated' + (i + 1));
        currSentence.innerText = playerlist[i].getName() + " estimated " + estimatesObj[i].estimate + ".";
        currSentence.style.visibility = 'visible';
    }
    
    switchToEst('EstimationResults');
    var t = setTimeout('RevealEstimationResultsWinner(event)', 5000);   //waits five seconds, reveals winner, etc
}

function findWinners(estimateDiffs, bestGuess, realAnswer) {
    winners = new Array();
    var j = 0;
    for(i = 0; i < numPlayers; i++) {
        if(estimateDiffs[i] == bestGuess) {
            winners[j] = i;
            j++;
        }
    }
    estWinners = new Array();
    for(i = 0; i < winners.length; i++) {
        estWinners[i] = playerlist[winners[i]];
    }
    return estWinners;
}

function getEstimateDiffs(estimsArray, realAnswer) {
    estimateDiffs = new Array();
    for(i = 0; i < numPlayers; i++) {
        estimateDiffs[i] = Math.abs(estimsArray[i] - realAnswer);
    }
    return estimateDiffs;
}

function findBestGuess(diffsArray) {
    var bestGuess;
    for(i = 0; i < numPlayers; i++) {
        if(i == 0 || diffsArray[i] < bestGuess) {
            bestGuess = diffsArray[i];
        }
    }
    return bestGuess;
}

function findActualGuess(bestGuess, estimsArray, diffsArray) {
    var actGuess;
    for(i = 0; i < numPlayers; i++) {
        if(diffsArray[i] == bestGuess) {
            return estimsArray[i];
        }
    }
    return -1;
}

function RevealEstimationResultsWinner(event)
{
    estims = new Array();
    for(i = 0; i < numPlayers; i++) {
        estims[i] = estimatesObj[i].estimate;
    }
    sendGuessesJS(estims);
    var estimateDiffs = getEstimateDiffs(estims, estimateCount);
    var bestGuess = findBestGuess(estimateDiffs);
    var actGuess = findActualGuess(bestGuess, estims, estimateDiffs);
    estimationWinners = findWinners(estimateDiffs, bestGuess, estimateCount);
    
    // Makes WinnerAvatars visible
    for(i = 0; i < estimationWinners.length; i++){
        var curAvtID = 'winnerAvatar' + (i + 1);
		var currAvatar = document.getElementById(curAvtID);
        changeAvatarSpriteImage(estimationWinners[i].avatar, SPRITE_57_OFFSET, curAvtID);
        currAvatar.style.visibility = 'visible';
    }
      
    //Generate WinnerAnnouncement, make it visible
    var WinnerAnnounce = estimationWinners[0].getName();
    for(i = 1; i < estimationWinners.length; i++){
        WinnerAnnounce = WinnerAnnounce + " and " + estimationWinners[i].getName();
    }
    WinnerAnnounce = WinnerAnnounce + "! ";
    if(estimationWinners.length > 1){WinnerAnnounce = WinnerAnnounce + " It's a tie!";}
    document.getElementById('winnerAnnouncement').innerText = WinnerAnnounce;
    document.getElementById('winnerAnnouncement').style.visibility = 'visible';
    
    //GenerateWinnerExplanation, make it visible
    var winnerExplanation = estimationWinners[0].getName();
    for(i = 1; i < estimationWinners.length; i++){
        winnerExplanation = winnerExplanation + " and " + estimationWinners[i].getName();
    }
    winnerExplanation = winnerExplanation + ": Share your estimation strategy with others!";
    document.getElementById('winnerExplanation').innerText = winnerExplanation;
    document.getElementById('winnerExplanation').style.visibility = 'visible';
    get('forwardButtonEst2').style.visibility = 'visible';
    // Send points won to database
    var pointsWon = ES_START_POINTS - bestGuess;  // perfect estimate wins 30 points
    if(pointsWon < ES_MIN_POINTS){pointsWon = ES_MIN_POINTS;}
    for(var i = 0; i < estimationWinners.length; i++){
        estimationWinners[i].addToScore(pointsWon);
        //playerlist[estimationWinners[i].playerNumber].addToScore(pointsWon);
    }
	estCurWinner = -1;
}

function clearAndReturnToEstimates(event)
{
    clearInterval(estimateTimer);
    for(var i = 1; i < 5; i++){    // clears estimates, secretcover images
        document.getElementById('PlayerEstimate' + i).value = "";
        document.getElementById('OpenPlayerEstimate' + i).value = "";
        document.getElementById('SecretCover' + i).style.visibility = 'hidden';
    }
    backToEstimates(event);
}

function clearAndReturnToGames(event) {
	vVanObj.clearTimer();
	showElem("vvPassTitle", false);
	gotoGames(event);
}

function showElem(elemName, hide) {
	var hideStr = "hidden";
	if(hide) {
		hideStr = "visible";
	}
	get("vvPassTitle").style.visibility = hideStr;
}


function backToEstimates(event)
{
    hideEstimationErrorMessages(event);
    if (secretMode) { makeSecretEstimates(event)
    } else { makeOpenEstimates(event)
    }
}


function hideEstimationErrorMessages(event)
{
    document.getElementById("EstimateError").style.visibility = 'hidden';
    document.getElementById("OpenEstimateError").style.visibility = 'hidden';
}

function showEstimationErrorMessages(event)
{
    document.getElementById("EstimateError").style.visibility = 'visible';
    document.getElementById("OpenEstimateError").style.visibility = 'visible';
}

function isEmpty(val) {
	if (val == null) {
		return true;
	}
	if (val.length == 0) {
		return true;
	}
	return false;
}

function isPositiveInteger(val)
{
      if(val==null){return false;}
      if (val.length==0){return false;}
      for (var i = 0; i < val.length; i++) {
            var ch = val.charAt(i)
            if (ch < "0" || ch > "9") {
            return false;
            }
      }
      return true;
}


function CounterMinus1(event) {
    CounterMinus(event,1);
}

function CounterPlus1(event) {
    CounterPlus(event,1);
}

function CounterMinus2(event) {
    CounterMinus(event,2);
}

function CounterPlus2(event) {
    CounterPlus(event,2);
}

function setupAppropriateAdj(event)   // as more Adj or Nouns are added, this function should be changed to reflect new combinations
{
    appropriateAdj[0] = new Array(1,1,1,1,1,1,1,1,1);  // This is the one adj ("") appropriate for all nouns, so all are set to True
    
    for(var i = 1; i < EstimationAdjectives.length; i++){
        appropriateAdj[i] = new Array(1,0,0,1,1,0,0,0,1);
    }
}


function disableInvalidNouns(event)
{
    // find adj value
    var adjValue = document.getElementById('adjectivepopup').value;
    var adjNumber;
    for(var i = 0; i < EstimationAdjectives.length;i++){
        if(EstimationAdjectives[i] == adjValue){
            adjNumber = i;
        }
    }

    for(var i = 0; i < EstimationNouns.length; i++){
        document.getElementById("nounpopup").options[i].disabled = !(appropriateAdj[adjNumber][i]); 
    }
}

function disableInvalidAdjs(event)
{
    // find noun value
    var nounValue = document.getElementById('nounpopup').value;
    var nounNumber;
    for(var i = 0; i < EstimationNouns.length;i++){
        if(EstimationNouns[i] == nounValue){
            nounNumber = i;
        }
    }

    for(var i = 0; i < EstimationAdjectives.length; i++){
        document.getElementById("adjectivepopup").options[i].disabled = !(appropriateAdj[i][nounNumber]); 
    }
           
}

function switchToEst(a) 
{
    var elemA = document.getElementById(a);
	var view = document.getElementById('stackLayout');
    var est = document.getElementById('trafficLights');
    var est2 = document.getElementById('tl');
    est2.object.setCurrentView(elemA);
    view.object.setCurrentView(est);
	changeBgSprite(a);
}

function estBonusRound(event) {
	estCurWinner++;
	if(estCurWinner >= estimationWinners.length) {
		startEstimStat(event);
		return;
	}
	var curWinner = estimationWinners[estCurWinner];
	var winnerAvatar = curWinner.avatar;
	var winnerName = curWinner.getName();
	get("estBonusName").innerHTML = winnerName;
	get("estBonusResName").innerHTML = winnerName;
	get("estBonusResp").value = "";
	changeAvatarSpriteImage(winnerAvatar, SPRITE_57_OFFSET, "estBonusAvatar");
	changeAvatarSpriteImage(winnerAvatar, SPRITE_57_OFFSET, "estBonusResAvatar");
	estRandMins = Math.floor(Math.random()*80 + 10);
	generateQuestion();
	switchToEst('estBon');
}

//If there were 5 purple houses in 10 minutes how many would you think to see in 20 minutes?
//answer is in estimateCount
//getEstAdj, getEstNoun, getEstMin
function generateQuestion() {
	var q = "If there were " + estimateCount + " " + getEstAdj() + " " + getEstNoun() + " in " + getEstMin() + ", estimate how many you could expect to see in " + estRandMins + " " + getMinutesSuffix(estRandMins) + "?";
	get('estBonusQuest').innerHTML = q;
	get('estBonusResQuest').innerHTML = q;
}

function estBonusRoundResult(event) {
	var answer = parseInt(get("estBonusResp").value);
	var isGoodEst = isGoodEstimate(answer, true);
	var estRange = isGoodEstimate(answer, false);
	var curWinner = estimationWinners[estCurWinner];
	if(isGoodEst) {
		//code for correct
		get("estBonResTitle").innerHTML = "Good Estimate!"
		curWinner.addToScore(10);
	}else{
		get("estBonResTitle").innerHTML = "D'oh!"
	}
	get("estBonusResExpl").innerHTML = "Your response was " + answer + ", and we think a response " + estRange + " would be a good estimate.";
	addGuessJS(curWinner.getName(), get('estBonusQuest').innerHTML, answer, estRange);
	switchToEst('estBonRes');
}

function isGoodEstimate(estim, checkingAnswer) {
	var dx = .8;
	var min = Math.max(0, estimateCount - .8);
	var max = estimateCount + .8;
	var actualMins = parseInt(get('estimatetimepopup').value.charAt(0));
	var ratioMin = min / actualMins;
	var ratioMax = max / actualMins;
	if(estimateCount == 0) {
		ratio = 1/actualMins;
	}
	var minEst = Math.floor(estRandMins * ratioMin);
	var maxEst = Math.ceil(estRandMins * ratioMax);
	if (checkingAnswer) {
		return minEst <= estim && estim <= maxEst;
	}
	return "between " + minEst + " and " + maxEst;
}

function startEstimStat(event)
{
    estimateCount = 0;        //clear scores 
    for(var i = 1; i < 5; i++){    // clears estimates, secretcover images, results page
    document.getElementById('PlayerEstimate' + i).value = "";
        document.getElementById('OpenPlayerEstimate' + i).value = "";
        document.getElementById('SecretCover' + i).style.visibility = 'hidden';
        document.getElementById('winnerAvatar' +i).style.visibility = 'hidden';
        document.getElementById('PlayerEstimated' +i).style.visibility = 'hidden';
    }
    document.getElementById('winnerAnnouncement').style.visibility = 'hidden';
    document.getElementById('winnerExplanation').style.visibility = 'hidden';
	get("forwardButtonEst2").style.visibility = 'hidden';
	
    for (var i = 0; i < EstimationAdjectives.length; i++){   //hides all "ContestBegun" images;
        for(var j = 0; j < EstimationNouns.length; j++){
        var adjective = EstimationAdjectives[i];
            var noun = removeSpaces(EstimationNouns[j]);  // for "Gas Stations"
            if(document.getElementById(noun) != undefined){
                document.getElementById(noun).style.visibility = 'hidden';
            }
        }
    }
    addNavActionJS("estimation station", "");
    switchToEst('GuessSelection');
}

//Google Maps Code
//*********************************************************************************

function initializeGoogleMapsPage(isNewTrip)
{
    gmap = this;
   	var latlng = new google.maps.LatLng(37.45, -122.15);
	var initialLocation;
	var myOptions = {
	  zoom: 12,
      center: latlng,
      navigationControl:true,
      navigationControlOptions: {
            style: google.maps.NavigationControlStyle.SMALL
      },
      scaleControl:true,
      mapTypeControl:true,
      mapTypeControlOptions: {
            style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
      },
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    var elem = document.getElementById("map_canvas");
    var map = new google.maps.Map(elem, myOptions);

    //Tries to found out the current position, with a method being passed in that is called
    //once the position is found.
    this.getCurrentPosition = function(posFoundMethod) {
        browserSupportFlag = true;
        if(navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(posFoundMethod, function() {
                handleNoGeolocation(browserSupportFlag);
            });
        } else if (google.gears) {
            var geo = google.gears.factory.create('beta.geolocation');
            geo.getCurrentPosition(posFoundMethod, function() {
                handleNoGeoLocation(browserSupportFlag);
            });
        } else {
            browserSupportFlag = false;
            handleNoGeolocation(browserSupportFlag);
        }
    }
    
    if(isNewTrip) {
        this.getCurrentPosition(initialPositionFound);
    }
    var marker;
    var that = this;
    this.geocoder = new google.maps.Geocoder();
    this.checkins = new Array();
    var infoWindow = new google.maps.InfoWindow();
    google.maps.event.addListener(map, 'click', function(event) {
        placeMarker(event.latLng, false);
    });
    
    // Create the DIV to hold the control and call the HomeControl()
    // constructor passing in this DIV.
    var homeControlDiv = document.createElement('DIV');
    var homeControl = new CustomControl(map, homeControlDiv, undefined, undefined);

    homeControlDiv.index = 1;
    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(homeControlDiv);
    var onmapselect = true;
    //gmap.checkResize();
    document.onkeydown = keyListener;
    
    //Getters and setters for gmap stuff
    this.getGeocoder = function () {
        return that.geocoder;
    }
    
    this.getStartMarker = function () {
        return that.startMarker;
    }
    
    this.getEndMarker = function() {
        return that.endMarker;
    }
    
    this.setStartMarker = function(newMark, newMarkAddr) {
        that.startMarker = newMark;
        that.startMarker.markAddr = newMarkAddr;
    }
    
    this.setEndMarker = function(newMark, newMarkAddr) {
        that.endMarker = newMark;
        that.endMarker.markAddr = newMarkAddr;
    }
    
    this.getMainRoute = function() {
        return that.mainRoute;
    }
    
    this.setMainRoute = function(mainRte) {
        that.mainRoute = mainRte;
        that.checkins = new Array();
        addToCheckIns(mainRte);
        //This is where we will add to the database as well in updating the session
        var startposll = that.getStartMarker().getPosition();
        var endposll = that.getEndMarker().getPosition();
        updateTripInfoJS(startposll, endposll);
    }
    
    this.getMainDistance = function() {
        return getRouteDistance(that.getMainRoute());
    }
    
    this.getRouteDistance = function(routeObj) {
        return calculateMiles(routeObj);
    }
    
    this.getMainTimeInSeconds = function() {
        return getRouteTimeInSeconds(that.getMainRoute());
    }
    
    this.getRouteTimeInSeconds = function(routeObj) {
        return calculateTime(routeObj);
    }
    
    this.getMainTimeInHoursMinSecs = function() {
       return getRouteTimeInHoursMinSecs(that.getMainRoute());
    }
    
    this.getRouteTimeInHoursMinSecs = function(routeObj) {
        var secs = calculateTime(routeObj);
        var hours = Math.floor(secs/3600);
        var secsLeft = secs - hours*3600;
        var minutes = Math.floor(secsLeft/60);
        secsLeft = secsLeft - minutes*60;
        return new Array(hours, minutes, secsLeft); 
    }
    
    //method that will place a marker at a given location
    //In this method you must specify whether its the starting location or not
    this.placeMarker = function (location, isStart) {
        if(isStart) {
            marker = gmap.getStartMarker();
        }else{
            marker = gmap.getEndMarker();
        }
        if(marker) {
            marker.setMap(null);
        }
        marker = new google.maps.Marker({
            position: location, 
            draggable: true,
            map: map
        });
        var markerAddr;
        codeLatLng(location, isStart);
        if(isStart) {
            gmap.setStartMarker(marker, markerAddr);
        }else{
            gmap.setEndMarker(marker, markerAddr);
        }
        map.setCenter(location);
    }
    
    this.codeLatLng = function (loc, isStart) {
        geocoder.geocode({'latLng': loc}, function(results, status) {
        var prefix = "Starting point";
        if(!isStart) {
            prefix = "Destination";
        }
        if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                markerAddr = results[0].formatted_address;
                if(isStart) {
                    that.setStartMarker(that.getStartMarker(), markerAddr);
                }else{
                    that.setEndMarker(that.getEndMarker(), markerAddr);
                }
                infoWindow.setContent(prefix + ": " + markerAddr);
                infoWindow.open(map, marker);
            }
        } else {
            setInnerHTML("destination_miles1", getGameDescription());
            pageObj.setCheckinState(false);
        }
        });
    }
    
    this.addCheckIn = function() {
        getCurrentPosition(currentPositionFound);
    }
    
    this.figureOutDirections = function(startlatLng, endlatLng, routeFndMethod) {
        var directionsService = new google.maps.DirectionsService();
        var requestDir = { 
            origin: startlatLng, 
            destination: endlatLng, 
            travelMode: google.maps.DirectionsTravelMode.DRIVING, 
            unitSystem: google.maps.DirectionsUnitSystem.IMPERIAL, 
            provideRouteAlternatives: true 
        }; 
        directionsService.route(requestDir, routeFndMethod);
    }
        
    function keyListener(e) {
        if(!e) {
            e = window.event;
        }
        if(e.keyCode == 13 && that.onmapselect) {
            goToView2(e);
        }
    }

    this.clearKeyListener = function() {
	that.onmapselect = false;   
    }
    
    function calculateMiles(directionsObj) {
        var miles = 0;
        var route = directionsObj.routes[0];
        var numPlusUnit = route.legs[0].distance.text;
        var spacePos = numPlusUnit.indexOf(" ");
        var commaPos = numPlusUnit.indexOf(",");
        numPlusUnit = numPlusUnit.slice(0, spacePos);
        if(commaPos >= 0) {
        	numPlusUnit = numPlusUnit.slice(0, commaPos) + numPlusUnit.slice(commaPos+1);
        }
        return Number(numPlusUnit);
    }
    
    function getMainRouteLeg(directionsObj) {
        return directionsObj.routes[0].legs[0];
    }
    
    function calculateTime(directionsObj) {
        var seconds = 0;
        var route = getMainRouteLeg(directionsObj);
        return Number(route.duration.value);
    }
    
    function addToCheckIns(routeObj) {
        var checkInObj = new function() {
            this.route = routeObj;
            this.date = new Date();
            var that = this;
            
            this.getDistanceTravelled = function() {
                return gmap.getMainDistance() - gmap.getRouteDistance(that.route);
            }
            
            this.getGoogleMinutesElapsed = function() {
                var secsDiff = gmap.getMainTimeInSeconds() - gmap.getRouteTimeInSeconds();
                return secsDiff/60;
            }
            
            this.getActualMinutesElapsed = function() {
                var millisE = calculateMillisElapsed(that.date);
                return millisToMins(millisE);
            }
        }();
            
        that.checkins.push(checkInObj);
        if(!localStorage.numCheckIns) {
            localStorage.numCheckIns = 0;
        }
        var ind = localStorage.numCheckIns;
        var cIn = checkInObj;
        localStorage['checkins'+ind+'miles'] = cIn.getDistanceTravelled();
        localStorage['checkins'+ind+'mins'] = cIn.getActualMinutesElapsed();
        localStorage['checkins'+ind+'point'] = getMainRouteLeg(routeObj).start_location;
        addCheckinsJS(getMainRouteLeg(routeObj).start_location);
        localStorage.numCheckIns = Number(localStorage.numCheckIns)+1;
        //This is where we are going to store info into the database...addcheckin
    }
    
    this.getCheckIns = function() {
        return that.checkins;
    }
    
    function initialPositionFound(position) {
        initialLocation = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
        google.maps.event.trigger(map, 'resize');
		map.setZoom( map.getZoom() );
        map.setCenter(initialLocation);
        placeMarker(initialLocation, true);
    }
    
    function currentPositionFound(position) {
        initialLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
        
        figureOutDirections(initialLocation, gmap.getEndMarker().getPosition(), checkInRouteFound);
    }
    
    this.checkInRouteFound = function(result) {
        addToCheckIns(result);
    }
    
    /**
    * Google Map Overlays --------------
    * Controls for making sure that we can set the start and the end controls for the map
    */

    // Define a property to hold the start and end state
    CustomControl.prototype.start_ = null;
    CustomControl.prototype.end_ = null;

    // Define setters and getters for these properties
    CustomControl.prototype.getStart = function() {
        return this.start_;
    }

    CustomControl.prototype.getEnd = function() {
        return this.end_;
    }

    CustomControl.prototype.setStart = function(start) {
        this.start_ = start;
        placeMarker(start, true);
    }

    CustomControl.prototype.setEnd = function(end) {
        this.end_ = end;
        placeMarker(end, false);
    }

    function CustomControl(map, div, start, end) {

        // Get the control DIV. We'll attach our control UI to this DIV.
        var controlDiv = div;

        // We set up a variable for the 'this' keyword since we're adding event
        // listeners later and 'this' will be out of scope.
        var control = this;

        // Set the two properties upon construction
        control.start_ = start;
        control.end_ = end;

        // Set CSS styles for the DIV containing the control. Setting padding to
        // 5 px will offset the control from the edge of the map
        controlDiv.style.padding = '5px';

        // Set CSS for the control border
        var setStartUI = document.createElement('DIV');
        setStartUI.style.backgroundColor = 'white';
        setStartUI.style.borderStyle = 'solid';
        setStartUI.style.borderWidth = '2px';
        setStartUI.style.cursor = 'pointer';
        setStartUI.style.textAlign = 'center';
        setStartUI.title = 'Click to set the map to Start';
        controlDiv.appendChild(setStartUI);

        // Set CSS for the control interior
        var setStartText = document.createElement('DIV');
        setStartText.innerHTML = 'Change Start';
        setStartText.style.fontFamily = 'Arial,sans-serif';
        setStartText.style.fontSize = '12px';
        setStartText.style.paddingLeft = '4px';
        setStartText.style.paddingRight = '4px';
        setStartUI.appendChild(setStartText);
  
        // Setup the click event listener for Home:
        // simply set the map to the control's current home property.
        google.maps.event.addDomListener(setStartUI, 'click', function() {
            var newHome = map.getCenter();
            control.setStart(newHome);
        });
    }
}

function handleNoGeolocation(errorFlag) {
    if (errorFlag == true) {
        //alert("Geolocation service failed.");
        var newyork = new google.maps.LatLng(40.69847032728747, -73.9514422416687);
	initialLocation = newyork;
    } else {
        alert("Your browser doesn't support geolocation. We've placed you in Siberia.");
	var siberia = new google.maps.LatLng(60, 105);
        initialLocation = siberia;
    }
    map.setCenter(initialLocation);
  }

function get(element) {
    return document.getElementById(element);
}

function decideIfContinuing(event)
{
    if(isContinuingSession()) {
        $("#map_canvas").show();
        loadGame(event);
    }else{
    	localStorage.clear();
    	clearPlayerInfo();
        userSelection(event);
        pageObj.setCheckinState(false);
    }
}

function isContinuingSession() {
	userid = getCookie("userid");
	sessionid = localStorage.currentsid;
	return userid != null && !isNaN(Number(userid)) && sessionid != null && !isNaN(Number(sessionid));
}

function loadGame(event) {
    try {
    	initializeGoogleMapsPage(false);
    }catch (ReferenceError) {
    	pageObj.mapsNotWorking();
    }
    currentsid = localStorage.currentsid;
    addNavActionJS("begin", currentsid);
    if(localStorage.startLatLng && !isNaN(localStorage.player0minguess)) {
    	var startlat = parseLat(localStorage.startLatLng);
    	var startlng = parseLng(localStorage.startLatLng);
    	var endlat = parseLat(localStorage.endLatLng);
    	var endlng = parseLng(localStorage.endLatLng);
    }else{
    	pageObj.setCheckinState(false);
    }
    try {
    	gmap.placeMarker(new google.maps.LatLng(startlat, startlng), true);
   		gmap.placeMarker(new google.maps.LatLng(endlat, endlng), false);
    	gmap.figureOutDirections(gmap.getStartMarker().getPosition(), gmap.getEndMarker().getPosition(), mainRouteLoaded);
    	loadPlayerInfo();
    }catch (ReferenceError){
    	loadPlayerInfo();
    	setInnerHTML('destination_miles1', getGameDescription());
    }
    
    switchTo('continue_trip');
    
    function mainRouteLoaded(result, status) {
        if(status == google.maps.DirectionsStatus.OK) {
            mainRouteFound(result, 'destination_miles1', "start over.");
        }
    }
}

function setInnerHTML(id, htmlStr) {
	get(id).innerHTML = htmlStr;
}

function getGameDescription() {
	var timeStr = localStorage.gameStartTime;
   	var ind = timeStr.indexOf("(");
   	timeStr = timeStr.slice(0, ind-1);
   	var wholeStr = "Game Started: " + timeStr + "<br>Player 1: " + playerlist[0].getName() + " with " + playerlist[0].score + " points<br>";
   	for(var i = 1; i < numPlayers; i++) {
   		wholeStr+="Player "+(i+1)+": " + playerlist[i].getName() + " with " + playerlist[i].score + " points<br>";
   	}
   	return wholeStr;
}

function parseLat(latitlng) {
    var index = latitlng.indexOf(",");
    return Number(latitlng.slice(1, index));
}

function parseLng(latitlng) {
    var index = latitlng.indexOf(",");
    var lng = latitlng.slice(index+1, latitlng.length-1).trim();
    return Number(lng);
}

function loadPlayerInfo() {
    numPlayers = parseInt(localStorage.numPlayers);
    pageObj.loadedinfo = true;
    pageObj.allowCheckins();
    for(var i = 0; i < numPlayers; i++) {
        retrievePlayerFromLocalStorage(i);
        showAvatar("", i, 13);
        showPlayerName("", i, 13);
    }
    if(isDefined(localStorage.driversAge)) {
    	driversAge = localStorage.driversAge;
    }
    restoreMainHoursFields();
}

function clearPlayerInfo() {
    for(var i = 0; i < MAX_PLAYERS; i++) {
        playerlist[i].name = "";
        playerlist[i].avatar = "";
        playerlist[i].score = 0;
        playerlist[i].mainguessmiles = 0;
        playerlist[i].mainguessmins = 0;
    }
}

function clearAndMoveToUsers() {
    localStorage.clear();
    clearPlayerInfo();
    userSelection(event);
}

function goToHallOfFame(event) {
	getHallOfFameJS();
	switchTo('HallOfFame');
}

function goToView1(event) {
    initializeGoogleMapsPage(true);
    addNavActionJS("r we there yet", "");
    switchTo('api_view1');
}

function goToView2(event) {
    var text = get("map_destination").value;
    if(text && gmap.getStartMarker()) {
        geocodeDestination();
        get('map_destination').value = "";
        get('map_start').innerHTML = "Is this the correct location?, tap Done to continue, or try another place";
        return;
    }else if(!gmap.getStartMarker() || !gmap.getEndMarker()) {
        get('map_start').innerHTML = "Please click on your destination first";
        return;
    }
    gmap.figureOutDirections(gmap.getStartMarker().getPosition(), gmap.getEndMarker().getPosition(), mainRouteView2);
    // Set the current view of a StackLayout
    switchTo('api_view2');
    
    function mainRouteView2(result, status) {
        if(status == google.maps.DirectionsStatus.OK) {
            mainRouteFound(result, 'destination_miles', "go back.");
        }
    }
    
    function geocodeDestination(event) {
        var address = get("map_destination").value;
        gmap.getGeocoder().geocode( { 'address': address}, function(results, status) {
            if(status == google.maps.GeocoderStatus.OK) {
                gmap.placeMarker(results[0].geometry.location,false);
            }else{
                alert("Geocode was not successful for the following reason: " + status);
            }
        });
    }

}

function mainRouteFound(result, fieldName, help) {
    gmap.setMainRoute(result);
    localStorage.startLatLng = gmap.getStartMarker().getPosition();
    localStorage.endLatLng = gmap.getEndMarker().getPosition();
    var startText = "Start: " + stripAddressOut(gmap.getStartMarker().markAddr) + "<br>";
    var endText = "End: " + stripAddressOut(gmap.getEndMarker().markAddr) + "<br>";
    get(fieldName).innerHTML = startText+endText+"If this is not correct, please "+help;
}


function stripAddressOut(addrStr) {
    var index = addrStr.indexOf(",");
    var lindex = addrStr.lastIndexOf(",");
    var matches = addrStr.match(/,/gi);
    if(matches.length > 2) {
        return addrStr.slice(index+2, lindex);
    }
    return addrStr;
}

function stripToCityState(addrStr) {
    var addrOut = stripAddressOut(addrStr);
    return addrOut.slice(0, addrOut.length-6);
}

function switchTo(viewName) {
    var stackLayout = document.getElementById('stackLayout').object; // Replace with id of StackLayout
    stackLayout.setCurrentView(viewName); // Replace with id of new view (or the view element itself)
    changeBgSprite(viewName);
}

function backtoapiview1(event) {
    switchTo('api_view1');
}

//End Google Maps Code
//**************************************************************************************
//Start Victory Van Code
function gotoVictoryVan(event) {
	addNavActionJS("initial victory van", "");
	switchTo('victoryVanStart');
}

function checkIfAgesNeeded(event) {
	var agesSet = driversAge > 0;
	if(agesSet && localStorage.numPlayers == numPlayers) {
		moveToInternalHomepage(event);
	}else{
		askAges(event);
	}
}

function askAges(event)
{
    setEstimateAvatarsFull(event, "vv", null, 1);
    //setVVPlayerEstimatesByDefault();
    switchTo('vVanAgeQuestions');
}

function setVVPlayerEstimatesByDefault() {
    for(var i = 1; i <=4; i++) {
        get("vvPlayerEstimate"+i).value = "";
    }
    get("vvdriversAge").value = "";
}

function moveToNextVVQuestion(event)
{
	changeLabelText("vvPassTo", "Loading the next question!");
    vVanObj.retrieveNextQuestion();
    //getQuestionJS();
}

function proceedToInternalHomepage(event)
{
    var driverAge = get('vvdriversAge');
    if(AnAnswerIsEmpty("vv", 1) || isEmpty(driverAge.value)) {
		internalHomepage(event);
	} else if(AllAnswersAreIntegers("vv", 1) && isPositiveInteger(driverAge.value)) {
        storeAges("vv", 1, driverAge.value);
        internalHomepage(event);
    }else{
        changeLabelText("EstimateError30", "All ages must be positive numbers");
        ClearNonValidEstimates("vv", 1);
        if(!isPositiveInteger(driverAge.value)) {
            driverAge.value = "";
        }
    }
}

function startVictoryVan(event) {
    vVanObj = new VictoryVanObject();
    var minIDs = ["vvPassMinID", "vvQMinID"];
    var secsIDs = ["vvPassSecsID", "vvQSecsID"];
	var secs = get('vvpopup').value;
	vVanObj.initialize(secs, minIDs, secsIDs);
	addNavActionJS("victory van", secs);
	preparePassPhoneToPage();
}

function preparePassPhoneToPage() {
    vVanObj.setNextPlayer();
    changeLabelText("vvPassTo", "Pass the phone to");
    switchTo('vvPassPhoneTo');
}

function answerAndMoveOn(event) {
    vVanObj.checkAnswer();
    preparePassPhoneToPage();
}

function storeAges(a, startIndex, driverAge) {
    for(var i = startIndex; i < numPlayers+startIndex; i++) {
        playerlist[i-startIndex].setAge(get(a+"PlayerEstimate"+i).value);
        playerlist[i-startIndex].vvReset();
    }
    driversAge = driverAge;
}

function setAvatar(idImageName, i) {
    var cAvatar = get(idImageName);
    changeAvatarSpriteImage(playerlist[i].avatar, SPRITE_57_OFFSET, idImageName);
}
/* End Victory Van Code */

function selectAvatar1(event)
{
    selectAvatar(event, 1);
}

function selectAvatar2(event)
{
    selectAvatar(event, 2);
}

function selectAvatar3(event)
{
    selectAvatar(event, 3);
}

function selectAvatar4(event)
{
    selectAvatar(event, 4);
}

function selectAvatar(event, i)
{
    currPlayerToChangeAvatar = 'avatar' + i;
    loadAvatarSprites();
    addNavActionJS("avatar", playerlist[i-1].name);
    switchTo('avatarSelect');
}

function loadAvatarSprites() {
	for(i = 0; i < 12; i++) {
		changeAvatarSpriteImage(AvatarFNames[i], SPRITE_50_OFFSET, 'avatar' + (i+9));
	}
}

function changeAvatar1(event)
{
    changeAvatar(event, AvatarFNames[0]);
}

function changeAvatar2(event)
{
    changeAvatar(event, AvatarFNames[1]);
}

function changeAvatar3(event)
{
    changeAvatar(event, AvatarFNames[2]);
}

function changeAvatar4(event)
{
    changeAvatar(event, AvatarFNames[3]);
}

function changeAvatar5(event)
{
    changeAvatar(event, AvatarFNames[4]);
}

function changeAvatar6(event)
{
    changeAvatar(event, AvatarFNames[5]);
}

function changeAvatar7(event)
{
    changeAvatar(event, AvatarFNames[6]);
}

function changeAvatar8(event)
{
    changeAvatar(event, AvatarFNames[7]);
}

function changeAvatar9(event)
{
    changeAvatar(event, AvatarFNames[8]);
}

function changeAvatar10(event)
{
    changeAvatar(event, AvatarFNames[9]);
}

function changeAvatar11(event)
{
    changeAvatar(event, AvatarFNames[10]);
}

function changeAvatar12(event)
{
    changeAvatar(event, AvatarFNames[11]);
}

function changeAvatar(event, fname)
{
    //selectedImage = document.getElementById('avatar'+(num+8));
    changeAvatarSpriteImage(fname, SPRITE_50_OFFSET, currPlayerToChangeAvatar);
	returnToPlayerSelect(event);
}

function returnToPlayerSelect(event)
{
    switchTo('players');
}

function drawCheckInMainChart() {
    var checkInsSoFar = gmap.getCheckIns();
    var myData = new Array();
    //for(var i = 0; i < checkInsSoFar.length; i++) {
    for(var i = 0; i < localStorage.numCheckIns; i++) {
        var cMins = localStorage['checkins'+i+'mins'];
        var cMiles = localStorage['checkins'+i+'miles'];
        if(!cMins || isNaN(cMins)) {
            cMins = 0;
        }
        if(!cMiles || isNaN(cMiles)) {
            cMiles = 0;
        }
        var singleArr = new Array(Number(cMins), Number(cMiles));
        myData.push(singleArr);
    }
    var myChart = new JSChart('chart_canvas', 'line');
    myChart.setDataArray(myData);
    var myDatas = new Array();
    var minutesEsts = convertArrayToNumbers(getGuessesFromTFields('PlayerEstimate', 13));
    var hoursEsts = convertArrayToNumbers(getGuessesFromTFields('PlayerEstimate', 9));
    for(var i = 0; i < numPlayers; i++) {
        var otherData = new Array();
        otherData.push(new Array(minutesEsts[i]+ hoursEsts[i]*60, gmap.getMainDistance()));
        myDatas[i] = otherData;
        dataName = 'name'+i;
        myChart.setDataArray(myDatas[i], dataName);
        myChart.setTooltip([minutesEsts[i] + hoursEsts[i]*60, minutesEsts[i] + hoursEsts[i]*60, dataName]);
        myDatas.push(otherData);
    }
    //myChart.setBackgroundColor('#fff');
    myChart.setAxisNameX('Minutes');
    myChart.setAxisNameY('Miles');
    myChart.setSize(GMAP_WIDTH, GMAP_HEIGHT);
    myChart.draw();
}

function switchToChart(event) {
    drawCheckInMainChart();
    addNavActionJS("graph", "");
    switchTo('time_chart');
}


function backToCheckIn(event) {
    addNavActionJS("check-in", "");
    switchTo('mainHoursPrelim');
}
