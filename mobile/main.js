/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */
 
 /*jslint browser: true, devel: true, windows: true */

//	
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//
// MACROS
var BR_POINTS_PER_CAR = 10;
var BR_ANSWERS_BEFORE_SPEED_UP = 3;  // Number of correct answers before the car speeds up
var BR_PERCENTAGE_OF_PRIMES = 0.50;  // Percentage of cars that are primes
var BR_PERCENTAGE_OF_MULTS = 0.60;
var BR_CAR_SPEEDS = new Array(10, 9, 8, 6, 5, 4, 3);  // The starting speed of the cars
var br_primes = new Array(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59);
var br_nonPrimes = new Array(4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,26,27,28,30,32,33,34,35,36,38,39,40,42,44,45,46,48,49,50,51,52,54,55,56,57,58,60);
var tl_previousGuesses = new Array();
var tl_previousLights = new Array();
var MAX_PLAYERS=4;

var EstimationAdjectives = new Array("","Black","Blue","Gold","Green","Grey","Orange", "Pink", "Purple","Red","Silver","White","Yellow")
var EstimationNouns =  new Array("Cars", "Clouds", "Gas Stations", "Houses", "Motorcycles","People","Restaurants", "Trees", "Trucks");
var EstimationTimes =  new Array("1 minute", "2 minutes", "3 minutes", "4 minutes", "5 minutes", "6 minutes", "7 minutes", "8 minutes");

// Variables
var br_primeCarsPoints = 0;
var br_carNumber = 0;
var br_carSpeed = BR_CAR_SPEEDS[Math.floor(br_primeCarsPoints / BR_POINTS_PER_CAR)];
var br_carClicked = false;
var br_primeCarsMistakes = 0;
var br_primeCarsDead = false;  // True when a player has 3 strikes in prime cars
var br_timeouts1 = new Array();
var br_timeouts2 = new Array();
var br_teimouts3;

var P  = 0;
var NP = 1; 

var PCproblem; //number
var PCguess; 
var PCanswer;
var PCvalues = new Array("PRIME","NOT PRIME");
var PCmode;
var PCmultiplier;
var PC_PRIME_MODE = 1;
var PC_EVEN_MODE = 2;
var PC_MULT_MODE = 3;


var TLanswer;
var TLeasymode = true;
var TLcurrentguess;
var TLcurrentPlayer = -1; //for traffic lights, set to -1 initially
var TLSCORE=150; // winning score for traffic lights
var TL_LOWER_PTS_BOUND = 50;
var TL_JACKPOT_PENALTY = 10;
var TLcurJackpot; //number of points for getting traffic lights
var PCcurrentPlayer = -1; //for traffic lights, set to -1 initially

var fromCity;
var toCity;
var guessArray;

var currentplayerid=0; //first player
var numPlayers=2; //total players input. the default is 2

var adminName;

//KEEP TRACK OF PREVIOUS AND NEXT SCREENS
var beforeback;
var back;
var next;
var afternext;

//KEEP TRACK OF CURRENT VIEW
var currentview;

//ADMIN
var adminname;

//USERS
var userfname;
var userlname;

//AVATARS
var currPlayerToChangeAvatar;
var selectedImage;

//GoogleMap
var gmap;

//CREATING THE PREVIOUS GUESS OBJECT
function TLGuessObject(){
    this.guess = 0;
    this.lights = new Array();
    this.challengelight = '';
    this.avatar = '';
}
var tl_guessHistory;

//CREATING THE PLAYERS OBJECT
function playerObject(){
    this.name      = ''; //playername
    this.score     = 0;  //playerscore
    this.avatar    = ''; //playeravatar
    this.admin     = 0;  //is the player an admin
    this.isplaying = 0;  //is the player playing this game
    this.mainguessmiles = 0;  //this is the player's estimation for the main game
    this.mainguessminutes = 0; //this is the player's estimation (in minutes) for the main game
    
    var that = this;
    var index = 0;
    
     this.setIndex = function(ind) {
        that.index = ind;
    }
    
    this.getIndex = function() {
        return that.index;
    }
    
    this.addToScore = function(addedPoints) {
        that.score += Number(addedPoints);
        localStorage['player'+that.getIndex()+'score'] = that.score;
        add2ScoreInDBJS(that.name, addedPoints);
    }
  
    this.getScore = function () {
        return that.score;
    }
    
    this.getMilesGuess = function() {
        return that.mainguessmiles;
    }
    
    this.setMilesGuess = function(guess) {
        that.mainguessmiles = guess;
    }
    
    this.getTimeGuess = function() {
        return that.mainguessminutes;
    }
    
    this.getTimeGuessHours = function() {
        return Math.floor(that.mainguessminutes/60);
    }
    
    this.getTimeGuessMinsLeft = function() {
        var hours = that.getTimeGuessHours();
        var minutesTaken = hours*60;
        return that.getTimeGuess()-minutesTaken;
    }
    
    this.setTimeGuess = function(guess) {
        that.mainguessminutes = guess;
    }
    
    this.setTimeGuess = function(hours, mins) {
        that.mainguessminutes = Number(hours) * 60 + Number(mins);
    }
}
var playerlist;

//CREATING AN OBJECT TO HOLD THE ANSWERS FOR THE PIT STOP GAME
function pitstopAnswersObject(){
  this.answers = new Array();
  this.scores  = new Array();
}

//CREATING AN OBJECT TO HOLD THE ANSWERS FOR THE TRAFFIC SIGNAL GAME
function tlAnswersObject(){
  this.answers = new Array();
  this.scores  = new Array();
}

//CREATING AN OBJECT TO HOLD THE ANSWERS FOR THE PRIME CARS GAME
function pcAnswersObject(){
  this.answers = new Array();
  this.scores  = new Array();
}

var pitstopobj;
var PTproblem; //number
var PTguess;

var geocoder, location1, location2, gDir;
var distanceMiles;

var inputNum = new Array(0,0,0);

var estimateCount = 0; //Keeps track of the count during estimationStation
var secretMode = true;
var estimateTimer;
var estimateTimerMin;
var estimateTimerSec;

//Creating an object to hold player estimates for EstimationStation
function estimateObj(){
  this.estimate = "";
  this.difference  = "";
  this.playerNumber = 0;
}
var estimatesObj;

//Creating an array to hold if matchup between adjectives and nouns makes sense
var appropriateAdj = new Array();

// Macros
var RED = 100;
var YELLOW = 10;
var GREEN = 1;


//DATABASE VARIABLES
var xmlhttp;
var userid;
var url="gortbackendlite.php";
var currentsid;

//GAMES LIST
var PC = 0;
var TL = 1;
var PS = 2;
var ES = 3

var games = new Array("PRIMECARS","TRAFFICLIGHTS","	TOP", "ESTIMATIONSTATION");

function load()
{
    dashcode.setupParts();
    //geocoder = new google.maps.Geocoder();
    //alert("passedsetupparts");
    setTimeout(function() { window.scrollTo(0, 1) }, 100);
    //SETUP THE PLAYER LIST
    playerlist = new Array();
    for(var j=0; j < MAX_PLAYERS; j++){
      playerlist[j] = new playerObject();
    }
    
    //SETUP THE PLAYER VARS AND OBJECTS
    pitstopobj = new Array();
    for(var i=0; i < MAX_PLAYERS; i++){
      pitstopobj[i] = new pitstopAnswersObject();
    }
    
    pcobj = new Array();
    for(var i=0; i < MAX_PLAYERS; i++){
      pcobj[i] = new pcAnswersObject();
    }
    
    //alert("setting up estimation");
    estimatesObj = new Array();
    for(var i=0; i < MAX_PLAYERS; i++){
      estimatesObj[i] = new estimateObj();
    }
    
    setupAppropriateAdj(null);
    //alert("finished load");
}

function gotoGames(event) {
    var views = document.getElementById('stackLayout');
		var about = document.getElementById('gameSelect');
		if (views && views.object && about) {
			views.object.setCurrentView(about);
		}
}

function br_makeCar() {
    br_carNumber = br_generateNumber(PCmode);
    br_carNumberText.innerText = br_carNumber;
    PCproblem = br_carNumber;

    br_frames = 360;
    for(i = 1 ; i < br_frames ; i += 3){
        br_timeouts1[i] = setTimeout("document.getElementById('br_Car').style.left = '"+(i*-1)+"px';",i*br_carSpeed);
        br_timeouts2[i] = setTimeout("document.getElementById('br_carNumberText').style.left = '"+(i*-1)+"px';",i*br_carSpeed);
    }
    br_timeouts3 = setTimeout("br_carAtEnd();",br_frames*br_carSpeed);
}

function br_generateNumber(gameMode) {
    var generateAPrime = Math.random() < BR_PERCENTAGE_OF_PRIMES;
    var generateAMultiple = Math.random() < BR_PERCENTAGE_OF_MULTS;
    var numbergened = -1;
    if(gameMode == PC_PRIME_MODE) {
        if (generateAPrime) {
            numbergened = br_primes[Math.floor(Math.random()*br_nonPrimes.length)];
        } else {
            numbergened = br_nonPrimes[Math.floor(Math.random()*br_primes.length)];
        }
    }else if(gameMode == PC_EVEN_MODE) {
        numbergened = Math.floor(Math.random()*100);
    }else{
        if(generateAMultiple) {
            while(numbergened >= 100 || numbergened < 0) {
                numbergened = PCmultiplier * randomNum(0, 12);
            }
        }else{
            while(numbergened == -1 || numbergened % PCmultiplier == 0) {
                numbergened = randomNum(0, 100);
            }
        }
    }
    return numbergened;
}

function randomNum(low, high) {
    return Math.floor(Math.random()*(Math.abs(high-low)))+Math.min(low, high)
}

function about_action(event)
{
    var views = document.getElementById('stackLayout');
    var about = document.getElementById('about');
	if (views && views.object && about) {
		views.object.setCurrentView(about);
	}
}

 
// Function to determine whether number is prime, even or a multiple
function br_isPrime(num) 
{
    // 1 is not prime
    if(PCmode == PC_PRIME_MODE) {
        for(var i = 0; i < br_primes.length; i++) {
            if(br_primes[i] == num) {
                return true;
            }
        }
    }else if(PCmode == PC_EVEN_MODE) {
        return (num%2 == 0);
    }else{
        return (num%PCmultiplier == 0);
    }
    return false;
}

function pause(millis)
{
var date = new Date();
var curDate = null;

do { curDate = new Date(); }
while(curDate-date < millis);
}


// Do something when a player makes a mistake
function br_carMistake() {
    br_primeCarsMistakes++;
    br_carClicked = true;

    if (br_primeCarsMistakes == 3) {
        br_mistakesText.innerText = "X X X";
        br_primeCarsDead = true;
        pause(100);
        
        //traffic lights scores
        pcobj[PCcurrentPlayer].score = br_primeCarsPoints;
        //overall scores
        playerlist[PCcurrentPlayer].addToScore(br_primeCarsPoints);

        
        PCpass();
    } else if (br_primeCarsMistakes == 2) {
        br_mistakesText.innerText = "X X  ";
    } else if (br_primeCarsMistakes == 1) {
        br_mistakesText.innerText = "X    ";
    } else {
        br_mistakesText.innerText = "";
    }

}

// When the car is at the end of the line
function br_carAtEnd() {

    if (Math.floor (br_primeCarsPoints / BR_ANSWERS_BEFORE_SPEED_UP / BR_POINTS_PER_CAR) < BR_CAR_SPEEDS.length) {
        br_carSpeed = BR_CAR_SPEEDS[Math.floor(br_primeCarsPoints / BR_ANSWERS_BEFORE_SPEED_UP / BR_POINTS_PER_CAR)];
    }
    if (br_carClicked == false) {
        br_carMistake();
    }
    
    br_carClicked = false;

    // Only make a new car if the player is not dead
    if (br_primeCarsDead == false) {
        br_makeCar();
    }
}

function br_primeClickHandler(event)
{
    PCguess = PCvalues[P];
    if (br_carClicked) {
        return;
    }
    if (br_isPrime(br_carNumber)) {
        PCanswer = PCvalues[P];
        br_primeCarsPoints += BR_POINTS_PER_CAR;
        br_carClicked = true;
    } else {
        PCanswer = PCvalues[NP];
        br_carMistake();
    }
    
    //Add Guess To Database
    addGuessJS(playerlist[PCcurrentPlayer+1].name,PCproblem,PCguess,PCanswer);
    br_pointsText.innerText = br_primeCarsPoints + " points!";
}


function br_nonPrimeClickHandler(event)
{   
    PCguess = PCvalues[NP];
    // alert("CLICK! " + br_carNumber);
    if (br_carClicked) {
        return;
    }
    if (!br_isPrime(br_carNumber)) {
        PCanswer = PCvalues[NP];
        br_primeCarsPoints += BR_POINTS_PER_CAR;
        br_carClicked = true;
    } else {
        PCanswer = PCvalues[P];
        br_carMistake();
    }
    
    //Add Guess To Database
    addGuessJS(playerlist[PCcurrentPlayer+1].name,PCproblem,PCguess,PCanswer);
    br_pointsText.innerText = br_primeCarsPoints + " points!";
}

function startGame(event)
{
        userSelection(event);
    
}

function figureOutDistance(event) {
        var views = document.getElementById('stackLayout');
		var about = document.getElementById('geography');
		if (views && views.object && about) {
			views.object.setCurrentView(about);
		}
         /*if (navigator.geolocation) {
            var position = navigator.geolocation.getCurrentPosition(showMap);
        } else {
            //alert("no geolocation feature in this browser");
            
        }*/
}


function showMap(position) {
    codeLatLng(position.coords.latitude, position.coords.longitude);
}


function backToHome(event)
{
    var views = document.getElementById('stackLayout');
	var about = document.getElementById('gameSelect');
	if (views && views.object && about) {
		views.object.setCurrentView(about);
	}
}

function gotoScores(event){
    var views    = document.getElementById('stackLayout');
    var next     = document.getElementById('scores');
  
    //GO TO NEXT SCREEN
    if (views && views.object && next) {
        displayScores();
        views.object.setCurrentView(next);		
    }
}


function calculateDistances(event)
{
    var views = document.getElementById('stackLayout');
    var about = document.getElementById('distances');
    if (views && views.object && about) {
			views.object.setCurrentView(about);
    }
        
    var startVal = document.getElementById("startCity");	// replace with ID of text field
    startVal = startVal.value;
    
    var endVal = document.getElementById("endCity");	// replace with ID of text field
    endVal = endVal.value;
    
    fromCity = startVal 
    toCity = endVal;
    document.getElementById("fromTo").innerText = fromCity + " and " + toCity;
}

/*
function addUsertoDatabase(){

  addUserJS(userfname,userlname);
  setTimeout("createSessionJS()",1000);
}
*/

function logintoDatabase(){
  loginJS(userfname,userlname);
}

function userSelection(event)
{
    var views = document.getElementById('stackLayout');
    var about = document.getElementById('users');
    if (views && views.object && about) {
        views.object.setCurrentView(about);
    }
}

function playerSelection(event)
{
    userfname = document.getElementById('firstname').value;
    userlname = document.getElementById('lastname').value;
    
    localStorage.gameStartTime = new Date();
    logintoDatabase();
    document.getElementById('name1').value = userfname;
	document.getElementById('name2').value = "P2";
	document.getElementById('name3').value = "P3";
	document.getElementById('name4').value = "P4";
        
    var views = document.getElementById('stackLayout');
    var about = document.getElementById('players');
    if (views && views.object && about) {
        views.object.setCurrentView(about);
    }
}


function selectPlayers(event)
{
    numPlayers = Number(document.getElementById('popup').value);
    
    for(var i = 3; i <= 4; i++) {
        showPlayerInSelect(i, i <= numPlayers);
    }
}

function showPlayerInSelect(num, shouldShow) {
    var visibleTag = convertToVisibleTag(shouldShow);
    get('name'+num).style.visibility = visibleTag;
    get('avatar'+num).style.visibility = visibleTag;
}

function convertToVisibleTag(shouldShow) {
    if(shouldShow) {
        return 'visible';
    }
    return 'hidden';
}


var callno = 1;

function internalHomepage(event)
{        
    // Populate Estimation Station Adjective List
    for (var i = 0; i < EstimationAdjectives.length; i++){      
        adjectivepopup.options[i].text = EstimationAdjectives[i];
        adjectivepopup.options[i].value = EstimationAdjectives[i];
    }

    // Populate Estimation Station Noun List
    for (var i = 0; i < EstimationNouns.length; i++){      
        nounpopup.options[i].text = EstimationNouns[i];
        nounpopup.options[i].value = EstimationNouns[i];
    }

    // Populate Estimation Station EstimationTimes List
    for (var i = 0; i < EstimationTimes.length; i++){      
        estimatetimepopup.options[i].text = EstimationTimes[i];
        estimatetimepopup.options[i].value = EstimationTimes[i];
    }

    var views = document.getElementById('stackLayout');
    var about = document.getElementById('gameSelect');
    
    if (views && views.object && about) {
        views.object.setCurrentView(about);
    }
}

function moveToMainGuess(event) {
    storePlayerInfo(event);
    //function setEstimateAvatars(event, a, btnnamesarray, startIndex) {
    var buttonnames = new Array("button2", "button39", "button40", "button41");
    setEstimateAvatarsFull(event, "", buttonnames, 5);
    switchTo('distances');
}

function switchToMainHoursGuess(event) {
    var buttonnames = new Array("button44", "button45", "button46", "button47");
    setEstimateAvatarsFull(event, "", buttonnames, 13);
    var hournames = new Array("PlayerEstimate9", "PlayerEstimate10", "PlayerEstimate11", "PlayerEstimate12");
    var hourscaps = new Array("HoursCap1", "HoursCap2", "HoursCap3", "HoursCap4");
    var minscaps = new Array("MinsCap1", "MinsCap2", "MinsCap3", "MinsCap4");
    setAdditionalParamtersFull(event, hournames, hourscaps, minscaps);
    get('mainHoursText').innerText = "The distance is " + gmap.getMainDistance() + " miles. " + get('mainHoursText').innerText;
    switchTo('mainHours');
}    
    
function storePlayerInfo(event) {
    clearPlayerListFromLocalStorage();

    //GET ALL THE PLAYER INFO BEFORE GOING TO THE INTERNAL GAMES HOMEPAGE
    //ALSO LOAD THE PLAYER SELECTION POPUP FOR TRAFFIC LIGHTS
    for (var i = 0; i < numPlayers; i++){
        playerlist[i].name   = document.getElementById('name' + (i+1)).value;
        playerlist[i].avatar = document.getElementById('avatar' + (i+1)).src;
        playerlist[i].setIndex(i);
        vgPlayerPopup.options[i].text = document.getElementById('name' + (i+1)).value;
        vgPlayerPopup.options[i].value = document.getElementById('name' + (i+1)).value;
      
        //SEND PLAYER NAME TO DATABASE
        //alert('session id before addPlayerJS is ' + currentsid);
        if(i==0 && userfname == playerlist[i].name) {
	    updatePlayerAvatarJS(playerlist[i].name, playerlist[i].avatar);
        }else{
	    addPlayerJS(playerlist[i].name, playerlist[i].avatar);
	}
    }
}

function clearPlayerListFromLocalStorage() {
    for (var i = 0; i < MAX_PLAYERS; i++) {
        localStorage['player'+i+'name']=null;
        localStorage['player'+i+'score']=null;
        localStorage['player'+i+'avatar']=null;
        localStorage['player'+i+'mileguess']=null;
        localStorage['player'+i+'minguess']=null;
    }
    localStorage.numPlayers = 0;
}

function addPlayerInfoToLocalStorage(index) {
    localStorage['player'+index+'name'] = playerlist[index].name;
    localStorage['player'+index+'avatar'] = playerlist[index].avatar;
    localStorage['player'+index+'score'] = playerlist[index].score;
    localStorage['player'+index+'mileguess'] = playerlist[index].mainguessmiles;
    localStorage['player'+index+'minguess'] = playerlist[index].mainguessminutes;
}

function retrievePlayerFromLocalStorage(index) {
    playerlist[index].name = localStorage['player'+index+'name'];
    playerlist[index].avatar = localStorage['player'+index+'avatar'];
    playerlist[index].score = Number(localStorage['player'+index+'score']);
    playerlist[index].mainguessmiles = Number(localStorage['player'+index+'mileguess']);
    playerlist[index].mainguessminutes = Number(localStorage['player'+index+'minguess']);
}

function getCurrentPlayerName(){
  return players[currentplayerid].name;
}

function getCurrentPlayerAvatar(){
  return players[currentplayerid].avatar;
}

function TLpass() {
    if (TLcurrentPlayer < numPlayers-1) {
        var nextName = playerlist[TLcurrentPlayer+1].name;
        if (nextName == adminName) {
            TLcurrentPlayer++;
            TLpass();
            return;
        }
        // Pass to next player
        playerlist[TLcurrentPlayer+1].isplaying=1;
        document.getElementById('TLnextName').innerText =nextName;
        document.getElementById('TLnextAvatar').src = playerlist[TLcurrentPlayer+1].avatar;
        TLcurrentPlayer++;
        var nextView = document.getElementById('TLpassScreen');
        setCurrentViewTL(nextView);
    } else {
        TLcurrentPlayer = -1;
        TLpass();
    }
}

function setCurrentViewTL(a) 
{
    var view = document.getElementById('stackLayout');
    var tl = document.getElementById('trafficLights');
    var sl2= document.getElementById('tl');
    sl2.object.setCurrentView(a);
    view.object.setCurrentView(tl);
}

function startTrafficLights(event)
{
    var tlHome = document.getElementById('tlHome');
    setCurrentViewTL(tlHome);
}

function startPrimeCars(event) {
    var view = document.getElementById('stackLayout');
    var newView = document.getElementById('PChome');
    view.object.setCurrentView(newView);
}

function VPgenerateRandomNumber(event) {
    var num1 = Math.floor(Math.random()*10);
    var num2 = Math.floor(Math.random()*10);
    var num3 = Math.floor(Math.random()*10);
    TLSubmitSecretNumber(num1, num2, num3, false);
    TLpass();
}

function TLSubmitSecretNumber(num1, num2, num3, isAdmin) {
    var errorText = document.getElementById("errorText");
    
    inputNum = new Array(num1, num2, num3);
    tl_guessHistory = new Array();
    clearHistory();
    errorText.innerText = "";
    TLcurJackpot = TLSCORE;
    TLanswer = (num1*100)+(num2*10)+num3;
    if(isAdmin) {
        adminName = document.getElementById('vgPlayerPopup').value;
    }else{
        adminName = "";
    }
}

function validateInputButton(event)
{
    var inputFieldValue = document.getElementById("inputField");
    var errorText = document.getElementById("errorText");
    
    if (isNaN(inputFieldValue.value) || inputFieldValue.value.length != 3) {
        errorText.innerText = "Incorrect number input. Please enter a 3 digit number.";
    } else if (document.getElementById('vgPlayerPopup').value == "") {
        errorText.innerText = "Please select the player who is picking a number.";
    }else{
        // Code to set the input numbers.  Kind of ugly but it works!
        inputNum = inputFieldValue.value * 1;
        var num1 = (inputNum - inputNum % 100) / 100;
        var num2 = ((inputNum - inputNum % 10) % 100) / 10;
        var num3 = inputNum % 10;
        TLSubmitSecretNumber(num1, num2, num3, true);
        TLpass();
    }
    
}

function tlGuess(event)
{
    var screen = document.getElementById('inputNumber');
    setCurrentViewTL(screen);
}


function VPclearTextField(event)
{
    if (event.srcElement = document.getElementById('name1') && document.getElementById('name1').value == "Player 1") {
        document.getElementById('name1').value = "";
    }
    
    else if (event.srcElement = document.getElementById('name2') && document.getElementById('name2').value == "Player 2") {
        document.getElementById('name2').value = "";
    }
    
    else if (event.srcElement = document.getElementById('name3') && document.getElementById('name3').value == "Player 3") {
        document.getElementById('name3').value = "";
    }
    
    else if (event.srcElement = document.getElementById('name4') && document.getElementById('name4').value == "Player 4") {
        document.getElementById('name4').value = "";
    }
}

function changeTLmode(event)
{
    TLeasymode = (document.getElementById('TLeasymode').checked);
    setTLMode(TLeasymode);
}

function changeTLmodeToHard(event)
{
    document.getElementById('TLeasymode').checked = false;
    document.getElementById('TLhardmode').checked = true;
    changeTLmode(event);
}

function changeTLmodeToEasy(event)
{
    document.getElementById('TLeasymode').checked = true;
    document.getElementById('TLhardmode').checked = false;
    changeTLmode(event);
}

function changePCmodeToPrime(event)
{
    document.getElementById('PCrad1').checked = true;
}

function changePCmodeToEven(event)
{
    document.getElementById('PCrad2').checked = true;
}

function changePCmodeToMultiple(event)
{
    document.getElementById('PCrad3').checked = true;
}

function setPCRadiosToFalse(event)
{
    for(var i = 1; i <= 3; i++) {
        document.getElementById("PCrad"+i).checked = false;
    }
}
    

function setTLMode(easy) {
    if(easy) {
        var Evisibility = 'visible';
        var Hvisibility = 'hidden';
    }else{
        var Evisibility = 'hidden';
        var Hvisibility = 'visible';
    }
    for(var i = 0; i < 3; i++) {
        document.getElementById('indicator'+(3+i)).style.visibility = Evisibility;
        document.getElementById('text'+(26+i)).style.visibility = Evisibility;
    }
    document.getElementById('text6').style.visibility = Evisibility;
    document.getElementById('challengemodetext1').style.visibility = Hvisibility;
    document.getElementById('challengemodetext2').style.visibility = Hvisibility;
    document.getElementById('challengemodeimage').style.visibility = Hvisibility;
}


function TLonGuess(event)
{
    var textFieldValue = document.getElementById("numberInput");
    TLguess = textFieldValue = textFieldValue.value;

    //ADD TRAFFIC LIGHTS GUESS TO DATABASE
    addGuessJS(playerlist[TLcurrentPlayer].name, TLanswer, TLguess, TLanswer);

    var views = document.getElementById('stackLayout');
    var about;
    
    if (isNaN(textFieldValue) || textFieldValue.length != 3) {
        guessErrorText.innerText = "Incorrect number input";
        about = document.getElementById('guessInputScreen');
    }
    else if (TLcheckValues3(textFieldValue)) {
        // Winning situation
        var origNum = document.getElementById("originalNumText");
        origNum.innerText = "The number was " + textFieldValue;
        var winAvatar = document.getElementById("winAvatar");
        winAvatar.src = playerlist[TLcurrentPlayer].avatar;
        var winText = document.getElementById("winText");
        winText.innerText = playerlist[TLcurrentPlayer].name + " wins!";
        about = document.getElementById('winScreen');
        guessErrorText.innerText = "";
        
        //overall scores
        playerlist[TLcurrentPlayer].addToScore(TLcurJackpot);
        
        setCurrentViewTL(about);
    } else {
        if(TLcurJackpot > TL_LOWER_PTS_BOUND) {
            TLcurJackpot -= TL_JACKPOT_PENALTY;
        }
        TLpass();
    }
}

function TLcheckValues3(valueString) {
    var guess = valueString * 1;
    document.getElementById("lastGuessText").innerText = "The last guess was "+guess;
    document.getElementById("lastGuessText").style.visibility = 'visible';
    var guessDigits = TLbreakDownGuess(guess);
    var lightsArray = TLsetLights(guessDigits, inputNum);
    TLpopulateScreenWithLights(lightsArray, guess);
    return TLguessedTheNumber(lightsArray);
}

function TLpopulateScreenWithLights(lightsArray, guess) {
    var tl_guess = new TLGuessObject();
    tl_guess.guess = guess;
    tl_guess.lights = lightsArray;
    tl_guess.challengelight = TLgetChallengeCode(lightsArray);
    tl_guess.avatar = document.getElementById("currPlayerAvatar").src;
    tl_guessHistory.push(tl_guess);
	TLbuildHistory3();

    // Set indicators
    if(TLeasymode) {
        document.getElementById("lastGuessNum").innerText = guess;
        document.getElementById("lastGuessNum").style.visibility = 'visible';
        for (i = 0 ; i < 3 ; i++) {
            document.getElementById("light" + (i+1)).object.setValue(lightsArray[i]);
            document.getElementById("light" + (i+1)).style.visibility = 'visible';
        }
    }else{
        var challengeLight = document.getElementById("lastchallengelight");
        var newChallengeImageName = TLformChallengeName(tl_guess); 
        challengeLight.src = newChallengeImageName;
        challengeLight.style.visibility = 'visible';
    }
}

function TLformChallengeName(guessObj) {
    return "Images/challengelights" + guessObj.challengelight + ".png";
}

function TLguessedTheNumber(lightsArray) {
    for(var i = 0; i < lightsArray.length; i++) {
        if(lightsArray[i] != GREEN) {
            return false;
        }
    }
    return true;
}

function TLgetChallengeCode(lightsArr) {
    var counts = TLfindCounts(lightsArr);
    return TLcreateCountsStr(counts);
}

function TLfindCounts(guesses) {
    var counts = new Array(0, 0, 0);
    
    counts[0] = TLcountChars(RED, guesses);
    counts[1] = TLcountChars(YELLOW, guesses);
    counts[2] = TLcountChars(GREEN, guesses);
    return counts;
}

function TLcreateCountsStr(counts) {
    var countStr = '';
    for(var i = 0; i < counts.length; i++) {
        countStr += counts[i];
    }
    return countStr;
}

function TLcountChars(letterMatch, guesses) {
    var count = 0;
    for(var i = 0; i < guesses.length; i++) {
        if(letterMatch == guesses[i]) {
            count++;
        }
    }
    return count;
}

function TLshouldBeYellow(num, digits, lights, answersReached) {
    for(var i = 0; i < digits.length; i++) {
        if(digits[i] == num) {
            if(!answersReached[i]) {
                answersReached[i] = true;
                return true;
            }
        }
    }
    return false;
}

function TLbreakDownGuess(num) {
    var tempDigits = new Array(0, 0, 0);
    
    for(var i = tempDigits.length-1; i >= 0; i--) {
        tempDigits[i] = num % 10;
        num = num / 10;
        num = Math.floor(num);
    }
    return tempDigits;
}

function TLsetLights(guessDigits, answerDigits) {
    var lights = new Array(0, 0, 0);
    var answersReached = new Array(false, false, false);
    
    for(var i = 0; i < lights.length; i++) {
        if(guessDigits[i] == answerDigits[i]) {
            lights[i] = GREEN;
            answersReached[i] = true;
        }
    }
    
    for(var i = 0; i < lights.length; i++) {
        if(lights[i] == 0) {
            if(TLshouldBeYellow(guessDigits[i], answerDigits, lights, answersReached)) {
                lights[i] = YELLOW;
            }else{
                lights[i] = RED;
            }
        }
    }
    return lights;
}

function TLbuildHistory() {
	var guessTxt = "";
	var numGuesses = tl_previousGuesses.length-1;
	for(var i = 0; i < tl_previousGuesses.length && i < 4; i++) {
		guessTxt += " " + (i+1) + ": " + tl_previousGuesses[numGuesses-i] + ";";
	}
	return guessTxt;
}

function TLbuildHistory2() {
	var guessTxt = "";
	var numGuesses = tl_previousGuesses.length-1;
	for(var i = 0; i < tl_previousGuesses.length && i < 2; i++) {
		guessTxt += " " + (i+1) + ": " + tl_previousGuesses[numGuesses-i] + ";";
		var curLights = tl_previousLights[numGuesses-i];
		for(var j = 0; j < curLights.length; j++) {
			guessTxt += curLights[j] + ",";
		}
	}
	return guessTxt;
}

function TLbuildHistory3() {
    var numGuesses = tl_guessHistory.length-1;
    for(var i = 0; i < tl_guessHistory.length && i < 8; i++) {
        var ithvar = i + 1;
        
        if(TLeasymode) {
            document.getElementById("EHist" + ithvar).style.visibility = 'visible';
            document.getElementById("EHist" + ithvar).innerText = tl_guessHistory[numGuesses-i].guess;
            for(var j = 0; j < tl_guessHistory[i].lights.length; j++) {
                document.getElementById("indicator"+ithvar+""+j).style.visibility = 'visible';
                document.getElementById("indicator"+ithvar+""+j).object.setValue(tl_guessHistory[numGuesses-i].lights[j]);
            }
        }else{
            document.getElementById("DHist" + ithvar).style.visibility = 'visible';
            document.getElementById("DHist" + ithvar).innerText = tl_guessHistory[numGuesses-i].guess;
            document.getElementById("histchallenge"+ithvar).style.visibility = 'visible';
            document.getElementById("histchallenge"+ithvar).src = TLformChallengeName(tl_guessHistory[numGuesses-i]);
        }
        document.getElementById("histavatar" + ithvar).style.visibility = 'visible';
        document.getElementById("histavatar" + ithvar).src = tl_guessHistory[numGuesses-i].avatar;
	}

    //document.getElementById("lastGuessText").innerText = buildHistory2();

}

function clearHistory() {
    for(var i = 0; i < 8; i++) {
        var ithvar = i + 1;
        document.getElementById("DHist" + ithvar).style.visibility = 'hidden';
        document.getElementById("DHist" + ithvar).innerText = '';
        document.getElementById("EHist" + ithvar).style.visibility = 'hidden';
        document.getElementById("EHist" + ithvar).innerText = '';
        for(var j = 0; j < 3; j++) {
            document.getElementById("indicator"+ithvar+""+j).style.visibility = 'hidden';
            document.getElementById("indicator"+ithvar+""+j).object.setValue(0);
        }
        document.getElementById("histchallenge" + ithvar).style.visibility = 'hidden';
        document.getElementById("histchallenge" + ithvar).src = '';
        document.getElementById("histavatar" + ithvar).style.visibility = 'hidden';
        document.getElementById("histavatar" + ithvar).src = '';
	}
    clearLastGuessText();
}

function clearLastGuessText() {
    for(var i = 1; i <= 3; i++) {
        document.getElementById("light"+i).style.visibility = 'hidden';
        document.getElementById("light"+i).object.setValue(0);
    }
    document.getElementById("lastGuessText").style.visibility = 'hidden';
    document.getElementById("lastGuessText").innerText = '';
    document.getElementById("lastchallengelight").style.visibility = 'hidden';
    document.getElementById("lastGuessNum").style.visibility = 'hidden';
    document.getElementById("lastGuessNum").innerText = '';
}


function TLonNext(event)
{
    var inputField = document.getElementById('numberInput');
    inputField.value = "";
    var currAvatar = document.getElementById('currPlayerAvatar');
    currAvatar.src = playerlist[TLcurrentPlayer].avatar;
    var guessTxt = document.getElementById('guessjackpottext');
    guessTxt.innerText = "Try to guess the 3 digit number!\nIf you're right you'll get " + TLcurJackpot + " points!";
    
    var screen = document.getElementById('guessInput');
    setCurrentViewTL(screen);
}


function TLskipTurn(event)
{
    document.getElementById("lastGuessText").innerText = "The last turn was skipped";
    document.getElementById("lastGuessText").style.visibility = 'visible';
    // Set indicators
    for (i = 0 ; i < 3 ; i++) {
        document.getElementById("light" + (i+1)).style.visibility = 'hidden';
    }
    TLpass();
}


function PCpass(event)
{
    
    if (PCcurrentPlayer < numPlayers-1) {
        PCmode = PCdetermineMode();
        var nextName = playerlist[PCcurrentPlayer+1].name;
        playerlist[PCcurrentPlayer+1].isplaying = 1;
        
        // Pass to next player
        document.getElementById('PCnextName').innerText = nextName;
        document.getElementById('PCnextAvatar').src = playerlist[PCcurrentPlayer+1].avatar;
        PCcurrentPlayer++;
        var nextView = document.getElementById('PCpassScreen');
        document.getElementById('stackLayout').object.setCurrentView(nextView);
    } else {
        // Go to scores page
        PCcurrentPlayer = -1;
        gotoScores();
    }
}

function PCdetermineMode() 
{    
    for(var i = 1; i <= 2; i++) {
        if(document.getElementById("PCrad"+i).checked) {
            return i;
        }
    }
    PCmultiplier = document.getElementById('PCmultValue').value;
    return PC_MULT_MODE;
}

function PCSkipPass(event)
{
    for(i = 1; i < br_frames; i++) {
        clearTimeout(br_timeouts1[i]);
        clearTimeout(br_timeouts2[i]);
    }
    clearTimeout(br_timeouts3);
    //br_primeCarsMistakes = 3;
    br_carAtEnd();
    //PCpass(event);
    //PCpass(event);
}

function PCstartGame(event)
{
    var view = document.getElementById('stackLayout');
    var newView = document.getElementById('PCcontent');
    view.object.setCurrentView(newView);
    
    //SETUP Prime Cars stuff
    br_carNumber = 0;
    br_carSpeed = 10;
    br_carClicked = false;
    br_primeCarsMistakes = 0;
    br_primeCarsPoints = 0;
    br_primeCarsDead = false;
    br_mistakesText.innerText = " ";
    br_pointsText.innerText = "";
    br_message.innerText = PCdetermineText();
    
    br_makeCar();
}

function PCdetermineText() {
    var text = "Identify if the number on the cars is ";
    if(PCmode == PC_PRIME_MODE) {
        text += "prime or composite";
        br_primeButton1.object.setText("Prime");
        br_notPrimeButton1.object.setText("Not Prime");
    }else if(PCmode == PC_EVEN_MODE) {
        text += "even or odd";
        br_primeButton1.object.setText("Even");
        br_notPrimeButton1.object.setText("Odd");
    }else{
        text += "a multiple of " + PCmultiplier;
        br_primeButton1.object.setText("Multiple of " + PCmultiplier);
        br_notPrimeButton1.object.setText("Not a Multiple");
    }
    return text;
}




///////////////////////////////////////////////////////////////
// EVENT HANDLERS ETC FOR PLAYER STUFF 
///////////////////////////////////////////////////////////////
function isInteger(s) {
  return (s.toString().search(/^-?[0-9]+$/) == 0);
}

function setadminflag(){
  for (var i = 0; i < numPlayers; i++){
    if (playerlist[i].name == adminname){
      playerlist[i].admin = 1;
    }
  }
}

function displayScores(){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('scores');
  
  var playername;
  var playerscore;
  var playergauge;
  var playeravatar;
  
  //alert('total players' + numPlayers);
  var ordering = figureOutScoreOrder();
  
  //SET PLAYER NAMES AND ANSWERS
  for (var j = 0; j < numPlayers; j++){
    
    var i = ordering[j];
    //get the text element for the player name and the player answer
    playername   = document.getElementById('player' + (j+1));
    playerscore  = document.getElementById('score'  + (j+1));
    pscoregauge  = document.getElementById('p' + (j+1) + 'scoregauge');
    playeravatar = document.getElementById('p' + (j+1) + 'avatar');
    
    //update the text element for the player name and the player answer
    playername.innerHTML   = playerlist[i].name;
    playerscore.innerHTML  = playerlist[i].getScore();
    playeravatar.src       = playerlist[i].avatar;
    pscoregauge.object.setValue(playerlist[i].getScore());
    
    /*if (!(playerlist[j].isplaying)){
      //if the player is playing only then make the score visible.
      playername.style.visibility='hidden';
      playerscore.style.visibility='hidden';
      pscoregauge.style.visibility='hidden';
    }
    else{
      pscoregauge.style.visibility='visible';
      playeravatar.style.visibility='visible';
    }*/
    playername.style.visibility='visible';
    playerscore.style.visibility='visiblie';
    pscoregauge.style.visibility='visible';
    playeravatar.style.visibility='visible';
    
  }//for loop ends 
  
  //reset currentplayerid back to 0, and also set all the isplaying 
  //flags back to 1.
  currentplayerid=0;
  for (var i = 0; i < numPlayers; i++){
    playerlist[i].isplaying=1; 
  }
  
}

function displayScores2() {
    
}

function figureOutScoreOrder() {
    var ordering = new Array();
    var beenUsed = new Array();
    var maxIndex;
    var maxValue;
    for(var i = 0; i < numPlayers; i++) {
        maxIndex = 0;
        maxValue = -1; //cruddy I know
        for(var j = 0; j < numPlayers; j++) {
            if(playerlist[j].score > maxValue && !beenUsed[j]) {
                maxIndex = j;
                maxValue = playerlist[j].getScore();
            }
        }
        ordering[i] = maxIndex;
        beenUsed[maxIndex] = true;
    }
    return ordering;
}


function pitstopPass2Player(event){
  
  //GO TO NEXT SCREEN
  if (currentview && currentview.object && afternext) {
    currentview.object.setCurrentView(afternext);		
  }
}

///////////////////////////////////////////////////////////////
// EVENT HANDLERS ETC FOR PLAYER STUFF 
///////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////
// EVENT HANDLERS ETC FOR PIT STOP STUFF 
///////////////////////////////////////////////////////////////

function gotoPitStop(event){
  var currView   = document.getElementById('stackLayout');
  var pitstop   = document.getElementById('pitstop');
  var psviews = document.getElementById('pitstoprules');
  var about   = document.getElementById('amstackLayout3');
  about.object.setCurrentView(psviews);
  if (currView && currView.object && pitstop) {
    currView.object.setCurrentView(pitstop);
  }
}


function pitstoprulesBack(event){
  var views    = document.getElementById('stackLayout');
      back     = document.getElementById('games');
  
  //GO TO PREVIOUS SCREEN
  if (views && views.object && back) {
    views.object.setCurrentView(back);		
  }
}


function pitstoprulesNext(event){
  var views      = document.getElementById('stackLayout');
  var psviews    = document.getElementById('amstackLayout3');
  var next       = document.getElementById('pitstopadminselect');
  var adminpopup = document.getElementById('psadminpopup');
  
  for(var i =0; i < numPlayers; i++){
    adminpopup[i].label = playerlist[i].name;
    adminpopup[i].value = playerlist[i].name;
  }
  adminpopup[i].label = 'other';
  adminpopup[i].value = 'other';
    
  //GO TO NEXT SCREEN
  if (views && psviews && psviews.object && next) {
    psviews.object.setCurrentView(next);		
  }
}

function pitstopadminselectNext(event){
  var views      = document.getElementById('stackLayout');
  currentview    = document.getElementById('amstackLayout3');
      next       = document.getElementById('pitstoppass2player');
      afternext  = document.getElementById('pitstopq1');
      
  //GET ADMIN NAME
  adminname = document.getElementById('psadminpopup').value;
  setadminflag();
  
  //IF THE FIRST PLAYER IS THE ADMIN SKIP
  while(playerlist[currentplayerid].admin){
    currentplayerid++;
  }
  playerlist[currentplayerid].isplaying=1;
  
  //SET PLAYER NAME
  var q1playername       = document.getElementById('q1player');
  q1playername.innerHTML = playerlist[currentplayerid].name;
  
  var q1playeravatar     = document.getElementById('q1avatar');
  q1playeravatar.src       = playerlist[currentplayerid].avatar;
  
  //SET THE NAME FOR THE PASS 2 PLAYER SCREEN
  var playername         = document.getElementById('psp2pname');
  playername.innerHTML   = playerlist[currentplayerid].name;
  
  var playeravatar       = document.getElementById('psp2pavatar');
  playeravatar.src       = playerlist[currentplayerid].avatar;
  
  //GO TO NEXT SCREEN
  if (views && currentview && currentview.object && next) {
    currentview.object.setCurrentView(next);		
  }
}

function pitstopq1Back(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('gameSelect');
  
  //GO TO PREVIOUS SCREEN
  if (views && psview && views.object) {
    views.object.setCurrentView(psview);		
  }
}

function pitstopq2Back(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var back     = document.getElementById('pitstopq1');
  
  //GO TO PREVIOUS SCREEN
  if (views && psview && psview.object && back) {
    psview.object.setCurrentView(back);		
  }
}

function pitstopq3Back(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var back     = document.getElementById('pitstopq2');
  
  //GO TO PREVIOUS SCREEN
  if (views && psview && psview.object && back) {
      psview.object.setCurrentView(back);		
    }
}

function pitstopq1Pass(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var next     = document.getElementById('pitstopq2');
  
  //SET PLAYER NAME
  var q2playername       = document.getElementById('q2player');
  q2playername.innerHTML = playerlist[currentplayerid].name;
  
  var q2playeravatar     = document.getElementById('q2avatar');
  q2playeravatar.src     = playerlist[currentplayerid].avatar;
  
  //READ THE VALUE FROM THE TEXTBOX
  pitstopobj[currentplayerid].answers[0] = '';

  //GO TO NEXT SCREEN
  if (views && psview && psview.object && next) {
    psview.object.setCurrentView(next);		
  }
}

function pitstopq2Pass(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var next     = document.getElementById('pitstopq3');
  
  //SET PLAYER NAME
  var q3playername       = document.getElementById('q3player');
  q3playername.innerHTML = playerlist[currentplayerid].name;
  
  var q3playeravatar     = document.getElementById('q3avatar');
  q3playeravatar.src     = playerlist[currentplayerid].avatar;
  
  //READ THE VALUE FROM THE TEXTBOX
  pitstopobj[currentplayerid].answers[1] = '';
  
  //GO TO NEXT SCREEN
  if (views && psview && psview.object && next) {
    psview.object.setCurrentView(next);		
  }
}


function pitstopq3Pass(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  
  //READ THE VALUE FROM THE TEXTBOX
  pitstopobj[currentplayerid].answers[2] = '';
  
  //INCREMENT TO NEXT PLAYER IN LIST
  //IF THIS IS THE ADMIN SKIP 
  do{
    currentplayerid++;
  }while (currentplayerid < MAX_PLAYERS && playerlist[currentplayerid].admin);
  if (currentplayerid != MAX_PLAYERS) playerlist[currentplayerid].isplaying=1;
  
  if (currentplayerid == numPlayers){
    
    //SET PLAYER NAME FOR THE PASS 2 PLAYER SCREEN
    var playername         = document.getElementById('psadminname');
    playername.innerHTML   = adminname;
    
    next       = document.getElementById('pitstoppass2admin');
    afternext  = document.getElementById('pitstopadminq1');
    
    setadminValues();
  }
  else{
    //SET PLAYER NAME
    var q1playername       = document.getElementById('q1player');
    q1playername.innerHTML = playerlist[currentplayerid].name;
    
    var q1playeravatar     = document.getElementById('q1avatar');
    q1playeravatar.src     = playerlist[currentplayerid].avatar;
      
    //SET THE NAME FOR THE PASS 2 PLAYER SCREEN
    var playername         = document.getElementById('psp2pname');
    playername.innerHTML   = playerlist[currentplayerid].name;
    
    var playeravatar       = document.getElementById('psp2pavatar');
    playeravatar.src       = playerlist[currentplayerid].avatar;
  
    next       = document.getElementById('pitstoppass2player');
    afternext  = document.getElementById('pitstopq1');
  }

  //GO TO NEXT SCREEN
  if (views && psview && psview.object && next) {
    psview.object.setCurrentView(next);		
  }
}

function pitstopq1Next(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var next     = document.getElementById('pitstopq2');
  var answer   = document.getElementById('q1answer');
  var errortxt = document.getElementById('q1error');
  
  if (isInteger(answer.value) && parseInt(answer.value) > 0){
    //SET PLAYER NAME
    var q2playername       = document.getElementById('q2player');
    q2playername.innerHTML = playerlist[currentplayerid].name;
    
    var q2playeravatar     = document.getElementById('q2avatar');
    q2playeravatar.src     = playerlist[currentplayerid].avatar;
  
    //READ THE VALUE FROM THE TEXTBOX
    pitstopobj[currentplayerid].answers[0] = answer.value;
    
    PTproblem = document.getElementById('ptrules6');
    PTguess = pitstopobj[currentplayerid].answers[0];
    
    addGuessJS(playerlist[currentplayerid].name,PTproblem,PTguess,'NULL');
  
    //RESET TEXTBOX VALUE
    answer.value='';
    errortxt.style.visibility='hidden';
    
    //GO TO NEXT SCREEN
    if (views && psview && psview.object && next) {
      psview.object.setCurrentView(next);		
    }
  }
  else{
    errortxt.style.visibility='visible';
  }
}

function pitstopq2Next(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var next     = document.getElementById('pitstopq3');
  var answer1  = document.getElementById('q2answer1');
  var answer2  = document.getElementById('q2answer2');
  var errortxt = document.getElementById('q2error');

  if (isInteger(answer1.value)    && isInteger(answer2.value) &&
      parseInt(answer1.value) >=  0 && 
      parseInt(answer2.value) >=  0 && parseInt(answer2.value) < 60){
    //SET PLAYER NAME
    var q3playername       = document.getElementById('q3player');
    q3playername.innerHTML = playerlist[currentplayerid].name;
    
    var q3playeravatar     = document.getElementById('q3avatar');
    q3playeravatar.src     = playerlist[currentplayerid].avatar;
  
    //READ THE VALUE FROM THE TEXTBOX
    pitstopobj[currentplayerid].answers[1] = answer1.value + ' hrs ' +   answer2.value + ' mins';
    
     PTproblem = document.getElementById('ptrules8');
    PTguess = pitstopobj[currentplayerid].answers[1];
    
    addGuessJS(playerlist[currentplayerid].name,PTproblem,PTguess,'NULL');
  
    //RESET TEXT BOX VALUES
    answer1.value='';
    answer2.value='';
    errortxt.style.visibility='hidden';
    
    //GO TO NEXT SCREEN
    if (views && psview && psview.object && next) {
      psview.object.setCurrentView(next);		
    }
    
  } else{
    errortxt.style.visibility='visible';
  }
}

function pitstopq3Next(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var answer   = document.getElementById('q3answer');
  var errortxt = document.getElementById('q3error');
  
  if (isInteger(answer.value) && parseInt(answer.value) > 0){
    //READ THE VALUE FROM THE TEXTBOX
    pitstopobj[currentplayerid].answers[2] = answer.value;
    
    PTproblem = document.getElementById('ptrules10');
    PTguess = pitstopobj[currentplayerid].answers[2];
    
    addGuessJS(playerlist[currentplayerid].name,PTproblem,PTguess,'NULL');
    
    //RESET TEXTBOX VALUE
    answer.value='';
    errortxt.style.visibility='hidden';
  
    //INCREMENT TO NEXT PLAYER IN LIST
    //IF THIS IS THE ADMIN SKIP 
    do{
      currentplayerid++;
    }while (currentplayerid < MAX_PLAYERS && playerlist[currentplayerid].admin);
    if (currentplayerid != MAX_PLAYERS) playerlist[currentplayerid].isplaying=1;

    //IF WE HAVE FINISHED ALL PLAYERS GO TO ADMIN VIEW, ELSE GET THE 
    //INPUT FROM THE REMAINING PLAYERS
    if (currentplayerid == numPlayers){
      next       = document.getElementById('pitstoppass2admin');
      afternext  = document.getElementById('pitstopadminq1'); 
      
      //SET PLAYER NAME FOR THE PASS 2 PLAYER SCREEN
      var playername         = document.getElementById('psadminname');
      playername.innerHTML   = adminname;

      if (views && psview && psview.object && next) {
        //GO TO NEXT SCREEN
        setadminValues();
        psview.object.setCurrentView(next);		
      }
    } // if ends
    else{
      next       = document.getElementById('pitstoppass2player');
      afternext  = document.getElementById('pitstopq1'); 
    
      //SET PLAYER NAME
      var q1playername       = document.getElementById('q1player');
      q1playername.innerHTML = playerlist[currentplayerid].name;
      
      //SET THE NAME FOR THE PASS 2 PLAYER SCREEN
      var playername         = document.getElementById('psp2pname');
      playername.innerHTML   = playerlist[currentplayerid].name;
      
      var playeravatar       = document.getElementById('psp2pavatar');
      playeravatar.src       = playerlist[currentplayerid].avatar;

      
      if (views && psview && psview.object && next) {
        psview.object.setCurrentView(next);
      }
    } // else ends
  } // if isInteger ends 
  else{
    errortxt.style.visibility='visible';
  }
  
}//function ends

function setadminValues(){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var pt1      = document.getElementById('pitstopadminq1');
  var pt2      = document.getElementById('pitstopadminq2');
  var pt3      = document.getElementById('pitstopadminq3');
  
  var playername;
  var playerans;
  
  //SET PLAYER NAMES AND ANSWERS
  for (var i = 0; i < numPlayers; i++){
    for (var j = 0; j < 3; j++){
      // get the column, make it visible
    
      //get the text element for the player name and the player answer
      playername  = document.getElementById('q'+ (j+1) + 'player' + (i+1));
      playerans   = document.getElementById('q'+ (j+1) + 'answerp'+ (i+1));
      playerscore = document.getElementById('q'+ (j+1) + 'scorep' + (i+1));
    
      //update the text element for the player name and the player answer
      playername.innerHTML = playerlist[i].name;
      playerans.innerHTML  = pitstopobj[i].answers[j];
      
      //if admin then hide else make it visible
      if (playerlist[i].admin){
        playername.style.visibility='hidden';
        playerans.style.visibility='hidden';
        playerscore.style.visibility='hidden';
      }
      else{
        playername.style.visibility='visible';
        playerans.style.visibility='visible';
        playerscore.style.visibility='visible';
      }
      
    }
    
  }
}


function pitstopadminq1(event){
  pitstopGivePointsAndMoveOn('amstackLayout3', 'pitstopadminq2', 'q1scorep');
}

function pitstopadminq2(event){
  pitstopGivePointsAndMoveOn('amstackLayout3', 'pitstopadminq3', 'q2scorep');
}

function pitstopadminq3(event){
  pitstopGivePointsAndMoveOn('stackLayout', 'scores', 'q3scorep');
}

function pitstopGivePointsAndMoveOn(subView, nextView, scoreField) {
   //READ AND INCREMENT PLAYER SCORES
  for (var i = 0; i < numPlayers; i++){
    score = document.getElementById(scoreField + (i+1)).value;
    if (playerlist[i].isplaying){
      playerlist[i].addToScore(parseInt(score));
    }
  }
  
  //GO TO NEXT SCREEN
  if (subView && subView.object && nextView) {
    subView.object.setCurrentView(nextView);		
  }
} 

///////////////////////////////////////////////////////////////
// EVENT HANDLERS ETC FOR PIT STOP STUFF 
///////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////
// DATABASE CODE BEGINS
///////////////////////////////////////////////////////////////

function addPlayerJS(str, avtar)
{
	xmlhttp=prepareXmlObject(str+avtar, "playeridtxt");
	if (xmlhttp==null) {
		return;
	}
//	for the GET method
//	url = url+"?name="+str+"&sid="+4;
//	xmlhttp.onreadystatechange=stateChanged;
//	xmlhttp.open("GET",url,true);
//	xmlhttp.send(null);
	avtar = avtar.substring(avtar.lastIndexOf("/") + 1);
//	for the POST method
	var params = "name="+str+"&sid="+currentsid+"&category=addplayer"+"&avatar="+avtar;
	xmlhttp.onreadystatechange=displayPlayer;
	sendInfoToPHP(xmlhttp, url, params);
}

function updatePlayerAvatarJS(str, avtar) {
	xmlhttp=prepareXmlObject(str+avtar, "updateplayertxt");
	if (xmlhttp==null) {
		return;
	}
	avtar = avtar.substring(avtar.lastIndexOf("/") + 1);
	var params = "name="+str+"&sid="+currentsid+"&category=updateavatar"+"&avatar="+avtar+"&uid="+userid;
	xmlhttp.onreadystatechange=displayPlayer;
	sendInfoToPHP(xmlhttp, url, params);
}		

function addUserJS(fname, lname) {
	if(fname.length==0 || lname.length==0) {
		return;
	}
	xmlhttp=prepareXmlObject(fname+lname, "useridtxt");
	if (xmlhttp==null) {
		return;
	}
	var params = "firstname="+fname+"&lastname="+lname+"&category=adduser";
	xmlhttp.onreadystatechange=displayUser;
	sendInfoToPHP(xmlhttp, url, params);
}

function loginJS(fname, lname) {
	if(fname.length==0 || lname.length==0) {
		return;
	}
	xmlhttp=prepareXmlObject(fname+lname, "uidtxt");
	if (xmlhttp==null) {
		return;
	}
	var params = "firstname="+fname+"&lastname="+lname+"&category=getuser";
	xmlhttp.onreadystatechange=displayUID;
	sendInfoToPHP(xmlhttp, url, params);
}

function addGuessJS(name, problem, guess, answer) {
	if(name.length == 0 || problem.length == 0 || guess.length == 0 || answer.length == 0) {
		return;
	}
	xmlhttp=prepareXmlObject(name+problem+guess+answer, "guessidtxt");
	if (xmlhttp==null) {
		return;
	}
	var params = "name="+name+"&sid="+currentsid+"&prob="+problem+"&guess="+guess+"&answer="+answer+"&category=addguess";
	xmlhttp.onreadystatechange=displayGuess;
	sendInfoToPHP(xmlhttp, url, params);
}

function add2ScoreInDBJS(name, points) {
	if(name.length == 0 || points.length == 0) {
		return;
	}
	xmlhttp=prepareXmlObject(name+points+"scoretxt");
	if (xmlhttp==null) {
		return;
	}
	var params = "name="+name+"&sid="+currentsid+"&points="+points+"&category=updatescore";
	xmlhttp.onreadystatechange=displayScore;
	sendInfoToPHP(xmlhttp, url, params);
}

function createSessionJS() {
	xmlhttp=prepareXmlObject(""+userid, "playeridtxt");
	if (xmlhttp==null) {
		return;
	}
    
//	document.getElementById("sessionidtxt").innerHTML = userid;
	var params = "uid="+userid+"&category=createsession";
	xmlhttp.onreadystatechange=displaySession;
	sendInfoToPHP(xmlhttp, url, params);
}

function sendInfoToPHP(xmlobj, url, params) {
//	xmlobj.onreadystatechange=fieldDisplay(field);
	xmlobj.open("POST",url,true);
	//Send the proper header information along with the request
	xmlobj.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
//	xmlobj.setRequestHeader("Content-length", params.length);
//	xmlobj.setRequestHeader("Connection", "close");
	xmlobj.send(params);
}

function prepareXmlObject(str, element) {
	if(str.length==0) {
		document.getElementById(element).innerHTML="";
		return null;
	}
	xmlhttp=GetXmlHttpObject();
    //firebug.watchXHR(xmlhttp);
	if(xmlhttp==null) {
		alert ("Your browser does not support XMLHTTP!");
	}
	return xmlhttp;
}

function fieldDisplay(element) {
	if (xmlhttp.readyState==4 && xmlhttp.status==200)
	{
		//document.getElementById(element).innerHTML=xmlhttp.responseText;
	}
}

function displayPlayer() {
	fieldDisplay("playeridtxt");
}

function displayUser() {
	//fieldDisplay("useridtxt");
	if (xmlhttp.readyState==4 && xmlhttp.status==200) {
		window.userid = xmlhttp.responseText;
        createSessionJS();
	}
}

function displayGuess() {
	fieldDisplay("guessidtxt");
}
function displayScore() {
	fieldDisplay("scoretxt");
}
function displaySession() {
	//fieldDisplay("sessionidtxt");
	if (xmlhttp.readyState==4 && xmlhttp.status==200) {
		window.currentsid = xmlhttp.responseText;
	}
}
function displayUID() {
	//fieldDisplay("uidtxt");
	if (xmlhttp.readyState==4 && xmlhttp.status==200) {
		window.userid = xmlhttp.responseText;
        if (window.userid == -1){
          addUserJS(userfname, userlname);
        }
        else{
          createSessionJS();
        }
	}
}

function GetXmlHttpObject()
{
	if (window.XMLHttpRequest)
	{
		// code for IE7+, Firefox, Chrome, Opera, Safari
		return new XMLHttpRequest();
	}
	if (window.ActiveXObject)
	{
		// code for IE6, IE5
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	return null;
}

///////////////////////////////////////////////////////////////
// DATABASE CODE ENDS
//--------------------------------------------------------------
// EVENT HANDLERS ETC FOR ESTIMATION STATION 
///////////////////////////////////////////////////////////////

function removeSpaces(string) 
{
 return string.split(' ').join('');
}



function MakeEstimates(event)
{    //create question text for Open and Secret guess pages 
    document.getElementById('text51').innerText =  document.getElementById('text51').innerText = "How many " + document.getElementById('adjectivepopup').value + " " + document.getElementById('nounpopup').value + " will we pass in the next " + document.getElementById('estimatetimepopup').value + "?";
   
    document.getElementById('text2').innerText = document.getElementById('text51').innerText;


    //send to Open or Secret mode
      secretMode = document.getElementById('secretmode').checked;
      if (secretMode){
            setEstimateAvatars(event,"")
            makeSecretEstimates(event)
      }
      else{
            setEstimateAvatars(event,"Open")
            makeOpenEstimates(event)
      }
}

function CounterPlus(event,a)
{
    estimateCount++;
    document.getElementById('EstimateCounter' + a).innerText = estimateCount;
}

function CounterMinus(event,a)
{
    estimateCount--;
    document.getElementById('EstimateCounter' + a).innerText = estimateCount;
}

function enterSecretEstimate1(event)
{
    enterSecretEstimateCheck(event,1,1);
}

function enterSecretEstimate2(event)
{
    enterSecretEstimateCheck(event,2,2);
}

function enterSecretEstimate3(event)
{
    enterSecretEstimateCheck(event,3,3);
}

function enterSecretEstimate4(event)
{
    enterSecretEstimateCheck(event,4,4);
}

function enterSecretEstimate5(event)
{
    enterSecretEstimateCheck(event,5,5);
}

function enterSecretEstimate6(event)
{
    enterSecretEstimateCheck(event,6,6);
}

function enterSecretEstimate7(event)
{
    enterSecretEstimateCheck(event,7,7);
}

function enterSecretEstimate8(event)
{
    enterSecretEstimateCheck(event,8,8);
}

function enterSecretEstimate9(event)
{
    enterSecretEstimateCheck(event,9,13);
}

function enterSecretEstimate10(event)
{
    enterSecretEstimateCheck(event,10,14);
}

function enterSecretEstimate11(event)
{
    enterSecretEstimateCheck(event,11,15);
}

function enterSecretEstimate12(event)
{
    enterSecretEstimateCheck(event,12,16);
}

function enterSecretEstimate(event) {
    var evt = window.event || e;
    if(!evt.target) {
        evt.target = evt.srcElement;
    }
    alert(evt.target);
}

function enterSecretEstimateCheck(event,a,b)
{
    if(isPositiveInteger(document.getElementById('PlayerEstimate' + a).value) && isPositiveInteger(document.getElementById('PlayerEstimate' + b).value)){
        //puts secretimage infront of entered estimate, hides any existing error message
        document.getElementById('SecretCover' + a).style.visibility = 'visible';
        hideEstimationErrorMessages(event);
    }
    else {  //error message, clearentryfield
        document.getElementById("PlayerEstimate" + a).value = "";
        showEstimationErrorMessages(event);
    }
}

function setEstimateAvatarsFull(event, a, btnnamesarray, startIndex) {
    for (var i = 0; i < numPlayers; i++){
        showAvatar(a, i, startIndex);
        showPlayerName(a, i, startIndex);
        document.getElementById(a + 'PlayerEstimate' + (i+startIndex)).style.visibility = 'visible';
        
        if(a == ""){   // enter buttons only need to be turned visible in secret mode
            document.getElementById(btnnamesarray[i]).style.visibility = 'visible';
        }
    }
}

function setAdditionalParamtersFull(event, hoursfields, hourscaps, minscaps) {
    for(var i = 0; i < numPlayers; i++) {
        get(hoursfields[i]).style.visibility = 'visible';
        get(hourscaps[i]).style.visibility = 'visible';
        get(minscaps[i]).style.visibility = 'visible';
    }
}

function switchToDistancesAnswer(event)
{
    showEstimatesForMiles(event, 9, 5);
    switchTo('distancesAnswer');
}

function createSSuffix(value) {
    if(value == 1) {
        return "";
    }
    return "s";
}

function switchToMainHoursPrelim(event) {
    var minutesEsts = convertArrayToNumbers(getGuessesFromTFields('PlayerEstimate', 13));
    var hoursEsts = convertArrayToNumbers(getGuessesFromTFields('PlayerEstimate', 9));
    var timeArray = gmap.getMainTimeInHoursMinSecs();
    var hoursS = createSSuffix(timeArray[0]);
    var minS = createSSuffix(timeArray[1]);
    var strSuffix = timeArray[0] + " hour" + hoursS + " " + timeArray[1] + " minute" + minS;
    get('mins_hours_exp').innerText = "We don't know yet, but here's what google thinks: " + strSuffix;
    for(var i = 0; i < numPlayers; i++) {
        showAvatar("", i, 17);
        var ithPlayerName = showPlayerName("", i, 17);
        hoursS = createSSuffix(hoursEsts[i]);
        minS = createSSuffix(minutesEsts[i]);
        playerlist[i].setTimeGuess(hoursEsts[i], minutesEsts[i]);
        var strSuffix = "'s guess is " + hoursEsts[i] + " hour" +  hoursS + " and " + minutesEsts[i] + " minute" + minS + ".";
        ithPlayerName.innerText = ithPlayerName.innerText + strSuffix;
        addPlayerInfoToLocalStorage(i);
    }
    localStorage.numPlayers = numPlayers;
    var timeElapsed = calculateMillisElapsedFromNow();
    var timePastHours = millisToHours(timeElapsed);
    var secsLeft = timeElapsed-(hoursToMillis(timePastHours));
    var timePastMins = millisToMins(secsLeft);
    if(timePastMins < 10) {
        timePastMins = "" + "0" + timePastMins;
    }
    get('timeSoFar').innerText = "Time elapsed: " + timePastHours + ":" + timePastMins;
    gmap.addCheckIn();
    switchTo('mainHoursPrelim');
}

function millisToHours(tElapsed) {
    return Math.floor(tElapsed / (1000*60*60));
}

function hoursToMillis(hrs) {
    return hrs * (1000*60*60);
}

function millisToMins(tElapsed) {
    return Math.floor(tElapsed / (1000*60));
}

function calculateMillisElapsedFromNow() {
    return calculateMillisElapsed(new Date());
}

function calculateMillisElapsed(dateObj) {
    return dateObj.getTime() - (new Date(localStorage.gameStartTime)).getTime();
}

function showPlayerInfo(event, playerPrefix, startIndex, prevGuessIndex) {
    var distGuesses = new Array();
    
    for (var i = 0; i < numPlayers; i++) {
        showAvatar(playerPrefix, i, startIndex);
        var ithPlayerName = showPlayerName(playerPrefix, i, startIndex);
        distGuesses[i] = Number(get('PlayerEstimate' + (i+prevGuessIndex)).value);
        playerlist[i].setTimeGuess(distGuesses[i]);
        var strSuffix = "'s guess is " + distGuesses[i] + ".";
        ithPlayerName.innerText = ithPlayerName.innerText + strSuffix;
    }
    return distGuesses;
}

function getGuessesFromTFields(tField, guessIndex) {
    var guesses = new Array();
    for(var i = 0; i < numPlayers; i++) {
        guesses[i] = get(tField + (i+guessIndex)).value;
    }
    return guesses;
}

function restoreMainHoursFields() {
    for(var i = 0; i < numPlayers; i++) {
        get('PlayerEstimate'+(9+i)).value = playerlist[i].getTimeGuessHours();
        get('PlayerEstimate'+(13+i)).value = playerlist[i].getTimeGuessMinsLeft();
    }
}

function convertArrayToNumbers(arr) {
    for(var i = 0; i < arr.length; i++) {
        arr[i] = Number(arr[i]);
    }
    return arr;
}

function showEstimatesForMiles(event, startIndex, prevGuessIndex) {
    var playerPrefix = "";
    var origin = stripToCityState(gmap.getStartMarker().markAddr);
    var destin = stripToCityState(gmap.getEndMarker().markAddr);
    get('miles_answer').innerText = "The distance between " + origin + " and " + destin + " is " + gmap.getMainDistance() + " miles.  ";
    var distGuesses = showPlayerInfo(event, playerPrefix, startIndex, prevGuessIndex);
    
    //Use code from estimation station
    var estDiffs = getEstimateDiffs(distGuesses, gmap.getMainDistance());
    var bestGuess = findBestGuess(estDiffs);
    var winnersArr = findWinners(estDiffs, bestGuess, gmap.getMainDistance());
    
    var extraPts = 30;
    var pointsMsg = extraPts + " points!"
    if(winnersArr.length > 1) {
        strAnswer = "It's a tie!  So they each get " + pointsMsg;
    }else{
        strAnswer = winnersArr[0].name + " is the closest, so they get " + pointsMsg;
    }
    get('miles_answer').innerText += strAnswer;
    for(i = 0; i < winnersArr.length; i++) {
        winnersArr[i].addToScore(extraPts);
    }
}

function getEstimateDiffs(estimsArray, realAnswer) {
    estimateDiffs = new Array();
    for(i = 0; i < numPlayers; i++) {
        estimateDiffs[i] = Math.abs(estimsArray[i] - realAnswer);
    }
    return estimateDiffs;
}

function findBestGuess(diffsArray) {
    var bestGuess;
    for(i = 0; i < numPlayers; i++) {
        if(i == 0 || diffsArray[i] < bestGuess) {
            bestGuess = diffsArray[i];
        }
    }
    return bestGuess;
}

function showAvatar(a, ith, startIndex) {
    var currAvatar = get(a + 'EstimateAvatar' + (ith+startIndex));
    currAvatar.src = playerlist[ith].avatar;    
    currAvatar.style.visibility = 'visible';
}

function showPlayerName(a, ith, startIndex) {
    var currName = get(a + 'estimatePlayerName' + (ith+startIndex));
    currName.innerText = playerlist[ith].name;
    currName.style.visibility = 'visible';
    return currName;
}

function setEstimateAvatars(event,a)
{
    var buttonnames = new Array("button18", "button19", "button32", "button20");
    setEstimateAvatarsFull(event, a, buttonnames, 1);
}

function makeSecretEstimates(event)
{
    setCurrentViewEst(document.getElementById('MakeEstimatesSecret'));

}

function makeOpenEstimates(event)
{
    setCurrentViewEst(document.getElementById('MakeEstimatesOpen'));
}

function GetEstimationHints(event)
{
//get Hints page ready
    document.getElementById('text121').innerText = document.getElementById('adjectivepopup').value + " " + document.getElementById('nounpopup').value;
    document.getElementById('text123').innerText = document.getElementById('estimatetimepopup').value + 
    "...";
    
    var numMinutes = document.getElementById('estimatetimepopup').value.charAt(0);
    var numSeconds = numMinutes * 60;
    var sampleMultiplier = numMinutes * 2;
    document.getElementById('text124').innerText = "1. Figure out how many total seconds you are counting. There are 60 seconds in every minute, so " + numMinutes + " min = " + numMinutes + " x 60 = " + numSeconds + " seconds."; 
    document.getElementById('text52').innerText = "2. Now count how many " + document.getElementById('adjectivepopup').value + " " + document.getElementById('nounpopup').value + " pass in the next 30 seconds. Ready? Count!"
    document.getElementById('text83').innerText = "3. Multiple that number by " + sampleMultiplier + ". That's a good estimate for the game because " + numSeconds + " seconds is " + sampleMultiplier +  " times longer than the 30 seconds you sampled. If none passed by, estimate zero or one.";
    
    setCurrentViewEst(document.getElementById('EstimationHints')); 
}

function BeginSecretEstimationContest(event)
{
    BeginEstimationContest(event,"");
}

function BeginOpenEstimationContest(event)
{
    BeginEstimationContest(event,"Open");
}

function BeginEstimationContest(event,a)  // Takes "" for secret, "Open" for Open
{
    if(AllAnswersAreIntegers(a)){   
        // gets ContestBegun text ready
        var adjective = document.getElementById('adjectivepopup').value;
        var noun = removeSpaces(document.getElementById('nounpopup').value);
        document.getElementById('text127').innerText =  adjective + " " + noun + ".";    
        estimateCount = 0;
        document.getElementById('EstimateCounter1').innerText = estimateCount;
        // makes the correct image visible
        document.getElementById(noun).style.visibility = 'visible';
        BeginTimer(event);
        setCurrentViewEst(document.getElementById('ContestBegun')); 
    }
    else{
        showEstimationErrorMessages(event);
        ClearNonValidEstimates(a);
    }
}

function AllAnswersAreIntegers(a)
{
    for(i = 1; i < numPlayers + 1; i++){
        var estimate = document.getElementById(a + "PlayerEstimate" + i).value;
        if(!isPositiveInteger(estimate)){return(false)}
    }
    return(true);
}

function ClearNonValidEstimates(a)
{
   for(i = 1; i < numPlayers + 1; i++){
        var estimate = document.getElementById(a + "PlayerEstimate" + i).value;
        if(!isPositiveInteger(estimate)){
            document.getElementById(a + "PlayerEstimate" + i).value = "";
        }
    }
}

function RandomizeAdjNounTimeSecret(event)
{
    var num1 = (Math.floor(Math.random()* (EstimationNouns.length - 1)));
    document.getElementById('nounpopup').value = EstimationNouns[num1];
    
    do{
        var num2 = (Math.floor(Math.random()* (EstimationAdjectives.length - 1)));
        document.getElementById('adjectivepopup').value = EstimationAdjectives[num2];
    }
    while (!(appropriateAdj[num2][num1]));
    
    var num3 = (Math.floor(Math.random()* (EstimationTimes.length - 1)));
    document.getElementById('estimatetimepopup').value = EstimationTimes[num3];
    
    document.getElementById('secretmode').checked = Math.floor(Math.random() * 2);
    
    disableInvalidNouns(event);
    disableInvalidAdjs(event);
}


function BeginTimer(event)
{
    estimateTimerMin = document.getElementById('estimatetimepopup').value.charAt(0); // After testing, change to document.getElementById('estimatetimepopup').value.charAt(0);
    estimateTimerSec = 0; // After testing, change to 0
    
    document.getElementById('remaining-minutes').innerText = formatTwoDigits(estimateTimerMin);
    document.getElementById('remaining-seconds').innerText = formatTwoDigits(estimateTimerSec);
    
    //Change this back to 1000 for actual distribution
    estimateTimer = setInterval("SubtractOneSecond(event)",100);
}

function SubtractOneSecond(event)
{
    if((estimateTimerMin == 0) && (estimateTimerSec == 0)){
        clearInterval(estimateTimer);
        GetEstimationResults(event);
    }
    else{
            estimateTimerSec--;
            if(estimateTimerSec == -1){
                estimateTimerSec = 59;
                estimateTimerMin--;
            }
            document.getElementById('remaining-minutes').innerText = formatTwoDigits(estimateTimerMin);
            document.getElementById('remaining-seconds').innerText = formatTwoDigits(estimateTimerSec);
    }
}

//
// Function: formatTwoDigits(number)
// Format a number as one or two digits with a leading zero if needed
//
// number: The number to format
//
// Returns the formatted number as a string.
//

function formatTwoDigits(number)
{
    var digits = number.toString(10);

    // Add a leading zero if it's only one digit long
    if (digits.length == 1) {
        digits = "0" + digits;
    }
    return digits;
}


function GetEstimationResults(event)
{
        //setup top of EstimationResults page
    document.getElementById('EstimateCounter2').innerText = estimateCount;
    document.getElementById('text144').innerText = document.getElementById('adjectivepopup').value + " " + document.getElementById('nounpopup').value + ".";

    //populate the array of player estimates, set up Player estimate, make it visible
    var a = "";
    if(!secretMode){a = "Open";}
    for(i = 0; i < numPlayers; i++){
        estimatesObj[i].playerNumber = i; // useful later when we pass these objects into estimateWinners
        estimatesObj[i].estimate =  document.getElementById(a + 'PlayerEstimate' + (i + 1)).value;
        var currSentence = document.getElementById('PlayerEstimated' + (i + 1));
        currSentence.innerText = playerlist[i].name + " estimated " + estimatesObj[i].estimate + ".";
        currSentence.style.visibility = 'visible';
    }
    
    setCurrentViewEst(document.getElementById('EstimationResults'));
    var t = setTimeout('RevealEstimationResultsWinner(event)', 5000);   //waits five seconds, reveals winner, etc
}

function findWinners(estimateDiffs, bestGuess, realAnswer) {
    winners = new Array();
    var j = 0;
    for(i = 0; i < numPlayers; i++) {
        if(estimateDiffs[i] == bestGuess) {
            winners[j] = i;
            j++;
        }
    }
    estWinners = new Array();
    for(i = 0; i < winners.length; i++) {
        estWinners[i] = playerlist[winners[i]];
    }
    return estWinners;
}

function getEstimateDiffs(estimsArray, realAnswer) {
    estimateDiffs = new Array();
    for(i = 0; i < numPlayers; i++) {
        estimateDiffs[i] = Math.abs(estimsArray[i] - realAnswer);
    }
    return estimateDiffs;
}

function findBestGuess(diffsArray) {
    var bestGuess;
    for(i = 0; i < numPlayers; i++) {
        if(i == 0 || diffsArray[i] < bestGuess) {
            bestGuess = diffsArray[i];
        }
    }
    return bestGuess;
}

function findActualGuess(bestGuess, estimsArray, diffsArray) {
    var actGuess;
    for(i = 0; i < numPlayers; i++) {
        if(diffsArray[i] == bestGuess) {
            return estimsArray[i];
        }
    }
    return -1;
}

function RevealEstimationResultsWinner(event)
{
    estims = new Array();
    for(i = 0; i < numPlayers; i++) {
        estims[i] = estimatesObj[i].estimate;
    }
    var estimateDiffs = getEstimateDiffs(estims, estimateCount);
    var bestGuess = findBestGuess(estimateDiffs);
    var actGuess = findActualGuess(bestGuess, estims, estimateDiffs);
    estimationWinners = findWinners(estimateDiffs, bestGuess, estimateCount);
    
    // Makes WinnerAvatars visible
    for(i = 0; i < estimationWinners.length; i++){
        var currAvatar = document.getElementById('winnerAvatar' + (i + 1));
        currAvatar.src = estimationWinners[i].avatar;    
        currAvatar.style.visibility = 'visible';
    }
      
    //Generate WinnerAnnouncement, make it visible
    var WinnerAnnounce = estimationWinners[0].name;
    for(i = 1; i < estimationWinners.length; i++){
        WinnerAnnounce = WinnerAnnounce + " and " + estimationWinners[i].name;
    }
    WinnerAnnounce = WinnerAnnounce + "! ";
    if(estimationWinners.length > 1){WinnerAnnounce = WinnerAnnounce + " It's a tie!";}
    document.getElementById('winnerAnnouncement').innerText = WinnerAnnounce;
    document.getElementById('winnerAnnouncement').style.visibility = 'visible';
    
    //GenerateWinnerExplanation, make it visible
    var winnerExplanation = "Why? Well, the difference between " + actGuess + " and " + estimateCount + " is " + bestGuess + ", the smallest difference between an estimate and the real number of " + get('text144').innerText + " " + estimationWinners[0].name;
    for(i = 1; i < estimationWinners.length; i++){
        winnerExplanation = winnerExplanation + " and " + estimationWinners[i].name;
    }
    winnerExplanation = winnerExplanation + ": how did you do so well? Share your estimation secrets with the group.";
    document.getElementById('winnerExplanation').innerText = winnerExplanation;
    document.getElementById('winnerExplanation').style.visibility = 'visible';
    
    // Send points won to database
    var pointsWon = 40 - bestGuess;  // perfect estimate wins 30 points
    if(pointsWon < 20){pointsWon = 20;}
    for(var i = 0; i < estimationWinners.length; i++){
        estimationWinners[i].addToScore(pointsWon);
        //playerlist[estimationWinners[i].playerNumber].addToScore(pointsWon);
    }
}

function clearAndReturnToEstimates(event)
{
    clearInterval(estimateTimer);
    for(var i = 1; i < 5; i++){    // clears estimates, secretcover images
        document.getElementById('PlayerEstimate' + i).value = "";
        document.getElementById('OpenPlayerEstimate' + i).value = "";
        document.getElementById('SecretCover' + i).style.visibility = 'hidden';
    }
    backToEstimates(event);
}


function backToEstimates(event)
{
    hideEstimationErrorMessages(event);
    if (secretMode) { makeSecretEstimates(event)
    } else { makeOpenEstimates(event)
    }
}


function hideEstimationErrorMessages(event)
{
    document.getElementById("EstimateError").style.visibility = 'hidden';
    document.getElementById("OpenEstimateError").style.visibility = 'hidden';
}

function showEstimationErrorMessages(event)
{
    document.getElementById("EstimateError").style.visibility = 'visible';
    document.getElementById("OpenEstimateError").style.visibility = 'visible';
}


function isPositiveInteger(val)
{
      if(val==null){return false;}
      if (val.length==0){return false;}
      for (var i = 0; i < val.length; i++) {
            var ch = val.charAt(i)
            if (ch < "0" || ch > "9") {
            return false;
            }
      }
      return true;
}


function CounterMinus1(event)
{
    CounterMinus(event,1);
}


function CounterPlus1(event)
{
    CounterPlus(event,1);
}

function CounterMinus2(event)
{
    CounterMinus(event,2);
}

function CounterPlus2(event)
{
    CounterPlus(event,2);
}

function setupAppropriateAdj(event)   // as more Adj or Nouns are added, this function should be changed to reflect new combinations
{
    appropriateAdj[0] = new Array(1,1,1,1,1,1,1,1,1);  // This is the one adj ("") appropriate for all nouns, so all are set to True
    
    for(var i = 1; i < EstimationAdjectives.length; i++){
        appropriateAdj[i] = new Array(1,0,0,1,1,0,0,0,1);
    }
}


function disableInvalidNouns(event)
{
    // find adj value
    var adjValue = document.getElementById('adjectivepopup').value;
    var adjNumber;
    for(var i = 0; i < EstimationAdjectives.length;i++){
        if(EstimationAdjectives[i] == adjValue){
            adjNumber = i;
        }
    }

    for(var i = 0; i < EstimationNouns.length; i++){
        document.getElementById("nounpopup").options[i].disabled = !(appropriateAdj[adjNumber][i]); 
    }
}

function disableInvalidAdjs(event)
{
    // find noun value
    var nounValue = document.getElementById('nounpopup').value;
    var nounNumber;
    for(var i = 0; i < EstimationNouns.length;i++){
        if(EstimationNouns[i] == nounValue){
            nounNumber = i;
        }
    }

    for(var i = 0; i < EstimationAdjectives.length; i++){
        document.getElementById("adjectivepopup").options[i].disabled = !(appropriateAdj[i][nounNumber]); 
    }
           
}

function setCurrentViewEst(a) 
{
    var view = document.getElementById('stackLayout');
    var est = document.getElementById('trafficLights');
    var est2 = document.getElementById('tl');
    est2.object.setCurrentView(a);
    view.object.setCurrentView(est);
}


function startEstimStat(event)
{
    estimateCount = 0;        //clear scores 
    for(var i = 1; i < 5; i++){    // clears estimates, secretcover images, results page
    document.getElementById('PlayerEstimate' + i).value = "";
        document.getElementById('OpenPlayerEstimate' + i).value = "";
        document.getElementById('SecretCover' + i).style.visibility = 'hidden';
        document.getElementById('winnerAvatar' +i).style.visibility = 'hidden';
        document.getElementById('PlayerEstimated' +i).style.visibility = 'hidden';
    }
    document.getElementById('winnerAnnouncement').style.visibility = 'hidden';
    document.getElementById('winnerExplanation').style.visibility = 'hidden';
    for (var i = 0; i < EstimationAdjectives.length; i++){   //hides all "ContestBegun" images;
        for(var j = 0; j < EstimationNouns.length; j++){
        var adjective = EstimationAdjectives[i];
            var noun = removeSpaces(EstimationNouns[j]);  // for "Gas Stations"
            if(document.getElementById(noun) != undefined){
                document.getElementById(noun).style.visibility = 'hidden';
            }
        }
    }
    setCurrentViewEst(document.getElementById('GuessSelection'));
}

//Google Maps Code
//*********************************************************************************

function initializeGoogleMapsPage(isNewTrip)
{
    gmap = this;
    var latlng = new google.maps.LatLng(37.45, -122.15);
    var initialLocation;
    var myOptions = {
      zoom: 12,
      center: latlng,
      navigationControl:true,
      navigationControlOptions: {
            style: google.maps.NavigationControlStyle.SMALL
      },
      scaleControl:true,
      mapTypeControl:true,
      mapTypeControlOptions: {
            style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
      },
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    var elem = document.getElementById("map_canvas");
    var map = new google.maps.Map(elem, myOptions);
    
    //Tries to found out the current position, with a method being passed in that is called
    //once the position is found.
    this.getCurrentPosition = function(posFoundMethod) {
        browserSupportFlag = true;
        if(navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(posFoundMethod, function() {
                handleNoGeolocation(browserSupportFlag);
            });
        } else if (google.gears) {
            var geo = google.gears.factory.create('beta.geolocation');
            geo.getCurrentPosition(posFoundMethod, function() {
                handleNoGeoLocation(browserSupportFlag);
            });
        } else {
            browserSupportFlag = false;
            handleNoGeolocation(browserSupportFlag);
        }
    }
    
    if(isNewTrip) {
        this.getCurrentPosition(initialPositionFound);
    }
    var marker;
    var that = this;
    this.geocoder = new google.maps.Geocoder();
    this.checkins = new Array();
    var infoWindow = new google.maps.InfoWindow();
    google.maps.event.addListener(map, 'click', function(event) {
        placeMarker(event.latLng, false);
    });
    
    // Create the DIV to hold the control and call the HomeControl()
    // constructor passing in this DIV.
    var homeControlDiv = document.createElement('DIV');
    var homeControl = new CustomControl(map, homeControlDiv, undefined, undefined);

    homeControlDiv.index = 1;
    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(homeControlDiv);
    document.onkeydown = keyListener;
    
    //Getters and setters for gmap stuff
    this.getGeocoder = function () {
        return that.geocoder;
    }
    
    this.getStartMarker = function () {
        return that.startMarker;
    }
    
    this.getEndMarker = function() {
        return that.endMarker;
    }
    
    this.setStartMarker = function(newMark, newMarkAddr) {
        that.startMarker = newMark;
        that.startMarker.markAddr = newMarkAddr;
    }
    
    this.setEndMarker = function(newMark, newMarkAddr) {
        that.endMarker = newMark;
        that.endMarker.markAddr = newMarkAddr;
    }
    
    this.getMainRoute = function() {
        return that.mainRoute;
    }
    
    this.setMainRoute = function(mainRte) {
        that.mainRoute = mainRte;
        that.checkins = new Array();
        addToCheckIns(mainRte);
    }
    
    this.getMainDistance = function() {
        return getRouteDistance(that.getMainRoute());
    }
    
    this.getRouteDistance = function(routeObj) {
        return calculateMiles(routeObj);
    }
    
    this.getMainTimeInSeconds = function() {
        return getRouteTimeInSeconds(that.getMainRoute());
    }
    
    this.getRouteTimeInSeconds = function(routeObj) {
        return calculateTime(routeObj);
    }
    
    this.getMainTimeInHoursMinSecs = function() {
       return getRouteTimeInHoursMinSecs(that.getMainRoute());
    }
    
    this.getRouteTimeInHoursMinSecs = function(routeObj) {
        var secs = calculateTime(routeObj);
        var hours = Math.floor(secs/3600);
        var secsLeft = secs - hours*3600;
        var minutes = Math.floor(secsLeft/60);
        secsLeft = secsLeft - minutes*60;
        return new Array(hours, minutes, secsLeft); 
    }
    
    //method that will place a marker at a given location
    //In this method you must specify whether its the starting location or not
    this.placeMarker = function (location, isStart) {
        if(isStart) {
            marker = gmap.getStartMarker();
        }else{
            marker = gmap.getEndMarker();
        }
        if(marker) {
            marker.setMap(null);
        }
        marker = new google.maps.Marker({
            position: location, 
            draggable: true,
            map: map
        });
        var markerAddr;
        codeLatLng(location, isStart);
        if(isStart) {
            gmap.setStartMarker(marker, markerAddr);
        }else{
            gmap.setEndMarker(marker, markerAddr);
        }
        map.setCenter(location);
    }
    
    this.codeLatLng = function (loc, isStart) {
        geocoder.geocode({'latLng': loc}, function(results, status) {
        var prefix = "Starting point";
        if(!isStart) {
            prefix = "Destination";
        }
        if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                markerAddr = results[0].formatted_address;
                if(isStart) {
                    that.setStartMarker(that.getStartMarker(), markerAddr);
                }else{
                    that.setEndMarker(that.getEndMarker(), markerAddr);
                }
                infoWindow.setContent(prefix + ": " + markerAddr);
                infoWindow.open(map, marker);
            }
        } else {
            alert("Geocoder failed due to: " + status);
        }
        });
    }
    
    this.addCheckIn = function() {
        getCurrentPosition(currentPositionFound);
    }
    
    this.figureOutDirections = function(startlatLng, endlatLng, routeFndMethod) {
        var directionsService = new google.maps.DirectionsService();
        var requestDir = { 
            origin: startlatLng, 
            destination: endlatLng, 
            travelMode: google.maps.DirectionsTravelMode.DRIVING, 
            unitSystem: google.maps.DirectionsUnitSystem.IMPERIAL, 
            provideRouteAlternatives: true 
        }; 
        directionsService.route(requestDir, routeFndMethod);
    }
        
    function keyListener(e) {
        if(!e) {
            e = window.event;
        }
        if(e.keyCode == 13) {
            goToView2(e);
        }
    }
    
    function calculateMiles(directionsObj) {
        var miles = 0;
        var route = directionsObj.routes[0];
        var numPlusUnit = route.legs[0].distance.text;
        var spacePos = numPlusUnit.indexOf(" ");
        return Number(numPlusUnit.slice(0, spacePos));
    }
    
    function getMainRouteLeg(directionsObj) {
        return directionsObj.routes[0].legs[0];
    }
    
    function calculateTime(directionsObj) {
        var seconds = 0;
        var route = getMainRouteLeg(directionsObj);
        return Number(route.duration.value);
    }
    
    function addToCheckIns(routeObj) {
        var checkInObj = new function() {
            this.route = routeObj;
            this.date = new Date();
            var that = this;
            
            this.getDistanceTravelled = function() {
                return gmap.getMainDistance() - gmap.getRouteDistance(that.route);
            }
            
            this.getGoogleMinutesElapsed = function() {
                var secsDiff = gmap.getMainTimeInSeconds() - gmap.getRouteTimeInSeconds();
                return secsDiff/60;
            }
            
            this.getActualMinutesElapsed = function() {
                var millisE = calculateMillisElapsed(that.date);
                return millisToMins(millisE);
            }
        }();
            
        that.checkins.push(checkInObj);
        if(!localStorage.numCheckIns) {
            localStorage.numCheckIns = 0;
        }
        var ind = localStorage.numCheckIns;
        var cIn = checkInObj;
        localStorage['checkins'+ind+'miles'] = cIn.getDistanceTravelled();
        localStorage['checkins'+ind+'mins'] = cIn.getActualMinutesElapsed();
        localStorage['checkins'+ind+'point'] = getMainRouteLeg(routeObj).start_location;
        localStorage.numCheckIns = Number(localStorage.numCheckIns)+1;
    }
    
    this.getCheckIns = function() {
        return that.checkins;
    }
    
    function initialPositionFound(position) {
        initialLocation = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
        map.setCenter(initialLocation);
        placeMarker(initialLocation, true);
    }
    
    function currentPositionFound(position) {
        initialLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
        
        figureOutDirections(initialLocation, gmap.getEndMarker().getPosition(), checkInRouteFound);
    }
    
    this.checkInRouteFound = function(result) {
        addToCheckIns(result);
    }
    
    /**
    * Google Map Overlays --------------
    * Controls for making sure that we can set the start and the end controls for the map
    */

    // Define a property to hold the start and end state
    CustomControl.prototype.start_ = null;
    CustomControl.prototype.end_ = null;

    // Define setters and getters for these properties
    CustomControl.prototype.getStart = function() {
        return this.start_;
    }

    CustomControl.prototype.getEnd = function() {
        return this.end_;
    }

    CustomControl.prototype.setStart = function(start) {
        this.start_ = start;
        placeMarker(start, true);
    }

    CustomControl.prototype.setEnd = function(end) {
        this.end_ = end;
        placeMarker(end, false);
    }

    function CustomControl(map, div, start, end) {

        // Get the control DIV. We'll attach our control UI to this DIV.
        var controlDiv = div;

        // We set up a variable for the 'this' keyword since we're adding event
        // listeners later and 'this' will be out of scope.
        var control = this;

        // Set the two properties upon construction
        control.start_ = start;
        control.end_ = end;

        // Set CSS styles for the DIV containing the control. Setting padding to
        // 5 px will offset the control from the edge of the map
        controlDiv.style.padding = '5px';

        // Set CSS for the control border
        var setStartUI = document.createElement('DIV');
        setStartUI.style.backgroundColor = 'white';
        setStartUI.style.borderStyle = 'solid';
        setStartUI.style.borderWidth = '2px';
        setStartUI.style.cursor = 'pointer';
        setStartUI.style.textAlign = 'center';
        setStartUI.title = 'Click to set the map to Start';
        controlDiv.appendChild(setStartUI);

        // Set CSS for the control interior
        var setStartText = document.createElement('DIV');
        setStartText.innerHTML = 'Set Start';
        setStartText.style.fontFamily = 'Arial,sans-serif';
        setStartText.style.fontSize = '12px';
        setStartText.style.paddingLeft = '4px';
        setStartText.style.paddingRight = '4px';
        setStartUI.appendChild(setStartText);
  
        // Set CSS for the setHome control border
        var setEndUI = document.createElement('DIV');
        setEndUI.style.backgroundColor = 'white';
        setEndUI.style.borderStyle = 'solid';
        setEndUI.style.borderWidth = '2px';
        setEndUI.style.cursor = 'pointer';
        setEndUI.style.textAlign = 'center';setEndUI.title = 'Click to set the end fo the current Center';
        controlDiv.appendChild(setEndUI);

        // Set CSS for the control interior
        var setEndText = document.createElement('DIV');
        setEndText.innerHTML = 'Set End';
        setEndText.style.fontFamily = 'Arial,sans-serif';
        setEndText.style.fontSize = '12px';
        setEndText.style.paddingLeft = '4px';
        setEndText.style.paddingRight = '4px';
        setEndUI.appendChild(setEndText);

        // Setup the click event listener for Home:
        // simply set the map to the control's current home property.
        google.maps.event.addDomListener(setStartUI, 'click', function() {
            var newHome = map.getCenter();
            control.setStart(newHome);
        });

        // Setup the click event listener for Set Home:
        // Set the control's home to the current Map center.
        google.maps.event.addDomListener(setEndUI, 'click', function() {
            var newHome = map.getCenter();
            control.setEnd(newHome);
        });
    }
}

function handleNoGeolocation(errorFlag) {
    if (errorFlag == true) {
        alert("Geolocation service failed.");
        var newyork = new google.maps.LatLng(40.69847032728747, -73.9514422416687);
	initialLocation = newyork;
    } else {
        alert("Your browser doesn't support geolocation. We've placed you in Siberia.");
	var siberia = new google.maps.LatLng(60, 105);
        initialLocation = siberia;
    }
    map.setCenter(initialLocation);
  }

function get(element) {
    return document.getElementById(element);
}

function decideIfContinuing(event)
{
    if(localStorage.player0avatar && localStorage.player0avatar != "null") {
        loadGame(event);
    }else{
        goToView1(event);
    }
}

function loadGame(event) {
    initializeGoogleMapsPage(false);
    var startlat = parseLat(localStorage.startlatLng);
    var startlng = parseLng(localStorage.startlatLng);
    var endlat = parseLat(localStorage.endlatLng);
    var endlng = parseLng(localStorage.endlatLng);
    gmap.placeMarker(new google.maps.LatLng(startlat, startlng), true);
    gmap.placeMarker(new google.maps.LatLng(endlat, endlng), false);
    gmap.figureOutDirections(gmap.getStartMarker().getPosition(), gmap.getEndMarker().getPosition(), mainRouteLoaded);
    loadPlayerInfo();
    switchTo('continue_trip');
    
    function mainRouteLoaded(result, status) {
        if(status == google.maps.DirectionsStatus.OK) {
            mainRouteFound(result, 'destination_miles1', "start over.");
        }
    }
}

function parseLat(latitlng) {
    var index = latitlng.indexOf(",");
    return Number(latitlng.slice(1, index));
}

function parseLng(latitlng) {
    var index = latitlng.indexOf(",");
    var lng = latitlng.slice(index+1, latitlng.length-1).trim();
    return Number(lng);
}

function loadPlayerInfo() {
    numPlayers = parseInt(localStorage.numPlayers);
    for(var i = 0; i < numPlayers; i++) {
        retrievePlayerFromLocalStorage(i);
        showAvatar("", i, 13);
        showPlayerName("", i, 13);
    }
    restoreMainHoursFields();
}

function clearPlayerInfo() {
    for(var i = 0; i < MAX_PLAYERS; i++) {
        playerlist[i].name = "";
        playerlist[i].avatar = "";
        playerlist[i].score = 0;
        playerlist[i].mainguessmiles = 0;
        playerlist[i].mainguessmins = 0;
    }
}

function goToView1(event) {
    localStorage.clear();
    clearPlayerInfo();
    initializeGoogleMapsPage(true);
    switchTo('api_view1');
}

function goToView2(event) {
    var text = get("map_destination").value;
    if(text && gmap.getStartMarker()) {
        geocodeDestination();
        get('map_destination').value = "";
        get('map_start').innerHTML = "Is this the correct location?, tap Done to continue, or try another place";
        return;
    }else if(!gmap.getStartMarker() || !gmap.getEndMarker()) {
        get('map_start').innerHTML = "Please click on your destination first";
        return;
    }
    gmap.figureOutDirections(gmap.getStartMarker().getPosition(), gmap.getEndMarker().getPosition(), mainRouteView2);
    // Set the current view of a StackLayout
    switchTo('api_view2');
    
    function mainRouteView2(result, status) {
        if(status == google.maps.DirectionsStatus.OK) {
            mainRouteFound(result, 'destination_miles', "go back.");
        }
    }
    
    function geocodeDestination(event) {
        var address = get("map_destination").value;
        gmap.getGeocoder().geocode( { 'address': address}, function(results, status) {
            if(status == google.maps.GeocoderStatus.OK) {
                gmap.placeMarker(results[0].geometry.location,false);
            }else{
                alert("Geocode was not successful for the following reason: " + status);
            }
        });
    }

}

function mainRouteFound(result, fieldName, help) {
    gmap.setMainRoute(result);
    localStorage.startlatLng = gmap.getStartMarker().getPosition();
    localStorage.endlatLng = gmap.getEndMarker().getPosition();
    var startText = "Start: " + stripAddressOut(gmap.getStartMarker().markAddr) + "<br>";
    var endText = "End: " + stripAddressOut(gmap.getEndMarker().markAddr) + "<br>";
    get(fieldName).innerHTML = startText+endText+"If this is not correct, please "+help;
}


function stripAddressOut(addrStr) {
    var index = addrStr.indexOf(",");
    var lindex = addrStr.lastIndexOf(",");
    var matches = addrStr.match(/,/gi);
    if(matches.length > 2) {
        return addrStr.slice(index+2, lindex);
    }
    return addrStr;
}

function stripToCityState(addrStr) {
    var addrOut = stripAddressOut(addrStr);
    return addrOut.slice(0, addrOut.length-6);
}

function switchTo(viewName) {
    var stackLayout = document.getElementById('stackLayout').object; // Replace with id of StackLayout
    stackLayout.setCurrentView(viewName); // Replace with id of new view (or the view element itself)
}

function backtoapiview1(event) {
    switchTo('api_view1');
}

//End Google Maps Code
//**************************************************************************************
function startEstimationStation(event)
{
    // Insert Code Here
}

function selectAvatar1(event)
{
    selectAvatar(event, 1);
}

function selectAvatar2(event)
{
    selectAvatar(event, 2);
}

function selectAvatar3(event)
{
    selectAvatar(event, 3);
}

function selectAvatar4(event)
{
    selectAvatar(event, 4);
}

function selectAvatar(event, i)
{
    currPlayerToChangeAvatar = document.getElementById('avatar' + i)
    var views = document.getElementById('stackLayout');
    var about = document.getElementById('avatarSelect');
    if (views && views.object && about) {
        views.object.setCurrentView(about);
    }
}

function changeAvatar1(event)
{
    changeAvatar(event, 1);
}

function changeAvatar2(event)
{
    changeAvatar(event, 2);
}

function changeAvatar3(event)
{
    changeAvatar(event, 3);
}

function changeAvatar4(event)
{
    changeAvatar(event, 4);
}

function changeAvatar5(event)
{
    changeAvatar(event, 5);
}

function changeAvatar6(event)
{
    changeAvatar(event, 6);
}

function changeAvatar7(event)
{
    changeAvatar(event, 7);
}

function changeAvatar8(event)
{
    changeAvatar(event, 8);
}

function changeAvatar9(event)
{
    changeAvatar(event, 9);
}

function changeAvatar10(event)
{
    changeAvatar(event, 10);
}

function changeAvatar11(event)
{
    changeAvatar(event, 11);
}

function changeAvatar12(event)
{
    changeAvatar(event, 12);
}

function changeAvatar(event, num)
{
    selectedImage = document.getElementById('avatar'+(num+8));
    currPlayerToChangeAvatar.src = selectedImage.src;
    returnToPlayerSelect(event);
}

function returnToPlayerSelect(event)
{
    var views = document.getElementById('stackLayout');
    var about = document.getElementById('players');
    if (views && views.object && about) {
        views.object.setCurrentView(about);
    }
}

function drawCheckInMainChart() {
    var checkInsSoFar = gmap.getCheckIns();
    var myData = new Array();
    //for(var i = 0; i < checkInsSoFar.length; i++) {
    for(var i = 0; i < localStorage.numCheckIns; i++) {
        var cMins = localStorage['checkins'+i+'mins'];
        var cMiles = localStorage['checkins'+i+'miles'];
        if(!cMins || isNaN(cMins)) {
            cMins = 0;
        }
        if(!cMiles || isNaN(cMiles)) {
            cMiles = 0;
        }
        var singleArr = new Array(Number(cMins), Number(cMiles));
        myData.push(singleArr);
    }
    var myChart = new JSChart('chart_canvas', 'line');
    myChart.setDataArray(myData);
    var myDatas = new Array();
    var minutesEsts = convertArrayToNumbers(getGuessesFromTFields('PlayerEstimate', 13));
    var hoursEsts = convertArrayToNumbers(getGuessesFromTFields('PlayerEstimate', 9));
    for(var i = 0; i < numPlayers; i++) {
        var otherData = new Array();
        otherData.push(new Array(minutesEsts[i]+ hoursEsts[i]*60, gmap.getMainDistance()));
        myDatas[i] = otherData;
        dataName = 'name'+i;
        myChart.setDataArray(myDatas[i], dataName);
        myChart.setTooltip([minutesEsts[i] + hoursEsts[i]*60, minutesEsts[i] + hoursEsts[i]*60, dataName]);
        myDatas.push(otherData);
    }
    //myChart.setBackgroundColor('#fff');
    myChart.setAxisNameX('Minutes');
    myChart.setAxisNameY('Miles');
    myChart.setSize(320, 380);
    myChart.draw();
}

function switchToChart(event)
{
    drawCheckInMainChart();
    switchTo('time_chart');
}


function switchToCheckIn(event)
{
    switchTo('mainHoursPrelim');
}
